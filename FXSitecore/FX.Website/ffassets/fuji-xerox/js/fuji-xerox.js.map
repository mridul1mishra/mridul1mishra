{"version":3,"sources":["src/_js/node_modules/browser-pack/_prelude.js","src/_js/node_modules/@fancyapps/fancybox/dist/jquery.fancybox.js","src/_js/node_modules/dot/doT.js","src/_js/node_modules/enquire.js/src/MediaQuery.js","src/_js/node_modules/enquire.js/src/MediaQueryDispatch.js","src/_js/node_modules/enquire.js/src/QueryHandler.js","src/_js/node_modules/enquire.js/src/Util.js","src/_js/node_modules/enquire.js/src/index.js","src/_js/node_modules/jquery-match-height/dist/jquery.matchHeight.js","src/_js/node_modules/jquery/dist/jquery.js","src/_js/node_modules/js-cookie/src/js.cookie.js","src/_js/node_modules/json-query/index.js","src/_js/node_modules/json-query/lib/depth-split.js","src/_js/node_modules/json-query/lib/state.js","src/_js/node_modules/json-query/lib/tokenize.js","src/_js/node_modules/match-media/matchMedia.js","src/_js/node_modules/object-fit-images/dist/ofi.common-js.js","src/_js/node_modules/object-fit-videos/object-fit-videos.js","src/_js/node_modules/slick-carousel/slick/slick.js","src/_js/node_modules/tablesorter/dist/js/jquery.tablesorter.combined.js","src/_js/src/_js/fuji-xerox.js","src/_js/src/_modules/clone-select/clone-select.js","src/_js/src/_modules/molecules/compare-item/compare-item.js","src/_js/src/_modules/molecules/listing-sorter/listing-sorter.js","src/_js/src/_modules/molecules/nav-tabs-anchor/nav-tabs-anchor.js","src/_js/src/_modules/molecules/product-item/product-item.js","src/_js/src/_modules/molecules/question-item/question-item.js","src/_js/src/_modules/molecules/subscribe-form/subscribe-form.js","src/_js/src/_modules/organisms/accordion-wrapper/accordion-wrapper.js","src/_js/src/_modules/organisms/agenda/agenda.js","src/_js/src/_modules/organisms/alipay-form/alipay-form.js","src/_js/src/_modules/organisms/carousel/carousel.js","src/_js/src/_modules/organisms/featured-speakers/featured-speakers.js","src/_js/src/_modules/organisms/form/form.js","src/_js/src/_modules/organisms/image-links-wrapper/image-links-wrapper.js","src/_js/src/_modules/organisms/insight-component/insight-component.js","src/_js/src/_modules/organisms/listing-filters/listing-filters.js","src/_js/src/_modules/organisms/listing-results/listing-results.js","src/_js/src/_modules/organisms/mapper/mapper.js","src/_js/src/_modules/organisms/modal/modal.js","src/_js/src/_modules/organisms/newsroom-wrapper/newsroom-wrapper.js","src/_js/src/_modules/organisms/product-finder-compare/product-finder-compare.js","src/_js/src/_modules/organisms/product-finder/product-finder.js","src/_js/src/_modules/organisms/reseller-locator/reseller-locator.js","src/_js/src/_modules/organisms/site-header/site-header.js","src/_js/src/_modules/organisms/solutions-services/solutions-services.js","src/_js/src/_modules/organisms/store-locator/store-locator.js","src/_js/src/_modules/organisms/tab-carousel/tab-carousel.js","src/_js/src/_modules/organisms/tabs/tabs.js","src/_js/src/_modules/table-responsive/table-responsive.js","src/_js/src/_modules/view-controller/view-controller.js","src/_js/src/_modules/wffm-add-remove-fields/wffm-add-remove-fields.js"],"names":[],"mappingslghrpYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5+TA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrpRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnrvnz8LA;AACA;;AAEA;;AAEA;;AACA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAtBA;AAwBA,CAAC,UAAS,CAAT,EAAW;AACX,GAAE,YAAM;AACP,MAAI,SAAS;AACZ,gBAAa;AACZ,gBAAY,IADA;AAEZ,aAAS,IAFG;AAGZ,YAAQ,GAHI;AAIZ,cAAU;AAJE;;AAQd;AATa,GAAb,CAUA;AACA;;AAEA;AACA,MAAI,EAAE,OAAF,EAAW,MAAf,EAAuB;AACtB,OAAI,yBAAJ;AACA;;AAED,MAAI,EAAE,gBAAF,EAAoB,MAAxB,EAAgC;AAC/B,KAAE,gBAAF,EAA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","file":"fuji-xerox.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\n; jQuery = global.jQuery = require(\"jquery\");\n; var __browserify_shim_require__=require;(function browserifyShim(module, define, require) {\n// ==================================================\n// fancyBox v3.5.2\n//\n// Licensed GPLv3 for open source use\n// or fancyBox Commercial License for commercial use\n//\n// http://fancyapps.com/fancybox/\n// Copyright 2018 fancyApps\n//\n// ==================================================\n(function(window, document, $, undefined) {\r\n  \"use strict\";\r\n\r\n  window.console = window.console || {\r\n    info: function(stuff) {}\r\n  };\r\n\r\n  // If there's no jQuery, fancyBox can't work\r\n  // =========================================\r\n\r\n  if (!$) {\r\n    return;\r\n  }\r\n\r\n  // Check if fancyBox is already initialized\r\n  // ========================================\r\n\r\n  if ($.fn.fancybox) {\r\n    console.info(\"fancyBox already initialized\");\r\n\r\n    return;\r\n  }\r\n\r\n  // Private default settings\r\n  // ========================\r\n\r\n  var defaults = {\r\n    // Close existing modals\r\n    // Set this to false if you do not need to stack multiple instances\r\n    closeExisting: false,\r\n\r\n    // Enable infinite gallery navigation\r\n    loop: false,\r\n\r\n    // Horizontal space between slides\r\n    gutter: 50,\r\n\r\n    // Enable keyboard navigation\r\n    keyboard: true,\r\n\r\n    // Should allow caption to overlap the content\r\n    preventCaptionOverlap: true,\r\n\r\n    // Should display navigation arrows at the screen edges\r\n    arrows: true,\r\n\r\n    // Should display counter at the top left corner\r\n    infobar: true,\r\n\r\n    // Should display close button (using `btnTpl.smallBtn` template) over the content\r\n    // Can be true, false, \"auto\"\r\n    // If \"auto\" - will be automatically enabled for \"html\", \"inline\" or \"ajax\" items\r\n    smallBtn: \"auto\",\r\n\r\n    // Should display toolbar (buttons at the top)\r\n    // Can be true, false, \"auto\"\r\n    // If \"auto\" - will be automatically hidden if \"smallBtn\" is enabled\r\n    toolbar: \"auto\",\r\n\r\n    // What buttons should appear in the top right corner.\r\n    // Buttons will be created using templates from `btnTpl` option\r\n    // and they will be placed into toolbar (class=\"fancybox-toolbar\"` element)\r\n    buttons: [\r\n      \"zoom\",\r\n      //\"share\",\r\n      \"slideShow\",\r\n      //\"fullScreen\",\r\n      //\"download\",\r\n      \"thumbs\",\r\n      \"close\"\r\n    ],\r\n\r\n    // Detect \"idle\" time in seconds\r\n    idleTime: 3,\r\n\r\n    // Disable right-click and use simple image protection for images\r\n    protect: false,\r\n\r\n    // Shortcut to make content \"modal\" - disable keyboard navigtion, hide buttons, etc\r\n    modal: false,\r\n\r\n    image: {\r\n      // Wait for images to load before displaying\r\n      //   true  - wait for image to load and then display;\r\n      //   false - display thumbnail and load the full-sized image over top,\r\n      //           requires predefined image dimensions (`data-width` and `data-height` attributes)\r\n      preload: false\r\n    },\r\n\r\n    ajax: {\r\n      // Object containing settings for ajax request\r\n      settings: {\r\n        // This helps to indicate that request comes from the modal\r\n        // Feel free to change naming\r\n        data: {\r\n          fancybox: true\r\n        }\r\n      }\r\n    },\r\n\r\n    iframe: {\r\n      // Iframe template\r\n      tpl:\r\n        '<iframe id=\"fancybox-frame{rnd}\" name=\"fancybox-frame{rnd}\" class=\"fancybox-iframe\" allowfullscreen allow=\"autoplay; fullscreen\" src=\"\"></iframe>',\r\n\r\n      // Preload iframe before displaying it\r\n      // This allows to calculate iframe content width and height\r\n      // (note: Due to \"Same Origin Policy\", you can't get cross domain data).\r\n      preload: true,\r\n\r\n      // Custom CSS styling for iframe wrapping element\r\n      // You can use this to set custom iframe dimensions\r\n      css: {},\r\n\r\n      // Iframe tag attributes\r\n      attr: {\r\n        scrolling: \"auto\"\r\n      }\r\n    },\r\n\r\n    // For HTML5 video only\r\n    video: {\r\n      tpl:\r\n        '<video class=\"fancybox-video\" controls controlsList=\"nodownload\" poster=\"{{poster}}\">' +\r\n        '<source src=\"{{src}}\" type=\"{{format}}\" />' +\r\n        'Sorry, your browser doesn\\'t support embedded videos, <a href=\"{{src}}\">download</a> and watch with your favorite video player!' +\r\n        \"</video>\",\r\n      format: \"\", // custom video format\r\n      autoStart: true\r\n    },\r\n\r\n    // Default content type if cannot be detected automatically\r\n    defaultType: \"image\",\r\n\r\n    // Open/close animation type\r\n    // Possible values:\r\n    //   false            - disable\r\n    //   \"zoom\"           - zoom images from/to thumbnail\r\n    //   \"fade\"\r\n    //   \"zoom-in-out\"\r\n    //\r\n    animationEffect: \"zoom\",\r\n\r\n    // Duration in ms for open/close animation\r\n    animationDuration: 366,\r\n\r\n    // Should image change opacity while zooming\r\n    // If opacity is \"auto\", then opacity will be changed if image and thumbnail have different aspect ratios\r\n    zoomOpacity: \"auto\",\r\n\r\n    // Transition effect between slides\r\n    //\r\n    // Possible values:\r\n    //   false            - disable\r\n    //   \"fade'\r\n    //   \"slide'\r\n    //   \"circular'\r\n    //   \"tube'\r\n    //   \"zoom-in-out'\r\n    //   \"rotate'\r\n    //\r\n    transitionEffect: \"fade\",\r\n\r\n    // Duration in ms for transition animation\r\n    transitionDuration: 366,\r\n\r\n    // Custom CSS class for slide element\r\n    slideClass: \"\",\r\n\r\n    // Custom CSS class for layout\r\n    baseClass: \"\",\r\n\r\n    // Base template for layout\r\n    baseTpl:\r\n      '<div class=\"fancybox-container\" role=\"dialog\" tabindex=\"-1\">' +\r\n      '<div class=\"fancybox-bg\"></div>' +\r\n      '<div class=\"fancybox-inner\">' +\r\n      '<div class=\"fancybox-infobar\"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div>' +\r\n      '<div class=\"fancybox-toolbar\">{{buttons}}</div>' +\r\n      '<div class=\"fancybox-navigation\">{{arrows}}</div>' +\r\n      '<div class=\"fancybox-stage\"></div>' +\r\n      '<div class=\"fancybox-caption\"></div>' +\r\n      \"</div>\" +\r\n      \"</div>\",\r\n\r\n    // Loading indicator template\r\n    spinnerTpl: '<div class=\"fancybox-loading\"></div>',\r\n\r\n    // Error message template\r\n    errorTpl: '<div class=\"fancybox-error\"><p>{{ERROR}}</p></div>',\r\n\r\n    btnTpl: {\r\n      download:\r\n        '<a download data-fancybox-download class=\"fancybox-button fancybox-button--download\" title=\"{{DOWNLOAD}}\" href=\"javascript:;\">' +\r\n        '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z\"/></svg>' +\r\n        \"</a>\",\r\n\r\n      zoom:\r\n        '<button data-fancybox-zoom class=\"fancybox-button fancybox-button--zoom\" title=\"{{ZOOM}}\">' +\r\n        '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z\"/></svg>' +\r\n        \"</button>\",\r\n\r\n      close:\r\n        '<button data-fancybox-close class=\"fancybox-button fancybox-button--close\" title=\"{{CLOSE}}\">' +\r\n        '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z\"/></svg>' +\r\n        \"</button>\",\r\n\r\n      // Arrows\r\n      arrowLeft:\r\n        '<button data-fancybox-prev class=\"fancybox-button fancybox-button--arrow_left\" title=\"{{PREV}}\">' +\r\n        '<div><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z\"/></svg></div>' +\r\n        \"</button>\",\r\n\r\n      arrowRight:\r\n        '<button data-fancybox-next class=\"fancybox-button fancybox-button--arrow_right\" title=\"{{NEXT}}\">' +\r\n        '<div><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z\"/></svg></div>' +\r\n        \"</button>\",\r\n\r\n      // This small close button will be appended to your html/inline/ajax content by default,\r\n      // if \"smallBtn\" option is not set to false\r\n      smallBtn:\r\n        '<button type=\"button\" data-fancybox-close class=\"fancybox-button fancybox-close-small\" title=\"{{CLOSE}}\">' +\r\n        '<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1\" viewBox=\"0 0 24 24\"><path d=\"M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z\"/></svg>' +\r\n        \"</button>\"\r\n    },\r\n\r\n    // Container is injected into this element\r\n    parentEl: \"body\",\r\n\r\n    // Hide browser vertical scrollbars; use at your own risk\r\n    hideScrollbar: true,\r\n\r\n    // Focus handling\r\n    // ==============\r\n\r\n    // Try to focus on the first focusable element after opening\r\n    autoFocus: true,\r\n\r\n    // Put focus back to active element after closing\r\n    backFocus: true,\r\n\r\n    // Do not let user to focus on element outside modal content\r\n    trapFocus: true,\r\n\r\n    // Module specific options\r\n    // =======================\r\n\r\n    fullScreen: {\r\n      autoStart: false\r\n    },\r\n\r\n    // Set `touch: false` to disable panning/swiping\r\n    touch: {\r\n      vertical: true, // Allow to drag content vertically\r\n      momentum: true // Continue movement after releasing mouse/touch when panning\r\n    },\r\n\r\n    // Hash value when initializing manually,\r\n    // set `false` to disable hash change\r\n    hash: null,\r\n\r\n    // Customize or add new media types\r\n    // Example:\r\n    /*\r\n      media : {\r\n        youtube : {\r\n          params : {\r\n            autoplay : 0\r\n          }\r\n        }\r\n      }\r\n    */\r\n    media: {},\r\n\r\n    slideShow: {\r\n      autoStart: false,\r\n      speed: 3000\r\n    },\r\n\r\n    thumbs: {\r\n      autoStart: false, // Display thumbnails on opening\r\n      hideOnClose: true, // Hide thumbnail grid when closing animation starts\r\n      parentEl: \".fancybox-container\", // Container is injected into this element\r\n      axis: \"y\" // Vertical (y) or horizontal (x) scrolling\r\n    },\r\n\r\n    // Use mousewheel to navigate gallery\r\n    // If 'auto' - enabled for images only\r\n    wheel: \"auto\",\r\n\r\n    // Callbacks\r\n    //==========\r\n\r\n    // See Documentation/API/Events for more information\r\n    // Example:\r\n    /*\r\n      afterShow: function( instance, current ) {\r\n        console.info( 'Clicked element:' );\r\n        console.info( current.opts.$orig );\r\n      }\r\n    */\r\n\r\n    onInit: $.noop, // When instance has been initialized\r\n\r\n    beforeLoad: $.noop, // Before the content of a slide is being loaded\r\n    afterLoad: $.noop, // When the content of a slide is done loading\r\n\r\n    beforeShow: $.noop, // Before open animation starts\r\n    afterShow: $.noop, // When content is done loading and animating\r\n\r\n    beforeClose: $.noop, // Before the instance attempts to close. Return false to cancel the close.\r\n    afterClose: $.noop, // After instance has been closed\r\n\r\n    onActivate: $.noop, // When instance is brought to front\r\n    onDeactivate: $.noop, // When other instance has been activated\r\n\r\n    // Interaction\r\n    // ===========\r\n\r\n    // Use options below to customize taken action when user clicks or double clicks on the fancyBox area,\r\n    // each option can be string or method that returns value.\r\n    //\r\n    // Possible values:\r\n    //   \"close\"           - close instance\r\n    //   \"next\"            - move to next gallery item\r\n    //   \"nextOrClose\"     - move to next gallery item or close if gallery has only one item\r\n    //   \"toggleControls\"  - show/hide controls\r\n    //   \"zoom\"            - zoom image (if loaded)\r\n    //   false             - do nothing\r\n\r\n    // Clicked on the content\r\n    clickContent: function(current, event) {\r\n      return current.type === \"image\" ? \"zoom\" : false;\r\n    },\r\n\r\n    // Clicked on the slide\r\n    clickSlide: \"close\",\r\n\r\n    // Clicked on the background (backdrop) element;\r\n    // if you have not changed the layout, then most likely you need to use `clickSlide` option\r\n    clickOutside: \"close\",\r\n\r\n    // Same as previous two, but for double click\r\n    dblclickContent: false,\r\n    dblclickSlide: false,\r\n    dblclickOutside: false,\r\n\r\n    // Custom options when mobile device is detected\r\n    // =============================================\r\n\r\n    mobile: {\r\n      preventCaptionOverlap: false,\r\n      idleTime: false,\r\n      clickContent: function(current, event) {\r\n        return current.type === \"image\" ? \"toggleControls\" : false;\r\n      },\r\n      clickSlide: function(current, event) {\r\n        return current.type === \"image\" ? \"toggleControls\" : \"close\";\r\n      },\r\n      dblclickContent: function(current, event) {\r\n        return current.type === \"image\" ? \"zoom\" : false;\r\n      },\r\n      dblclickSlide: function(current, event) {\r\n        return current.type === \"image\" ? \"zoom\" : false;\r\n      }\r\n    },\r\n\r\n    // Internationalization\r\n    // ====================\r\n\r\n    lang: \"en\",\r\n    i18n: {\r\n      en: {\r\n        CLOSE: \"Close\",\r\n        NEXT: \"Next\",\r\n        PREV: \"Previous\",\r\n        ERROR: \"The requested content cannot be loaded. <br/> Please try again later.\",\r\n        PLAY_START: \"Start slideshow\",\r\n        PLAY_STOP: \"Pause slideshow\",\r\n        FULL_SCREEN: \"Full screen\",\r\n        THUMBS: \"Thumbnails\",\r\n        DOWNLOAD: \"Download\",\r\n        SHARE: \"Share\",\r\n        ZOOM: \"Zoom\"\r\n      },\r\n      de: {\r\n        CLOSE: \"Schliessen\",\r\n        NEXT: \"Weiter\",\r\n        PREV: \"Zurück\",\r\n        ERROR: \"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es später nochmal.\",\r\n        PLAY_START: \"Diaschau starten\",\r\n        PLAY_STOP: \"Diaschau beenden\",\r\n        FULL_SCREEN: \"Vollbild\",\r\n        THUMBS: \"Vorschaubilder\",\r\n        DOWNLOAD: \"Herunterladen\",\r\n        SHARE: \"Teilen\",\r\n        ZOOM: \"Maßstab\"\r\n      }\r\n    }\r\n  };\r\n\r\n  // Few useful variables and methods\r\n  // ================================\r\n\r\n  var $W = $(window);\r\n  var $D = $(document);\r\n\r\n  var called = 0;\r\n\r\n  // Check if an object is a jQuery object and not a native JavaScript object\r\n  // ========================================================================\r\n  var isQuery = function(obj) {\r\n    return obj && obj.hasOwnProperty && obj instanceof $;\r\n  };\r\n\r\n  // Handle multiple browsers for \"requestAnimationFrame\" and \"cancelAnimationFrame\"\r\n  // ===============================================================================\r\n  var requestAFrame = (function() {\r\n    return (\r\n      window.requestAnimationFrame ||\r\n      window.webkitRequestAnimationFrame ||\r\n      window.mozRequestAnimationFrame ||\r\n      window.oRequestAnimationFrame ||\r\n      // if all else fails, use setTimeout\r\n      function(callback) {\r\n        return window.setTimeout(callback, 1000 / 60);\r\n      }\r\n    );\r\n  })();\r\n\r\n  var cancelAFrame = (function() {\r\n    return (\r\n      window.cancelAnimationFrame ||\r\n      window.webkitCancelAnimationFrame ||\r\n      window.mozCancelAnimationFrame ||\r\n      window.oCancelAnimationFrame ||\r\n      function(id) {\r\n        window.clearTimeout(id);\r\n      }\r\n    );\r\n  })();\r\n\r\n  // Detect the supported transition-end event property name\r\n  // =======================================================\r\n  var transitionEnd = (function() {\r\n    var el = document.createElement(\"fakeelement\"),\r\n      t;\r\n\r\n    var transitions = {\r\n      transition: \"transitionend\",\r\n      OTransition: \"oTransitionEnd\",\r\n      MozTransition: \"transitionend\",\r\n      WebkitTransition: \"webkitTransitionEnd\"\r\n    };\r\n\r\n    for (t in transitions) {\r\n      if (el.style[t] !== undefined) {\r\n        return transitions[t];\r\n      }\r\n    }\r\n\r\n    return \"transitionend\";\r\n  })();\r\n\r\n  // Force redraw on an element.\r\n  // This helps in cases where the browser doesn't redraw an updated element properly\r\n  // ================================================================================\r\n  var forceRedraw = function($el) {\r\n    return $el && $el.length && $el[0].offsetHeight;\r\n  };\r\n\r\n  // Exclude array (`buttons`) options from deep merging\r\n  // ===================================================\r\n  var mergeOpts = function(opts1, opts2) {\r\n    var rez = $.extend(true, {}, opts1, opts2);\r\n\r\n    $.each(opts2, function(key, value) {\r\n      if ($.isArray(value)) {\r\n        rez[key] = value;\r\n      }\r\n    });\r\n\r\n    return rez;\r\n  };\r\n\r\n  // How much of an element is visible in viewport\r\n  // =============================================\r\n\r\n  var inViewport = function(elem) {\r\n    var elemCenter, rez;\r\n\r\n    if (!elem || elem.ownerDocument !== document) {\r\n      return false;\r\n    }\r\n\r\n    $(\".fancybox-container\").css(\"pointer-events\", \"none\");\r\n\r\n    elemCenter = {\r\n      x: elem.getBoundingClientRect().left + elem.offsetWidth / 2,\r\n      y: elem.getBoundingClientRect().top + elem.offsetHeight / 2\r\n    };\r\n\r\n    rez = document.elementFromPoint(elemCenter.x, elemCenter.y) === elem;\r\n\r\n    $(\".fancybox-container\").css(\"pointer-events\", \"\");\r\n\r\n    return rez;\r\n  };\r\n\r\n  // Class definition\r\n  // ================\r\n\r\n  var FancyBox = function(content, opts, index) {\r\n    var self = this;\r\n\r\n    self.opts = mergeOpts({index: index}, $.fancybox.defaults);\r\n\r\n    if ($.isPlainObject(opts)) {\r\n      self.opts = mergeOpts(self.opts, opts);\r\n    }\r\n\r\n    if ($.fancybox.isMobile) {\r\n      self.opts = mergeOpts(self.opts, self.opts.mobile);\r\n    }\r\n\r\n    self.id = self.opts.id || ++called;\r\n\r\n    self.currIndex = parseInt(self.opts.index, 10) || 0;\r\n    self.prevIndex = null;\r\n\r\n    self.prevPos = null;\r\n    self.currPos = 0;\r\n\r\n    self.firstRun = true;\r\n\r\n    // All group items\r\n    self.group = [];\r\n\r\n    // Existing slides (for current, next and previous gallery items)\r\n    self.slides = {};\r\n\r\n    // Create group elements\r\n    self.addContent(content);\r\n\r\n    if (!self.group.length) {\r\n      return;\r\n    }\r\n\r\n    self.init();\r\n  };\r\n\r\n  $.extend(FancyBox.prototype, {\r\n    // Create DOM structure\r\n    // ====================\r\n\r\n    init: function() {\r\n      var self = this,\r\n        firstItem = self.group[self.currIndex],\r\n        firstItemOpts = firstItem.opts,\r\n        $container,\r\n        buttonStr;\r\n\r\n      if (firstItemOpts.closeExisting) {\r\n        $.fancybox.close(true);\r\n      }\r\n\r\n      // Hide scrollbars\r\n      // ===============\r\n\r\n      $(\"body\").addClass(\"fancybox-active\");\r\n\r\n      if (\r\n        !$.fancybox.getInstance() &&\r\n        firstItemOpts.hideScrollbar !== false &&\r\n        !$.fancybox.isMobile &&\r\n        document.body.scrollHeight > window.innerHeight\r\n      ) {\r\n        $(\"head\").append(\r\n          '<style id=\"fancybox-style-noscroll\" type=\"text/css\">.compensate-for-scrollbar{margin-right:' +\r\n            (window.innerWidth - document.documentElement.clientWidth) +\r\n            \"px;}</style>\"\r\n        );\r\n\r\n        $(\"body\").addClass(\"compensate-for-scrollbar\");\r\n      }\r\n\r\n      // Build html markup and set references\r\n      // ====================================\r\n\r\n      // Build html code for buttons and insert into main template\r\n      buttonStr = \"\";\r\n\r\n      $.each(firstItemOpts.buttons, function(index, value) {\r\n        buttonStr += firstItemOpts.btnTpl[value] || \"\";\r\n      });\r\n\r\n      // Create markup from base template, it will be initially hidden to\r\n      // avoid unnecessary work like painting while initializing is not complete\r\n      $container = $(\r\n        self.translate(\r\n          self,\r\n          firstItemOpts.baseTpl\r\n            .replace(\"{{buttons}}\", buttonStr)\r\n            .replace(\"{{arrows}}\", firstItemOpts.btnTpl.arrowLeft + firstItemOpts.btnTpl.arrowRight)\r\n        )\r\n      )\r\n        .attr(\"id\", \"fancybox-container-\" + self.id)\r\n        .addClass(firstItemOpts.baseClass)\r\n        .data(\"FancyBox\", self)\r\n        .appendTo(firstItemOpts.parentEl);\r\n\r\n      // Create object holding references to jQuery wrapped nodes\r\n      self.$refs = {\r\n        container: $container\r\n      };\r\n\r\n      [\"bg\", \"inner\", \"infobar\", \"toolbar\", \"stage\", \"caption\", \"navigation\"].forEach(function(item) {\r\n        self.$refs[item] = $container.find(\".fancybox-\" + item);\r\n      });\r\n\r\n      self.trigger(\"onInit\");\r\n\r\n      // Enable events, deactive previous instances\r\n      self.activate();\r\n\r\n      // Build slides, load and reveal content\r\n      self.jumpTo(self.currIndex);\r\n    },\r\n\r\n    // Simple i18n support - replaces object keys found in template\r\n    // with corresponding values\r\n    // ============================================================\r\n\r\n    translate: function(obj, str) {\r\n      var arr = obj.opts.i18n[obj.opts.lang] || obj.opts.i18n.en;\r\n\r\n      return str.replace(/\\{\\{(\\w+)\\}\\}/g, function(match, n) {\r\n        var value = arr[n];\r\n\r\n        if (value === undefined) {\r\n          return match;\r\n        }\r\n\r\n        return value;\r\n      });\r\n    },\r\n\r\n    // Populate current group with fresh content\r\n    // Check if each object has valid type and content\r\n    // ===============================================\r\n\r\n    addContent: function(content) {\r\n      var self = this,\r\n        items = $.makeArray(content),\r\n        thumbs;\r\n\r\n      $.each(items, function(i, item) {\r\n        var obj = {},\r\n          opts = {},\r\n          $item,\r\n          type,\r\n          found,\r\n          src,\r\n          srcParts;\r\n\r\n        // Step 1 - Make sure we have an object\r\n        // ====================================\r\n\r\n        if ($.isPlainObject(item)) {\r\n          // We probably have manual usage here, something like\r\n          // $.fancybox.open( [ { src : \"image.jpg\", type : \"image\" } ] )\r\n\r\n          obj = item;\r\n          opts = item.opts || item;\r\n        } else if ($.type(item) === \"object\" && $(item).length) {\r\n          // Here we probably have jQuery collection returned by some selector\r\n          $item = $(item);\r\n\r\n          // Support attributes like `data-options='{\"touch\" : false}'` and `data-touch='false'`\r\n          opts = $item.data() || {};\r\n          opts = $.extend(true, {}, opts, opts.options);\r\n\r\n          // Here we store clicked element\r\n          opts.$orig = $item;\r\n\r\n          obj.src = self.opts.src || opts.src || $item.attr(\"href\");\r\n\r\n          // Assume that simple syntax is used, for example:\r\n          //   `$.fancybox.open( $(\"#test\"), {} );`\r\n          if (!obj.type && !obj.src) {\r\n            obj.type = \"inline\";\r\n            obj.src = item;\r\n          }\r\n        } else {\r\n          // Assume we have a simple html code, for example:\r\n          //   $.fancybox.open( '<div><h1>Hi!</h1></div>' );\r\n          obj = {\r\n            type: \"html\",\r\n            src: item + \"\"\r\n          };\r\n        }\r\n\r\n        // Each gallery object has full collection of options\r\n        obj.opts = $.extend(true, {}, self.opts, opts);\r\n\r\n        // Do not merge buttons array\r\n        if ($.isArray(opts.buttons)) {\r\n          obj.opts.buttons = opts.buttons;\r\n        }\r\n\r\n        if ($.fancybox.isMobile && obj.opts.mobile) {\r\n          obj.opts = mergeOpts(obj.opts, obj.opts.mobile);\r\n        }\r\n\r\n        // Step 2 - Make sure we have content type, if not - try to guess\r\n        // ==============================================================\r\n\r\n        type = obj.type || obj.opts.type;\r\n        src = obj.src || \"\";\r\n\r\n        if (!type && src) {\r\n          if ((found = src.match(/\\.(mp4|mov|ogv|webm)((\\?|#).*)?$/i))) {\r\n            type = \"video\";\r\n\r\n            if (!obj.opts.video.format) {\r\n              obj.opts.video.format = \"video/\" + (found[1] === \"ogv\" ? \"ogg\" : found[1]);\r\n            }\r\n          } else if (src.match(/(^data:image\\/[a-z0-9+\\/=]*,)|(\\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\\?|#).*)?$)/i)) {\r\n            type = \"image\";\r\n          } else if (src.match(/\\.(pdf)((\\?|#).*)?$/i)) {\r\n            type = \"iframe\";\r\n            obj = $.extend(true, obj, {contentType: \"pdf\", opts: {iframe: {preload: false}}});\r\n          } else if (src.charAt(0) === \"#\") {\r\n            type = \"inline\";\r\n          }\r\n        }\r\n\r\n        if (type) {\r\n          obj.type = type;\r\n        } else {\r\n          self.trigger(\"objectNeedsType\", obj);\r\n        }\r\n\r\n        if (!obj.contentType) {\r\n          obj.contentType = $.inArray(obj.type, [\"html\", \"inline\", \"ajax\"]) > -1 ? \"html\" : obj.type;\r\n        }\r\n\r\n        // Step 3 - Some adjustments\r\n        // =========================\r\n\r\n        obj.index = self.group.length;\r\n\r\n        if (obj.opts.smallBtn == \"auto\") {\r\n          obj.opts.smallBtn = $.inArray(obj.type, [\"html\", \"inline\", \"ajax\"]) > -1;\r\n        }\r\n\r\n        if (obj.opts.toolbar === \"auto\") {\r\n          obj.opts.toolbar = !obj.opts.smallBtn;\r\n        }\r\n\r\n        // Find thumbnail image, check if exists and if is in the viewport\r\n        obj.$thumb = obj.opts.$thumb || null;\r\n\r\n        if (obj.opts.$trigger && obj.index === self.opts.index) {\r\n          obj.$thumb = obj.opts.$trigger.find(\"img:first\");\r\n\r\n          if (obj.$thumb.length) {\r\n            obj.opts.$orig = obj.opts.$trigger;\r\n          }\r\n        }\r\n\r\n        if (!(obj.$thumb && obj.$thumb.length) && obj.opts.$orig) {\r\n          obj.$thumb = obj.opts.$orig.find(\"img:first\");\r\n        }\r\n\r\n        if (obj.$thumb && !obj.$thumb.length) {\r\n          obj.$thumb = null;\r\n        }\r\n\r\n        obj.thumb = obj.opts.thumb || (obj.$thumb ? obj.$thumb[0].src : null);\r\n\r\n        // \"caption\" is a \"special\" option, it can be used to customize caption per gallery item\r\n        if ($.type(obj.opts.caption) === \"function\") {\r\n          obj.opts.caption = obj.opts.caption.apply(item, [self, obj]);\r\n        }\r\n\r\n        if ($.type(self.opts.caption) === \"function\") {\r\n          obj.opts.caption = self.opts.caption.apply(item, [self, obj]);\r\n        }\r\n\r\n        // Make sure we have caption as a string or jQuery object\r\n        if (!(obj.opts.caption instanceof $)) {\r\n          obj.opts.caption = obj.opts.caption === undefined ? \"\" : obj.opts.caption + \"\";\r\n        }\r\n\r\n        // Check if url contains \"filter\" used to filter the content\r\n        // Example: \"ajax.html #something\"\r\n        if (obj.type === \"ajax\") {\r\n          srcParts = src.split(/\\s+/, 2);\r\n\r\n          if (srcParts.length > 1) {\r\n            obj.src = srcParts.shift();\r\n\r\n            obj.opts.filter = srcParts.shift();\r\n          }\r\n        }\r\n\r\n        // Hide all buttons and disable interactivity for modal items\r\n        if (obj.opts.modal) {\r\n          obj.opts = $.extend(true, obj.opts, {\r\n            trapFocus: true,\r\n            // Remove buttons\r\n            infobar: 0,\r\n            toolbar: 0,\r\n\r\n            smallBtn: 0,\r\n\r\n            // Disable keyboard navigation\r\n            keyboard: 0,\r\n\r\n            // Disable some modules\r\n            slideShow: 0,\r\n            fullScreen: 0,\r\n            thumbs: 0,\r\n            touch: 0,\r\n\r\n            // Disable click event handlers\r\n            clickContent: false,\r\n            clickSlide: false,\r\n            clickOutside: false,\r\n            dblclickContent: false,\r\n            dblclickSlide: false,\r\n            dblclickOutside: false\r\n          });\r\n        }\r\n\r\n        // Step 4 - Add processed object to group\r\n        // ======================================\r\n\r\n        self.group.push(obj);\r\n      });\r\n\r\n      // Update controls if gallery is already opened\r\n      if (Object.keys(self.slides).length) {\r\n        self.updateControls();\r\n\r\n        // Update thumbnails, if needed\r\n        thumbs = self.Thumbs;\r\n\r\n        if (thumbs && thumbs.isActive) {\r\n          thumbs.create();\r\n\r\n          thumbs.focus();\r\n        }\r\n      }\r\n    },\r\n\r\n    // Attach an event handler functions for:\r\n    //   - navigation buttons\r\n    //   - browser scrolling, resizing;\r\n    //   - focusing\r\n    //   - keyboard\r\n    //   - detecting inactivity\r\n    // ======================================\r\n\r\n    addEvents: function() {\r\n      var self = this;\r\n\r\n      self.removeEvents();\r\n\r\n      // Make navigation elements clickable\r\n      // ==================================\r\n\r\n      self.$refs.container\r\n        .on(\"click.fb-close\", \"[data-fancybox-close]\", function(e) {\r\n          e.stopPropagation();\r\n          e.preventDefault();\r\n\r\n          self.close(e);\r\n        })\r\n        .on(\"touchstart.fb-prev click.fb-prev\", \"[data-fancybox-prev]\", function(e) {\r\n          e.stopPropagation();\r\n          e.preventDefault();\r\n\r\n          self.previous();\r\n        })\r\n        .on(\"touchstart.fb-next click.fb-next\", \"[data-fancybox-next]\", function(e) {\r\n          e.stopPropagation();\r\n          e.preventDefault();\r\n\r\n          self.next();\r\n        })\r\n        .on(\"click.fb\", \"[data-fancybox-zoom]\", function(e) {\r\n          // Click handler for zoom button\r\n          self[self.isScaledDown() ? \"scaleToActual\" : \"scaleToFit\"]();\r\n        });\r\n\r\n      // Handle page scrolling and browser resizing\r\n      // ==========================================\r\n\r\n      $W.on(\"orientationchange.fb resize.fb\", function(e) {\r\n        if (e && e.originalEvent && e.originalEvent.type === \"resize\") {\r\n          if (self.requestId) {\r\n            cancelAFrame(self.requestId);\r\n          }\r\n\r\n          self.requestId = requestAFrame(function() {\r\n            self.update(e);\r\n          });\r\n        } else {\r\n          if (self.current && self.current.type === \"iframe\") {\r\n            self.$refs.stage.hide();\r\n          }\r\n\r\n          setTimeout(function() {\r\n            self.$refs.stage.show();\r\n\r\n            self.update(e);\r\n          }, $.fancybox.isMobile ? 600 : 250);\r\n        }\r\n      });\r\n\r\n      $D.on(\"keydown.fb\", function(e) {\r\n        var instance = $.fancybox ? $.fancybox.getInstance() : null,\r\n          current = instance.current,\r\n          keycode = e.keyCode || e.which;\r\n\r\n        // Trap keyboard focus inside of the modal\r\n        // =======================================\r\n\r\n        if (keycode == 9) {\r\n          if (current.opts.trapFocus) {\r\n            self.focus(e);\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        // Enable keyboard navigation\r\n        // ==========================\r\n\r\n        if (!current.opts.keyboard || e.ctrlKey || e.altKey || e.shiftKey || $(e.target).is(\"input\") || $(e.target).is(\"textarea\")) {\r\n          return;\r\n        }\r\n\r\n        // Backspace and Esc keys\r\n        if (keycode === 8 || keycode === 27) {\r\n          e.preventDefault();\r\n\r\n          self.close(e);\r\n\r\n          return;\r\n        }\r\n\r\n        // Left arrow and Up arrow\r\n        if (keycode === 37 || keycode === 38) {\r\n          e.preventDefault();\r\n\r\n          self.previous();\r\n\r\n          return;\r\n        }\r\n\r\n        // Righ arrow and Down arrow\r\n        if (keycode === 39 || keycode === 40) {\r\n          e.preventDefault();\r\n\r\n          self.next();\r\n\r\n          return;\r\n        }\r\n\r\n        self.trigger(\"afterKeydown\", e, keycode);\r\n      });\r\n\r\n      // Hide controls after some inactivity period\r\n      if (self.group[self.currIndex].opts.idleTime) {\r\n        self.idleSecondsCounter = 0;\r\n\r\n        $D.on(\r\n          \"mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle\",\r\n          function(e) {\r\n            self.idleSecondsCounter = 0;\r\n\r\n            if (self.isIdle) {\r\n              self.showControls();\r\n            }\r\n\r\n            self.isIdle = false;\r\n          }\r\n        );\r\n\r\n        self.idleInterval = window.setInterval(function() {\r\n          self.idleSecondsCounter++;\r\n\r\n          if (self.idleSecondsCounter >= self.group[self.currIndex].opts.idleTime && !self.isDragging) {\r\n            self.isIdle = true;\r\n            self.idleSecondsCounter = 0;\r\n\r\n            self.hideControls();\r\n          }\r\n        }, 1000);\r\n      }\r\n    },\r\n\r\n    // Remove events added by the core\r\n    // ===============================\r\n\r\n    removeEvents: function() {\r\n      var self = this;\r\n\r\n      $W.off(\"orientationchange.fb resize.fb\");\r\n      $D.off(\"keydown.fb .fb-idle\");\r\n\r\n      this.$refs.container.off(\".fb-close .fb-prev .fb-next\");\r\n\r\n      if (self.idleInterval) {\r\n        window.clearInterval(self.idleInterval);\r\n\r\n        self.idleInterval = null;\r\n      }\r\n    },\r\n\r\n    // Change to previous gallery item\r\n    // ===============================\r\n\r\n    previous: function(duration) {\r\n      return this.jumpTo(this.currPos - 1, duration);\r\n    },\r\n\r\n    // Change to next gallery item\r\n    // ===========================\r\n\r\n    next: function(duration) {\r\n      return this.jumpTo(this.currPos + 1, duration);\r\n    },\r\n\r\n    // Switch to selected gallery item\r\n    // ===============================\r\n\r\n    jumpTo: function(pos, duration) {\r\n      var self = this,\r\n        groupLen = self.group.length,\r\n        firstRun,\r\n        isMoved,\r\n        loop,\r\n        current,\r\n        previous,\r\n        slidePos,\r\n        stagePos,\r\n        prop,\r\n        diff;\r\n\r\n      if (self.isDragging || self.isClosing || (self.isAnimating && self.firstRun)) {\r\n        return;\r\n      }\r\n\r\n      // Should loop?\r\n      pos = parseInt(pos, 10);\r\n      loop = self.current ? self.current.opts.loop : self.opts.loop;\r\n\r\n      if (!loop && (pos < 0 || pos >= groupLen)) {\r\n        return false;\r\n      }\r\n\r\n      // Check if opening for the first time; this helps to speed things up\r\n      firstRun = self.firstRun = !Object.keys(self.slides).length;\r\n\r\n      // Create slides\r\n      previous = self.current;\r\n\r\n      self.prevIndex = self.currIndex;\r\n      self.prevPos = self.currPos;\r\n\r\n      current = self.createSlide(pos);\r\n\r\n      if (groupLen > 1) {\r\n        if (loop || current.index < groupLen - 1) {\r\n          self.createSlide(pos + 1);\r\n        }\r\n\r\n        if (loop || current.index > 0) {\r\n          self.createSlide(pos - 1);\r\n        }\r\n      }\r\n\r\n      self.current = current;\r\n      self.currIndex = current.index;\r\n      self.currPos = current.pos;\r\n\r\n      self.trigger(\"beforeShow\", firstRun);\r\n\r\n      self.updateControls();\r\n\r\n      // Validate duration length\r\n      current.forcedDuration = undefined;\r\n\r\n      if ($.isNumeric(duration)) {\r\n        current.forcedDuration = duration;\r\n      } else {\r\n        duration = current.opts[firstRun ? \"animationDuration\" : \"transitionDuration\"];\r\n      }\r\n\r\n      duration = parseInt(duration, 10);\r\n\r\n      // Check if user has swiped the slides or if still animating\r\n      isMoved = self.isMoved(current);\r\n\r\n      // Make sure current slide is visible\r\n      current.$slide.addClass(\"fancybox-slide--current\");\r\n\r\n      // Fresh start - reveal container, current slide and start loading content\r\n      if (firstRun) {\r\n        if (current.opts.animationEffect && duration) {\r\n          self.$refs.container.css(\"transition-duration\", duration + \"ms\");\r\n        }\r\n\r\n        self.$refs.container.addClass(\"fancybox-is-open\").trigger(\"focus\");\r\n\r\n        // Attempt to load content into slide\r\n        // This will later call `afterLoad` -> `revealContent`\r\n        self.loadSlide(current);\r\n\r\n        self.preload(\"image\");\r\n\r\n        return;\r\n      }\r\n\r\n      // Get actual slide/stage positions (before cleaning up)\r\n      slidePos = $.fancybox.getTranslate(previous.$slide);\r\n      stagePos = $.fancybox.getTranslate(self.$refs.stage);\r\n\r\n      // Clean up all slides\r\n      $.each(self.slides, function(index, slide) {\r\n        $.fancybox.stop(slide.$slide, true);\r\n      });\r\n\r\n      if (previous.pos !== current.pos) {\r\n        previous.isComplete = false;\r\n      }\r\n\r\n      previous.$slide.removeClass(\"fancybox-slide--complete fancybox-slide--current\");\r\n\r\n      // If slides are out of place, then animate them to correct position\r\n      if (isMoved) {\r\n        // Calculate horizontal swipe distance\r\n        diff = slidePos.left - (previous.pos * slidePos.width + previous.pos * previous.opts.gutter);\r\n\r\n        $.each(self.slides, function(index, slide) {\r\n          slide.$slide.removeClass(\"fancybox-animated\").removeClass(function(index, className) {\r\n            return (className.match(/(^|\\s)fancybox-fx-\\S+/g) || []).join(\" \");\r\n          });\r\n\r\n          // Make sure that each slide is in equal distance\r\n          // This is mostly needed for freshly added slides, because they are not yet positioned\r\n          var leftPos = slide.pos * slidePos.width + slide.pos * slide.opts.gutter;\r\n\r\n          $.fancybox.setTranslate(slide.$slide, {top: 0, left: leftPos - stagePos.left + diff});\r\n\r\n          if (slide.pos !== current.pos) {\r\n            slide.$slide.addClass(\"fancybox-slide--\" + (slide.pos > current.pos ? \"next\" : \"previous\"));\r\n          }\r\n\r\n          // Redraw to make sure that transition will start\r\n          forceRedraw(slide.$slide);\r\n\r\n          // Animate the slide\r\n          $.fancybox.animate(\r\n            slide.$slide,\r\n            {\r\n              top: 0,\r\n              left: (slide.pos - current.pos) * slidePos.width + (slide.pos - current.pos) * slide.opts.gutter\r\n            },\r\n            duration,\r\n            function() {\r\n              slide.$slide\r\n                .css({\r\n                  transform: \"\",\r\n                  opacity: \"\"\r\n                })\r\n                .removeClass(\"fancybox-slide--next fancybox-slide--previous\");\r\n\r\n              if (slide.pos === self.currPos) {\r\n                self.complete();\r\n              }\r\n            }\r\n          );\r\n        });\r\n      } else if (duration && current.opts.transitionEffect) {\r\n        // Set transition effect for previously active slide\r\n        prop = \"fancybox-animated fancybox-fx-\" + current.opts.transitionEffect;\r\n\r\n        previous.$slide.addClass(\"fancybox-slide--\" + (previous.pos > current.pos ? \"next\" : \"previous\"));\r\n\r\n        $.fancybox.animate(\r\n          previous.$slide,\r\n          prop,\r\n          duration,\r\n          function() {\r\n            previous.$slide.removeClass(prop).removeClass(\"fancybox-slide--next fancybox-slide--previous\");\r\n          },\r\n          false\r\n        );\r\n      }\r\n\r\n      if (current.isLoaded) {\r\n        self.revealContent(current);\r\n      } else {\r\n        self.loadSlide(current);\r\n      }\r\n\r\n      self.preload(\"image\");\r\n    },\r\n\r\n    // Create new \"slide\" element\r\n    // These are gallery items  that are actually added to DOM\r\n    // =======================================================\r\n\r\n    createSlide: function(pos) {\r\n      var self = this,\r\n        $slide,\r\n        index;\r\n\r\n      index = pos % self.group.length;\r\n      index = index < 0 ? self.group.length + index : index;\r\n\r\n      if (!self.slides[pos] && self.group[index]) {\r\n        $slide = $('<div class=\"fancybox-slide\"></div>').appendTo(self.$refs.stage);\r\n\r\n        self.slides[pos] = $.extend(true, {}, self.group[index], {\r\n          pos: pos,\r\n          $slide: $slide,\r\n          isLoaded: false\r\n        });\r\n\r\n        self.updateSlide(self.slides[pos]);\r\n      }\r\n\r\n      return self.slides[pos];\r\n    },\r\n\r\n    // Scale image to the actual size of the image;\r\n    // x and y values should be relative to the slide\r\n    // ==============================================\r\n\r\n    scaleToActual: function(x, y, duration) {\r\n      var self = this,\r\n        current = self.current,\r\n        $content = current.$content,\r\n        canvasWidth = $.fancybox.getTranslate(current.$slide).width,\r\n        canvasHeight = $.fancybox.getTranslate(current.$slide).height,\r\n        newImgWidth = current.width,\r\n        newImgHeight = current.height,\r\n        imgPos,\r\n        posX,\r\n        posY,\r\n        scaleX,\r\n        scaleY;\r\n\r\n      if (self.isAnimating || self.isMoved() || !$content || !(current.type == \"image\" && current.isLoaded && !current.hasError)) {\r\n        return;\r\n      }\r\n\r\n      self.isAnimating = true;\r\n\r\n      $.fancybox.stop($content);\r\n\r\n      x = x === undefined ? canvasWidth * 0.5 : x;\r\n      y = y === undefined ? canvasHeight * 0.5 : y;\r\n\r\n      imgPos = $.fancybox.getTranslate($content);\r\n\r\n      imgPos.top -= $.fancybox.getTranslate(current.$slide).top;\r\n      imgPos.left -= $.fancybox.getTranslate(current.$slide).left;\r\n\r\n      scaleX = newImgWidth / imgPos.width;\r\n      scaleY = newImgHeight / imgPos.height;\r\n\r\n      // Get center position for original image\r\n      posX = canvasWidth * 0.5 - newImgWidth * 0.5;\r\n      posY = canvasHeight * 0.5 - newImgHeight * 0.5;\r\n\r\n      // Make sure image does not move away from edges\r\n      if (newImgWidth > canvasWidth) {\r\n        posX = imgPos.left * scaleX - (x * scaleX - x);\r\n\r\n        if (posX > 0) {\r\n          posX = 0;\r\n        }\r\n\r\n        if (posX < canvasWidth - newImgWidth) {\r\n          posX = canvasWidth - newImgWidth;\r\n        }\r\n      }\r\n\r\n      if (newImgHeight > canvasHeight) {\r\n        posY = imgPos.top * scaleY - (y * scaleY - y);\r\n\r\n        if (posY > 0) {\r\n          posY = 0;\r\n        }\r\n\r\n        if (posY < canvasHeight - newImgHeight) {\r\n          posY = canvasHeight - newImgHeight;\r\n        }\r\n      }\r\n\r\n      self.updateCursor(newImgWidth, newImgHeight);\r\n\r\n      $.fancybox.animate(\r\n        $content,\r\n        {\r\n          top: posY,\r\n          left: posX,\r\n          scaleX: scaleX,\r\n          scaleY: scaleY\r\n        },\r\n        duration || 330,\r\n        function() {\r\n          self.isAnimating = false;\r\n        }\r\n      );\r\n\r\n      // Stop slideshow\r\n      if (self.SlideShow && self.SlideShow.isActive) {\r\n        self.SlideShow.stop();\r\n      }\r\n    },\r\n\r\n    // Scale image to fit inside parent element\r\n    // ========================================\r\n\r\n    scaleToFit: function(duration) {\r\n      var self = this,\r\n        current = self.current,\r\n        $content = current.$content,\r\n        end;\r\n\r\n      if (self.isAnimating || self.isMoved() || !$content || !(current.type == \"image\" && current.isLoaded && !current.hasError)) {\r\n        return;\r\n      }\r\n\r\n      self.isAnimating = true;\r\n\r\n      $.fancybox.stop($content);\r\n\r\n      end = self.getFitPos(current);\r\n\r\n      self.updateCursor(end.width, end.height);\r\n\r\n      $.fancybox.animate(\r\n        $content,\r\n        {\r\n          top: end.top,\r\n          left: end.left,\r\n          scaleX: end.width / $content.width(),\r\n          scaleY: end.height / $content.height()\r\n        },\r\n        duration || 330,\r\n        function() {\r\n          self.isAnimating = false;\r\n        }\r\n      );\r\n    },\r\n\r\n    // Calculate image size to fit inside viewport\r\n    // ===========================================\r\n\r\n    getFitPos: function(slide) {\r\n      var self = this,\r\n        $content = slide.$content,\r\n        $slide = slide.$slide,\r\n        width = slide.width || slide.opts.width,\r\n        height = slide.height || slide.opts.height,\r\n        maxWidth,\r\n        maxHeight,\r\n        minRatio,\r\n        aspectRatio,\r\n        rez = {};\r\n\r\n      if (!slide.isLoaded || !$content || !$content.length) {\r\n        return false;\r\n      }\r\n\r\n      maxWidth = $.fancybox.getTranslate(self.$refs.stage).width;\r\n      maxHeight = $.fancybox.getTranslate(self.$refs.stage).height;\r\n\r\n      maxWidth -=\r\n        parseFloat($slide.css(\"paddingLeft\")) +\r\n        parseFloat($slide.css(\"paddingRight\")) +\r\n        parseFloat($content.css(\"marginLeft\")) +\r\n        parseFloat($content.css(\"marginRight\"));\r\n\r\n      maxHeight -=\r\n        parseFloat($slide.css(\"paddingTop\")) +\r\n        parseFloat($slide.css(\"paddingBottom\")) +\r\n        parseFloat($content.css(\"marginTop\")) +\r\n        parseFloat($content.css(\"marginBottom\"));\r\n\r\n      if (!width || !height) {\r\n        width = maxWidth;\r\n        height = maxHeight;\r\n      }\r\n\r\n      minRatio = Math.min(1, maxWidth / width, maxHeight / height);\r\n\r\n      width = minRatio * width;\r\n      height = minRatio * height;\r\n\r\n      // Adjust width/height to precisely fit into container\r\n      if (width > maxWidth - 0.5) {\r\n        width = maxWidth;\r\n      }\r\n\r\n      if (height > maxHeight - 0.5) {\r\n        height = maxHeight;\r\n      }\r\n\r\n      if (slide.type === \"image\") {\r\n        rez.top = Math.floor((maxHeight - height) * 0.5) + parseFloat($slide.css(\"paddingTop\"));\r\n        rez.left = Math.floor((maxWidth - width) * 0.5) + parseFloat($slide.css(\"paddingLeft\"));\r\n      } else if (slide.contentType === \"video\") {\r\n        // Force aspect ratio for the video\r\n        // \"I say the whole world must learn of our peaceful ways… by force!\"\r\n        aspectRatio = slide.opts.width && slide.opts.height ? width / height : slide.opts.ratio || 16 / 9;\r\n\r\n        if (height > width / aspectRatio) {\r\n          height = width / aspectRatio;\r\n        } else if (width > height * aspectRatio) {\r\n          width = height * aspectRatio;\r\n        }\r\n      }\r\n\r\n      rez.width = width;\r\n      rez.height = height;\r\n\r\n      return rez;\r\n    },\r\n\r\n    // Update content size and position for all slides\r\n    // ==============================================\r\n\r\n    update: function(e) {\r\n      var self = this;\r\n\r\n      $.each(self.slides, function(key, slide) {\r\n        self.updateSlide(slide, e);\r\n      });\r\n    },\r\n\r\n    // Update slide content position and size\r\n    // ======================================\r\n\r\n    updateSlide: function(slide, e) {\r\n      var self = this,\r\n        $content = slide && slide.$content,\r\n        width = slide.width || slide.opts.width,\r\n        height = slide.height || slide.opts.height,\r\n        $slide = slide.$slide;\r\n\r\n      // First, prevent caption overlap, if needed\r\n      self.adjustCaption(slide);\r\n\r\n      // Then resize content to fit inside the slide\r\n      if ($content && (width || height || slide.contentType === \"video\") && !slide.hasError) {\r\n        $.fancybox.stop($content);\r\n\r\n        $.fancybox.setTranslate($content, self.getFitPos(slide));\r\n\r\n        if (slide.pos === self.currPos) {\r\n          self.isAnimating = false;\r\n\r\n          self.updateCursor();\r\n        }\r\n      }\r\n\r\n      // Then some adjustments\r\n      self.adjustLayout(slide);\r\n\r\n      if ($slide.length) {\r\n        $slide.trigger(\"refresh\");\r\n\r\n        if (slide.pos === self.currPos) {\r\n          self.$refs.toolbar\r\n            .add(self.$refs.navigation.find(\".fancybox-button--arrow_right\"))\r\n            .toggleClass(\"compensate-for-scrollbar\", $slide.get(0).scrollHeight > $slide.get(0).clientHeight);\r\n        }\r\n      }\r\n\r\n      self.trigger(\"onUpdate\", slide, e);\r\n    },\r\n\r\n    // Horizontally center slide\r\n    // =========================\r\n\r\n    centerSlide: function(duration) {\r\n      var self = this,\r\n        current = self.current,\r\n        $slide = current.$slide;\r\n\r\n      if (self.isClosing || !current) {\r\n        return;\r\n      }\r\n\r\n      $slide.siblings().css({\r\n        transform: \"\",\r\n        opacity: \"\"\r\n      });\r\n\r\n      $slide\r\n        .parent()\r\n        .children()\r\n        .removeClass(\"fancybox-slide--previous fancybox-slide--next\");\r\n\r\n      $.fancybox.animate(\r\n        $slide,\r\n        {\r\n          top: 0,\r\n          left: 0,\r\n          opacity: 1\r\n        },\r\n        duration === undefined ? 0 : duration,\r\n        function() {\r\n          // Clean up\r\n          $slide.css({\r\n            transform: \"\",\r\n            opacity: \"\"\r\n          });\r\n\r\n          if (!current.isComplete) {\r\n            self.complete();\r\n          }\r\n        },\r\n        false\r\n      );\r\n    },\r\n\r\n    // Check if current slide is moved (swiped)\r\n    // ========================================\r\n\r\n    isMoved: function(slide) {\r\n      var current = slide || this.current,\r\n        slidePos,\r\n        stagePos;\r\n\r\n      if (!current) {\r\n        return false;\r\n      }\r\n\r\n      stagePos = $.fancybox.getTranslate(this.$refs.stage);\r\n      slidePos = $.fancybox.getTranslate(current.$slide);\r\n\r\n      return (\r\n        !current.$slide.hasClass(\"fancybox-animated\") &&\r\n        (Math.abs(slidePos.top - stagePos.top) > 0.5 || Math.abs(slidePos.left - stagePos.left) > 0.5)\r\n      );\r\n    },\r\n\r\n    // Update cursor style depending if content can be zoomed\r\n    // ======================================================\r\n\r\n    updateCursor: function(nextWidth, nextHeight) {\r\n      var self = this,\r\n        current = self.current,\r\n        $container = self.$refs.container,\r\n        canPan,\r\n        isZoomable;\r\n\r\n      if (!current || self.isClosing || !self.Guestures) {\r\n        return;\r\n      }\r\n\r\n      $container.removeClass(\"fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan\");\r\n\r\n      canPan = self.canPan(nextWidth, nextHeight);\r\n\r\n      isZoomable = canPan ? true : self.isZoomable();\r\n\r\n      $container.toggleClass(\"fancybox-is-zoomable\", isZoomable);\r\n\r\n      $(\"[data-fancybox-zoom]\").prop(\"disabled\", !isZoomable);\r\n\r\n      if (canPan) {\r\n        $container.addClass(\"fancybox-can-pan\");\r\n      } else if (\r\n        isZoomable &&\r\n        (current.opts.clickContent === \"zoom\" || ($.isFunction(current.opts.clickContent) && current.opts.clickContent(current) == \"zoom\"))\r\n      ) {\r\n        $container.addClass(\"fancybox-can-zoomIn\");\r\n      } else if (current.opts.touch && (current.opts.touch.vertical || self.group.length > 1) && current.contentType !== \"video\") {\r\n        $container.addClass(\"fancybox-can-swipe\");\r\n      }\r\n    },\r\n\r\n    // Check if current slide is zoomable\r\n    // ==================================\r\n\r\n    isZoomable: function() {\r\n      var self = this,\r\n        current = self.current,\r\n        fitPos;\r\n\r\n      // Assume that slide is zoomable if:\r\n      //   - image is still loading\r\n      //   - actual size of the image is smaller than available area\r\n      if (current && !self.isClosing && current.type === \"image\" && !current.hasError) {\r\n        if (!current.isLoaded) {\r\n          return true;\r\n        }\r\n\r\n        fitPos = self.getFitPos(current);\r\n\r\n        if (fitPos && (current.width > fitPos.width || current.height > fitPos.height)) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    },\r\n\r\n    // Check if current image dimensions are smaller than actual\r\n    // =========================================================\r\n\r\n    isScaledDown: function(nextWidth, nextHeight) {\r\n      var self = this,\r\n        rez = false,\r\n        current = self.current,\r\n        $content = current.$content;\r\n\r\n      if (nextWidth !== undefined && nextHeight !== undefined) {\r\n        rez = nextWidth < current.width && nextHeight < current.height;\r\n      } else if ($content) {\r\n        rez = $.fancybox.getTranslate($content);\r\n        rez = rez.width < current.width && rez.height < current.height;\r\n      }\r\n\r\n      return rez;\r\n    },\r\n\r\n    // Check if image dimensions exceed parent element\r\n    // ===============================================\r\n\r\n    canPan: function(nextWidth, nextHeight) {\r\n      var self = this,\r\n        current = self.current,\r\n        pos = null,\r\n        rez = false;\r\n\r\n      if (current.type === \"image\" && (current.isComplete || (nextWidth && nextHeight)) && !current.hasError) {\r\n        rez = self.getFitPos(current);\r\n\r\n        if (nextWidth !== undefined && nextHeight !== undefined) {\r\n          pos = {width: nextWidth, height: nextHeight};\r\n        } else if (current.isComplete) {\r\n          pos = $.fancybox.getTranslate(current.$content);\r\n        }\r\n\r\n        if (pos && rez) {\r\n          rez = Math.abs(pos.width - rez.width) > 1.5 || Math.abs(pos.height - rez.height) > 1.5;\r\n        }\r\n      }\r\n\r\n      return rez;\r\n    },\r\n\r\n    // Load content into the slide\r\n    // ===========================\r\n\r\n    loadSlide: function(slide) {\r\n      var self = this,\r\n        type,\r\n        $slide,\r\n        ajaxLoad;\r\n\r\n      if (slide.isLoading || slide.isLoaded) {\r\n        return;\r\n      }\r\n\r\n      slide.isLoading = true;\r\n\r\n      if (self.trigger(\"beforeLoad\", slide) === false) {\r\n        slide.isLoading = false;\r\n\r\n        return false;\r\n      }\r\n\r\n      type = slide.type;\r\n      $slide = slide.$slide;\r\n\r\n      $slide\r\n        .off(\"refresh\")\r\n        .trigger(\"onReset\")\r\n        .addClass(slide.opts.slideClass);\r\n\r\n      // Create content depending on the type\r\n      switch (type) {\r\n        case \"image\":\r\n          self.setImage(slide);\r\n\r\n          break;\r\n\r\n        case \"iframe\":\r\n          self.setIframe(slide);\r\n\r\n          break;\r\n\r\n        case \"html\":\r\n          self.setContent(slide, slide.src || slide.content);\r\n\r\n          break;\r\n\r\n        case \"video\":\r\n          self.setContent(\r\n            slide,\r\n            slide.opts.video.tpl\r\n              .replace(/\\{\\{src\\}\\}/gi, slide.src)\r\n              .replace(\"{{format}}\", slide.opts.videoFormat || slide.opts.video.format || \"\")\r\n              .replace(\"{{poster}}\", slide.thumb || \"\")\r\n          );\r\n\r\n          break;\r\n\r\n        case \"inline\":\r\n          if ($(slide.src).length) {\r\n            self.setContent(slide, $(slide.src));\r\n          } else {\r\n            self.setError(slide);\r\n          }\r\n\r\n          break;\r\n\r\n        case \"ajax\":\r\n          self.showLoading(slide);\r\n\r\n          ajaxLoad = $.ajax(\r\n            $.extend({}, slide.opts.ajax.settings, {\r\n              url: slide.src,\r\n              success: function(data, textStatus) {\r\n                if (textStatus === \"success\") {\r\n                  self.setContent(slide, data);\r\n                }\r\n              },\r\n              error: function(jqXHR, textStatus) {\r\n                if (jqXHR && textStatus !== \"abort\") {\r\n                  self.setError(slide);\r\n                }\r\n              }\r\n            })\r\n          );\r\n\r\n          $slide.one(\"onReset\", function() {\r\n            ajaxLoad.abort();\r\n          });\r\n\r\n          break;\r\n\r\n        default:\r\n          self.setError(slide);\r\n\r\n          break;\r\n      }\r\n\r\n      return true;\r\n    },\r\n\r\n    // Use thumbnail image, if possible\r\n    // ================================\r\n\r\n    setImage: function(slide) {\r\n      var self = this,\r\n        ghost;\r\n\r\n      // Check if need to show loading icon\r\n      setTimeout(function() {\r\n        var $img = slide.$image;\r\n\r\n        if (!self.isClosing && slide.isLoading && (!$img || !$img.length || !$img[0].complete) && !slide.hasError) {\r\n          self.showLoading(slide);\r\n        }\r\n      }, 50);\r\n\r\n      //Check if image has srcset\r\n      self.checkSrcset(slide);\r\n\r\n      // This will be wrapper containing both ghost and actual image\r\n      slide.$content = $('<div class=\"fancybox-content\"></div>')\r\n        .addClass(\"fancybox-is-hidden\")\r\n        .appendTo(slide.$slide.addClass(\"fancybox-slide--image\"));\r\n\r\n      // If we have a thumbnail, we can display it while actual image is loading\r\n      // Users will not stare at black screen and actual image will appear gradually\r\n      if (slide.opts.preload !== false && slide.opts.width && slide.opts.height && slide.thumb) {\r\n        slide.width = slide.opts.width;\r\n        slide.height = slide.opts.height;\r\n\r\n        ghost = document.createElement(\"img\");\r\n\r\n        ghost.onerror = function() {\r\n          $(this).remove();\r\n\r\n          slide.$ghost = null;\r\n        };\r\n\r\n        ghost.onload = function() {\r\n          self.afterLoad(slide);\r\n        };\r\n\r\n        slide.$ghost = $(ghost)\r\n          .addClass(\"fancybox-image\")\r\n          .appendTo(slide.$content)\r\n          .attr(\"src\", slide.thumb);\r\n      }\r\n\r\n      // Start loading actual image\r\n      self.setBigImage(slide);\r\n    },\r\n\r\n    // Check if image has srcset and get the source\r\n    // ============================================\r\n    checkSrcset: function(slide) {\r\n      var srcset = slide.opts.srcset || slide.opts.image.srcset,\r\n        found,\r\n        temp,\r\n        pxRatio,\r\n        windowWidth;\r\n\r\n      // If we have \"srcset\", then we need to find first matching \"src\" value.\r\n      // This is necessary, because when you set an src attribute, the browser will preload the image\r\n      // before any javascript or even CSS is applied.\r\n      if (srcset) {\r\n        pxRatio = window.devicePixelRatio || 1;\r\n        windowWidth = window.innerWidth * pxRatio;\r\n\r\n        temp = srcset.split(\",\").map(function(el) {\r\n          var ret = {};\r\n\r\n          el.trim()\r\n            .split(/\\s+/)\r\n            .forEach(function(el, i) {\r\n              var value = parseInt(el.substring(0, el.length - 1), 10);\r\n\r\n              if (i === 0) {\r\n                return (ret.url = el);\r\n              }\r\n\r\n              if (value) {\r\n                ret.value = value;\r\n                ret.postfix = el[el.length - 1];\r\n              }\r\n            });\r\n\r\n          return ret;\r\n        });\r\n\r\n        // Sort by value\r\n        temp.sort(function(a, b) {\r\n          return a.value - b.value;\r\n        });\r\n\r\n        // Ok, now we have an array of all srcset values\r\n        for (var j = 0; j < temp.length; j++) {\r\n          var el = temp[j];\r\n\r\n          if ((el.postfix === \"w\" && el.value >= windowWidth) || (el.postfix === \"x\" && el.value >= pxRatio)) {\r\n            found = el;\r\n            break;\r\n          }\r\n        }\r\n\r\n        // If not found, take the last one\r\n        if (!found && temp.length) {\r\n          found = temp[temp.length - 1];\r\n        }\r\n\r\n        if (found) {\r\n          slide.src = found.url;\r\n\r\n          // If we have default width/height values, we can calculate height for matching source\r\n          if (slide.width && slide.height && found.postfix == \"w\") {\r\n            slide.height = (slide.width / slide.height) * found.value;\r\n            slide.width = found.value;\r\n          }\r\n\r\n          slide.opts.srcset = srcset;\r\n        }\r\n      }\r\n    },\r\n\r\n    // Create full-size image\r\n    // ======================\r\n\r\n    setBigImage: function(slide) {\r\n      var self = this,\r\n        img = document.createElement(\"img\"),\r\n        $img = $(img);\r\n\r\n      slide.$image = $img\r\n        .one(\"error\", function() {\r\n          self.setError(slide);\r\n        })\r\n        .one(\"load\", function() {\r\n          var sizes;\r\n\r\n          if (!slide.$ghost) {\r\n            self.resolveImageSlideSize(slide, this.naturalWidth, this.naturalHeight);\r\n\r\n            self.afterLoad(slide);\r\n          }\r\n\r\n          if (self.isClosing) {\r\n            return;\r\n          }\r\n\r\n          if (slide.opts.srcset) {\r\n            sizes = slide.opts.sizes;\r\n\r\n            if (!sizes || sizes === \"auto\") {\r\n              sizes =\r\n                (slide.width / slide.height > 1 && $W.width() / $W.height() > 1 ? \"100\" : Math.round((slide.width / slide.height) * 100)) +\r\n                \"vw\";\r\n            }\r\n\r\n            $img.attr(\"sizes\", sizes).attr(\"srcset\", slide.opts.srcset);\r\n          }\r\n\r\n          // Hide temporary image after some delay\r\n          if (slide.$ghost) {\r\n            setTimeout(function() {\r\n              if (slide.$ghost && !self.isClosing) {\r\n                slide.$ghost.hide();\r\n              }\r\n            }, Math.min(300, Math.max(1000, slide.height / 1600)));\r\n          }\r\n\r\n          self.hideLoading(slide);\r\n        })\r\n        .addClass(\"fancybox-image\")\r\n        .attr(\"src\", slide.src)\r\n        .appendTo(slide.$content);\r\n\r\n      if ((img.complete || img.readyState == \"complete\") && $img.naturalWidth && $img.naturalHeight) {\r\n        $img.trigger(\"load\");\r\n      } else if (img.error) {\r\n        $img.trigger(\"error\");\r\n      }\r\n    },\r\n\r\n    // Computes the slide size from image size and maxWidth/maxHeight\r\n    // ==============================================================\r\n\r\n    resolveImageSlideSize: function(slide, imgWidth, imgHeight) {\r\n      var maxWidth = parseInt(slide.opts.width, 10),\r\n        maxHeight = parseInt(slide.opts.height, 10);\r\n\r\n      // Sets the default values from the image\r\n      slide.width = imgWidth;\r\n      slide.height = imgHeight;\r\n\r\n      if (maxWidth > 0) {\r\n        slide.width = maxWidth;\r\n        slide.height = Math.floor((maxWidth * imgHeight) / imgWidth);\r\n      }\r\n\r\n      if (maxHeight > 0) {\r\n        slide.width = Math.floor((maxHeight * imgWidth) / imgHeight);\r\n        slide.height = maxHeight;\r\n      }\r\n    },\r\n\r\n    // Create iframe wrapper, iframe and bindings\r\n    // ==========================================\r\n\r\n    setIframe: function(slide) {\r\n      var self = this,\r\n        opts = slide.opts.iframe,\r\n        $slide = slide.$slide,\r\n        $iframe;\r\n\r\n      // Fix responsive iframes on iOS (along with `position:absolute;` for iframe element)\r\n      if ($.fancybox.isMobile) {\r\n        opts.css.overflow = \"scroll\";\r\n      }\r\n\r\n      slide.$content = $('<div class=\"fancybox-content' + (opts.preload ? \" fancybox-is-hidden\" : \"\") + '\"></div>')\r\n        .css(opts.css)\r\n        .appendTo($slide);\r\n\r\n      $slide.addClass(\"fancybox-slide--\" + slide.contentType);\r\n\r\n      slide.$iframe = $iframe = $(opts.tpl.replace(/\\{rnd\\}/g, new Date().getTime()))\r\n        .attr(opts.attr)\r\n        .appendTo(slide.$content);\r\n\r\n      if (opts.preload) {\r\n        self.showLoading(slide);\r\n\r\n        // Unfortunately, it is not always possible to determine if iframe is successfully loaded\r\n        // (due to browser security policy)\r\n\r\n        $iframe.on(\"load.fb error.fb\", function(e) {\r\n          this.isReady = 1;\r\n\r\n          slide.$slide.trigger(\"refresh\");\r\n\r\n          self.afterLoad(slide);\r\n        });\r\n\r\n        // Recalculate iframe content size\r\n        // ===============================\r\n\r\n        $slide.on(\"refresh.fb\", function() {\r\n          var $content = slide.$content,\r\n            frameWidth = opts.css.width,\r\n            frameHeight = opts.css.height,\r\n            $contents,\r\n            $body;\r\n\r\n          if ($iframe[0].isReady !== 1) {\r\n            return;\r\n          }\r\n\r\n          try {\r\n            $contents = $iframe.contents();\r\n            $body = $contents.find(\"body\");\r\n          } catch (ignore) {}\r\n\r\n          // Calculate contnet dimensions if it is accessible\r\n          if ($body && $body.length && $body.children().length) {\r\n            // Avoid scrolling to top (if multiple instances)\r\n            $slide.css(\"overflow\", \"visible\");\r\n\r\n            $content.css({\r\n              width: \"100%\",\r\n              \"max-width\": \"100%\",\r\n              height: \"9999px\"\r\n            });\r\n\r\n            if (frameWidth === undefined) {\r\n              frameWidth = Math.ceil(Math.max($body[0].clientWidth, $body.outerWidth(true)));\r\n            }\r\n\r\n            $content.css(\"width\", frameWidth ? frameWidth : \"\").css(\"max-width\", \"\");\r\n\r\n            if (frameHeight === undefined) {\r\n              frameHeight = Math.ceil(Math.max($body[0].clientHeight, $body.outerHeight(true)));\r\n            }\r\n\r\n            $content.css(\"height\", frameHeight ? frameHeight : \"\");\r\n\r\n            $slide.css(\"overflow\", \"auto\");\r\n          }\r\n\r\n          $content.removeClass(\"fancybox-is-hidden\");\r\n        });\r\n      } else {\r\n        self.afterLoad(slide);\r\n      }\r\n\r\n      $iframe.attr(\"src\", slide.src);\r\n\r\n      // Remove iframe if closing or changing gallery item\r\n      $slide.one(\"onReset\", function() {\r\n        // This helps IE not to throw errors when closing\r\n        try {\r\n          $(this)\r\n            .find(\"iframe\")\r\n            .hide()\r\n            .unbind()\r\n            .attr(\"src\", \"//about:blank\");\r\n        } catch (ignore) {}\r\n\r\n        $(this)\r\n          .off(\"refresh.fb\")\r\n          .empty();\r\n\r\n        slide.isLoaded = false;\r\n        slide.isRevealed = false;\r\n      });\r\n    },\r\n\r\n    // Wrap and append content to the slide\r\n    // ======================================\r\n\r\n    setContent: function(slide, content) {\r\n      var self = this;\r\n\r\n      if (self.isClosing) {\r\n        return;\r\n      }\r\n\r\n      self.hideLoading(slide);\r\n\r\n      if (slide.$content) {\r\n        $.fancybox.stop(slide.$content);\r\n      }\r\n\r\n      slide.$slide.empty();\r\n\r\n      // If content is a jQuery object, then it will be moved to the slide.\r\n      // The placeholder is created so we will know where to put it back.\r\n      if (isQuery(content) && content.parent().length) {\r\n        // Make sure content is not already moved to fancyBox\r\n        if (content.hasClass(\"fancybox-content\") || content.parent().hasClass(\"fancybox-content\")) {\r\n          content.parents(\".fancybox-slide\").trigger(\"onReset\");\r\n        }\r\n\r\n        // Create temporary element marking original place of the content\r\n        slide.$placeholder = $(\"<div>\")\r\n          .hide()\r\n          .insertAfter(content);\r\n\r\n        // Make sure content is visible\r\n        content.css(\"display\", \"inline-block\");\r\n      } else if (!slide.hasError) {\r\n        // If content is just a plain text, try to convert it to html\r\n        if ($.type(content) === \"string\") {\r\n          content = $(\"<div>\")\r\n            .append($.trim(content))\r\n            .contents();\r\n        }\r\n\r\n        // If \"filter\" option is provided, then filter content\r\n        if (slide.opts.filter) {\r\n          content = $(\"<div>\")\r\n            .html(content)\r\n            .find(slide.opts.filter);\r\n        }\r\n      }\r\n\r\n      slide.$slide.one(\"onReset\", function() {\r\n        // Pause all html5 video/audio\r\n        $(this)\r\n          .find(\"video,audio\")\r\n          .trigger(\"pause\");\r\n\r\n        // Put content back\r\n        if (slide.$placeholder) {\r\n          slide.$placeholder.after(content.removeClass(\"fancybox-content\").hide()).remove();\r\n\r\n          slide.$placeholder = null;\r\n        }\r\n\r\n        // Remove custom close button\r\n        if (slide.$smallBtn) {\r\n          slide.$smallBtn.remove();\r\n\r\n          slide.$smallBtn = null;\r\n        }\r\n\r\n        // Remove content and mark slide as not loaded\r\n        if (!slide.hasError) {\r\n          $(this).empty();\r\n\r\n          slide.isLoaded = false;\r\n          slide.isRevealed = false;\r\n        }\r\n      });\r\n\r\n      $(content).appendTo(slide.$slide);\r\n\r\n      if ($(content).is(\"video,audio\")) {\r\n        $(content).addClass(\"fancybox-video\");\r\n\r\n        $(content).wrap(\"<div></div>\");\r\n\r\n        slide.contentType = \"video\";\r\n\r\n        slide.opts.width = slide.opts.width || $(content).attr(\"width\");\r\n        slide.opts.height = slide.opts.height || $(content).attr(\"height\");\r\n      }\r\n\r\n      slide.$content = slide.$slide\r\n        .children()\r\n        .filter(\"div,form,main,video,audio,article,.fancybox-content\")\r\n        .first();\r\n\r\n      slide.$content.siblings().hide();\r\n\r\n      // Re-check if there is a valid content\r\n      // (in some cases, ajax response can contain various elements or plain text)\r\n      if (!slide.$content.length) {\r\n        slide.$content = slide.$slide\r\n          .wrapInner(\"<div></div>\")\r\n          .children()\r\n          .first();\r\n      }\r\n\r\n      slide.$content.addClass(\"fancybox-content\");\r\n\r\n      slide.$slide.addClass(\"fancybox-slide--\" + slide.contentType);\r\n\r\n      self.afterLoad(slide);\r\n    },\r\n\r\n    // Display error message\r\n    // =====================\r\n\r\n    setError: function(slide) {\r\n      slide.hasError = true;\r\n\r\n      slide.$slide\r\n        .trigger(\"onReset\")\r\n        .removeClass(\"fancybox-slide--\" + slide.contentType)\r\n        .addClass(\"fancybox-slide--error\");\r\n\r\n      slide.contentType = \"html\";\r\n\r\n      this.setContent(slide, this.translate(slide, slide.opts.errorTpl));\r\n\r\n      if (slide.pos === this.currPos) {\r\n        this.isAnimating = false;\r\n      }\r\n    },\r\n\r\n    // Show loading icon inside the slide\r\n    // ==================================\r\n\r\n    showLoading: function(slide) {\r\n      var self = this;\r\n\r\n      slide = slide || self.current;\r\n\r\n      if (slide && !slide.$spinner) {\r\n        slide.$spinner = $(self.translate(self, self.opts.spinnerTpl))\r\n          .appendTo(slide.$slide)\r\n          .hide()\r\n          .fadeIn(\"fast\");\r\n      }\r\n    },\r\n\r\n    // Remove loading icon from the slide\r\n    // ==================================\r\n\r\n    hideLoading: function(slide) {\r\n      var self = this;\r\n\r\n      slide = slide || self.current;\r\n\r\n      if (slide && slide.$spinner) {\r\n        slide.$spinner.stop().remove();\r\n\r\n        delete slide.$spinner;\r\n      }\r\n    },\r\n\r\n    // Adjustments after slide content has been loaded\r\n    // ===============================================\r\n\r\n    afterLoad: function(slide) {\r\n      var self = this;\r\n\r\n      if (self.isClosing) {\r\n        return;\r\n      }\r\n\r\n      slide.isLoading = false;\r\n      slide.isLoaded = true;\r\n\r\n      self.trigger(\"afterLoad\", slide);\r\n\r\n      self.hideLoading(slide);\r\n\r\n      // Add small close button\r\n      if (slide.opts.smallBtn && (!slide.$smallBtn || !slide.$smallBtn.length)) {\r\n        slide.$smallBtn = $(self.translate(slide, slide.opts.btnTpl.smallBtn)).appendTo(slide.$content);\r\n      }\r\n\r\n      // Disable right click\r\n      if (slide.opts.protect && slide.$content && !slide.hasError) {\r\n        slide.$content.on(\"contextmenu.fb\", function(e) {\r\n          if (e.button == 2) {\r\n            e.preventDefault();\r\n          }\r\n\r\n          return true;\r\n        });\r\n\r\n        // Add fake element on top of the image\r\n        // This makes a bit harder for user to select image\r\n        if (slide.type === \"image\") {\r\n          $('<div class=\"fancybox-spaceball\"></div>').appendTo(slide.$content);\r\n        }\r\n      }\r\n\r\n      self.adjustCaption(slide);\r\n\r\n      self.adjustLayout(slide);\r\n\r\n      if (slide.pos === self.currPos) {\r\n        self.updateCursor();\r\n      }\r\n\r\n      self.revealContent(slide);\r\n    },\r\n\r\n    // Prevent caption overlap,\r\n    // fix css inconsistency across browsers\r\n    // =====================================\r\n\r\n    adjustCaption: function(slide) {\r\n      var self = this,\r\n        current = slide || self.current,\r\n        caption = current.opts.caption,\r\n        $caption = self.$refs.caption,\r\n        captionH = false;\r\n\r\n      if (current.opts.preventCaptionOverlap && caption && caption.length) {\r\n        if (current.pos !== self.currPos) {\r\n          $caption = $caption\r\n            .clone()\r\n            .empty()\r\n            .appendTo($caption.parent());\r\n\r\n          $caption.html(caption);\r\n\r\n          captionH = $caption.outerHeight(true);\r\n\r\n          $caption.empty().remove();\r\n        } else if (self.$caption) {\r\n          captionH = self.$caption.outerHeight(true);\r\n        }\r\n\r\n        current.$slide.css(\"padding-bottom\", captionH || \"\");\r\n      }\r\n    },\r\n\r\n    // Simple hack to fix inconsistency across browsers, described here (affects Edge, too):\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=748518\r\n    // ====================================================================================\r\n\r\n    adjustLayout: function(slide) {\r\n      var self = this,\r\n        current = slide || self.current,\r\n        scrollHeight,\r\n        marginBottom,\r\n        inlinePadding,\r\n        actualPadding;\r\n\r\n      if (current.isLoaded && current.opts.disableLayoutFix !== true) {\r\n        current.$content.css(\"margin-bottom\", \"\");\r\n\r\n        // If we would always set margin-bottom for the content,\r\n        // then it would potentially break vertical align\r\n        if (current.$content.outerHeight() > current.$slide.height() + 0.5) {\r\n          inlinePadding = current.$slide[0].style[\"padding-bottom\"];\r\n          actualPadding = current.$slide.css(\"padding-bottom\");\r\n\r\n          if (parseFloat(actualPadding) > 0) {\r\n            scrollHeight = current.$slide[0].scrollHeight;\r\n\r\n            current.$slide.css(\"padding-bottom\", 0);\r\n\r\n            if (Math.abs(scrollHeight - current.$slide[0].scrollHeight) < 1) {\r\n              marginBottom = actualPadding;\r\n            }\r\n\r\n            current.$slide.css(\"padding-bottom\", inlinePadding);\r\n          }\r\n        }\r\n\r\n        current.$content.css(\"margin-bottom\", marginBottom);\r\n      }\r\n    },\r\n\r\n    // Make content visible\r\n    // This method is called right after content has been loaded or\r\n    // user navigates gallery and transition should start\r\n    // ============================================================\r\n\r\n    revealContent: function(slide) {\r\n      var self = this,\r\n        $slide = slide.$slide,\r\n        end = false,\r\n        start = false,\r\n        isMoved = self.isMoved(slide),\r\n        isRevealed = slide.isRevealed,\r\n        effect,\r\n        effectClassName,\r\n        duration,\r\n        opacity;\r\n\r\n      slide.isRevealed = true;\r\n\r\n      effect = slide.opts[self.firstRun ? \"animationEffect\" : \"transitionEffect\"];\r\n      duration = slide.opts[self.firstRun ? \"animationDuration\" : \"transitionDuration\"];\r\n\r\n      duration = parseInt(slide.forcedDuration === undefined ? duration : slide.forcedDuration, 10);\r\n\r\n      if (isMoved || slide.pos !== self.currPos || !duration) {\r\n        effect = false;\r\n      }\r\n\r\n      // Check if can zoom\r\n      if (effect === \"zoom\") {\r\n        if (slide.pos === self.currPos && duration && slide.type === \"image\" && !slide.hasError && (start = self.getThumbPos(slide))) {\r\n          end = self.getFitPos(slide);\r\n        } else {\r\n          effect = \"fade\";\r\n        }\r\n      }\r\n\r\n      // Zoom animation\r\n      // ==============\r\n      if (effect === \"zoom\") {\r\n        self.isAnimating = true;\r\n\r\n        end.scaleX = end.width / start.width;\r\n        end.scaleY = end.height / start.height;\r\n\r\n        // Check if we need to animate opacity\r\n        opacity = slide.opts.zoomOpacity;\r\n\r\n        if (opacity == \"auto\") {\r\n          opacity = Math.abs(slide.width / slide.height - start.width / start.height) > 0.1;\r\n        }\r\n\r\n        if (opacity) {\r\n          start.opacity = 0.1;\r\n          end.opacity = 1;\r\n        }\r\n\r\n        // Draw image at start position\r\n        $.fancybox.setTranslate(slide.$content.removeClass(\"fancybox-is-hidden\"), start);\r\n\r\n        forceRedraw(slide.$content);\r\n\r\n        // Start animation\r\n        $.fancybox.animate(slide.$content, end, duration, function() {\r\n          self.isAnimating = false;\r\n\r\n          self.complete();\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      self.updateSlide(slide);\r\n\r\n      // Simply show content if no effect\r\n      // ================================\r\n      if (!effect) {\r\n        slide.$content.removeClass(\"fancybox-is-hidden\");\r\n\r\n        if (!isRevealed && isMoved && slide.type === \"image\" && !slide.hasError) {\r\n          slide.$content.hide().fadeIn(\"fast\");\r\n        }\r\n\r\n        if (slide.pos === self.currPos) {\r\n          self.complete();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      // Prepare for CSS transiton\r\n      // =========================\r\n      $.fancybox.stop($slide);\r\n\r\n      //effectClassName = \"fancybox-animated fancybox-slide--\" + (slide.pos >= self.prevPos ? \"next\" : \"previous\") + \" fancybox-fx-\" + effect;\r\n      effectClassName = \"fancybox-slide--\" + (slide.pos >= self.prevPos ? \"next\" : \"previous\") + \" fancybox-animated fancybox-fx-\" + effect;\r\n\r\n      $slide.addClass(effectClassName).removeClass(\"fancybox-slide--current\"); //.addClass(effectClassName);\r\n\r\n      slide.$content.removeClass(\"fancybox-is-hidden\");\r\n\r\n      // Force reflow\r\n      forceRedraw($slide);\r\n\r\n      if (slide.type !== \"image\") {\r\n        slide.$content.hide().show(0);\r\n      }\r\n\r\n      $.fancybox.animate(\r\n        $slide,\r\n        \"fancybox-slide--current\",\r\n        duration,\r\n        function() {\r\n          $slide.removeClass(effectClassName).css({\r\n            transform: \"\",\r\n            opacity: \"\"\r\n          });\r\n\r\n          if (slide.pos === self.currPos) {\r\n            self.complete();\r\n          }\r\n        },\r\n        true\r\n      );\r\n    },\r\n\r\n    // Check if we can and have to zoom from thumbnail\r\n    //================================================\r\n\r\n    getThumbPos: function(slide) {\r\n      var rez = false,\r\n        $thumb = slide.$thumb,\r\n        thumbPos,\r\n        btw,\r\n        brw,\r\n        bbw,\r\n        blw;\r\n\r\n      if (!$thumb || !inViewport($thumb[0])) {\r\n        return false;\r\n      }\r\n\r\n      thumbPos = $.fancybox.getTranslate($thumb);\r\n\r\n      btw = parseFloat($thumb.css(\"border-top-width\") || 0);\r\n      brw = parseFloat($thumb.css(\"border-right-width\") || 0);\r\n      bbw = parseFloat($thumb.css(\"border-bottom-width\") || 0);\r\n      blw = parseFloat($thumb.css(\"border-left-width\") || 0);\r\n\r\n      rez = {\r\n        top: thumbPos.top + btw,\r\n        left: thumbPos.left + blw,\r\n        width: thumbPos.width - brw - blw,\r\n        height: thumbPos.height - btw - bbw,\r\n        scaleX: 1,\r\n        scaleY: 1\r\n      };\r\n\r\n      return thumbPos.width > 0 && thumbPos.height > 0 ? rez : false;\r\n    },\r\n\r\n    // Final adjustments after current gallery item is moved to position\r\n    // and it`s content is loaded\r\n    // ==================================================================\r\n\r\n    complete: function() {\r\n      var self = this,\r\n        current = self.current,\r\n        slides = {},\r\n        $el;\r\n\r\n      if (self.isMoved() || !current.isLoaded) {\r\n        return;\r\n      }\r\n\r\n      if (!current.isComplete) {\r\n        current.isComplete = true;\r\n\r\n        current.$slide.siblings().trigger(\"onReset\");\r\n\r\n        self.preload(\"inline\");\r\n\r\n        // Trigger any CSS transiton inside the slide\r\n        forceRedraw(current.$slide);\r\n\r\n        current.$slide.addClass(\"fancybox-slide--complete\");\r\n\r\n        // Remove unnecessary slides\r\n        $.each(self.slides, function(key, slide) {\r\n          if (slide.pos >= self.currPos - 1 && slide.pos <= self.currPos + 1) {\r\n            slides[slide.pos] = slide;\r\n          } else if (slide) {\r\n            $.fancybox.stop(slide.$slide);\r\n\r\n            slide.$slide.off().remove();\r\n          }\r\n        });\r\n\r\n        self.slides = slides;\r\n      }\r\n\r\n      self.isAnimating = false;\r\n\r\n      self.updateCursor();\r\n\r\n      self.trigger(\"afterShow\");\r\n\r\n      // Autoplay first html5 video/audio\r\n      if (!!current.opts.video.autoStart) {\r\n        current.$slide\r\n          .find(\"video,audio\")\r\n          .filter(\":visible:first\")\r\n          .trigger(\"play\")\r\n          .one(\"ended\", function() {\r\n            if (this.webkitExitFullscreen) {\r\n              this.webkitExitFullscreen();\r\n            }\r\n\r\n            self.next();\r\n          });\r\n      }\r\n\r\n      // Try to focus on the first focusable element\r\n      if (current.opts.autoFocus && current.contentType === \"html\") {\r\n        // Look for the first input with autofocus attribute\r\n        $el = current.$content.find(\"input[autofocus]:enabled:visible:first\");\r\n\r\n        if ($el.length) {\r\n          $el.trigger(\"focus\");\r\n        } else {\r\n          self.focus(null, true);\r\n        }\r\n      }\r\n\r\n      // Avoid jumping\r\n      current.$slide.scrollTop(0).scrollLeft(0);\r\n    },\r\n\r\n    // Preload next and previous slides\r\n    // ================================\r\n\r\n    preload: function(type) {\r\n      var self = this,\r\n        prev,\r\n        next;\r\n\r\n      if (self.group.length < 2) {\r\n        return;\r\n      }\r\n\r\n      next = self.slides[self.currPos + 1];\r\n      prev = self.slides[self.currPos - 1];\r\n\r\n      if (prev && prev.type === type) {\r\n        self.loadSlide(prev);\r\n      }\r\n\r\n      if (next && next.type === type) {\r\n        self.loadSlide(next);\r\n      }\r\n    },\r\n\r\n    // Try to find and focus on the first focusable element\r\n    // ====================================================\r\n\r\n    focus: function(e, firstRun) {\r\n      var self = this,\r\n        focusableStr = [\r\n          \"a[href]\",\r\n          \"area[href]\",\r\n          'input:not([disabled]):not([type=\"hidden\"]):not([aria-hidden])',\r\n          \"select:not([disabled]):not([aria-hidden])\",\r\n          \"textarea:not([disabled]):not([aria-hidden])\",\r\n          \"button:not([disabled]):not([aria-hidden])\",\r\n          \"iframe\",\r\n          \"object\",\r\n          \"embed\",\r\n          \"[contenteditable]\",\r\n          '[tabindex]:not([tabindex^=\"-\"])'\r\n        ].join(\",\"),\r\n        focusableItems,\r\n        focusedItemIndex;\r\n\r\n      if (self.isClosing) {\r\n        return;\r\n      }\r\n\r\n      if (e || !self.current || !self.current.isComplete) {\r\n        // Focus on any element inside fancybox\r\n        focusableItems = self.$refs.container.find(\"*:visible\");\r\n      } else {\r\n        // Focus inside current slide\r\n        focusableItems = self.current.$slide.find(\"*:visible\" + (firstRun ? \":not(.fancybox-close-small)\" : \"\"));\r\n      }\r\n\r\n      focusableItems = focusableItems.filter(focusableStr).filter(function() {\r\n        return $(this).css(\"visibility\") !== \"hidden\" && !$(this).hasClass(\"disabled\");\r\n      });\r\n\r\n      if (focusableItems.length) {\r\n        focusedItemIndex = focusableItems.index(document.activeElement);\r\n\r\n        if (e && e.shiftKey) {\r\n          // Back tab\r\n          if (focusedItemIndex < 0 || focusedItemIndex == 0) {\r\n            e.preventDefault();\r\n\r\n            focusableItems.eq(focusableItems.length - 1).trigger(\"focus\");\r\n          }\r\n        } else {\r\n          // Outside or Forward tab\r\n          if (focusedItemIndex < 0 || focusedItemIndex == focusableItems.length - 1) {\r\n            if (e) {\r\n              e.preventDefault();\r\n            }\r\n\r\n            focusableItems.eq(0).trigger(\"focus\");\r\n          }\r\n        }\r\n      } else {\r\n        self.$refs.container.trigger(\"focus\");\r\n      }\r\n    },\r\n\r\n    // Activates current instance - brings container to the front and enables keyboard,\r\n    // notifies other instances about deactivating\r\n    // =================================================================================\r\n\r\n    activate: function() {\r\n      var self = this;\r\n\r\n      // Deactivate all instances\r\n      $(\".fancybox-container\").each(function() {\r\n        var instance = $(this).data(\"FancyBox\");\r\n\r\n        // Skip self and closing instances\r\n        if (instance && instance.id !== self.id && !instance.isClosing) {\r\n          instance.trigger(\"onDeactivate\");\r\n\r\n          instance.removeEvents();\r\n\r\n          instance.isVisible = false;\r\n        }\r\n      });\r\n\r\n      self.isVisible = true;\r\n\r\n      if (self.current || self.isIdle) {\r\n        self.update();\r\n\r\n        self.updateControls();\r\n      }\r\n\r\n      self.trigger(\"onActivate\");\r\n\r\n      self.addEvents();\r\n    },\r\n\r\n    // Start closing procedure\r\n    // This will start \"zoom-out\" animation if needed and clean everything up afterwards\r\n    // =================================================================================\r\n\r\n    close: function(e, d) {\r\n      var self = this,\r\n        current = self.current,\r\n        effect,\r\n        duration,\r\n        $content,\r\n        domRect,\r\n        opacity,\r\n        start,\r\n        end;\r\n\r\n      var done = function() {\r\n        self.cleanUp(e);\r\n      };\r\n\r\n      if (self.isClosing) {\r\n        return false;\r\n      }\r\n\r\n      self.isClosing = true;\r\n\r\n      // If beforeClose callback prevents closing, make sure content is centered\r\n      if (self.trigger(\"beforeClose\", e) === false) {\r\n        self.isClosing = false;\r\n\r\n        requestAFrame(function() {\r\n          self.update();\r\n        });\r\n\r\n        return false;\r\n      }\r\n\r\n      // Remove all events\r\n      // If there are multiple instances, they will be set again by \"activate\" method\r\n      self.removeEvents();\r\n\r\n      $content = current.$content;\r\n      effect = current.opts.animationEffect;\r\n      duration = $.isNumeric(d) ? d : effect ? current.opts.animationDuration : 0;\r\n\r\n      current.$slide.removeClass(\"fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated\");\r\n\r\n      if (e !== true) {\r\n        $.fancybox.stop(current.$slide);\r\n      } else {\r\n        effect = false;\r\n      }\r\n\r\n      // Remove other slides\r\n      current.$slide\r\n        .siblings()\r\n        .trigger(\"onReset\")\r\n        .remove();\r\n\r\n      // Trigger animations\r\n      if (duration) {\r\n        self.$refs.container\r\n          .removeClass(\"fancybox-is-open\")\r\n          .addClass(\"fancybox-is-closing\")\r\n          .css(\"transition-duration\", duration + \"ms\");\r\n      }\r\n\r\n      // Clean up\r\n      self.hideLoading(current);\r\n\r\n      self.hideControls(true);\r\n\r\n      self.updateCursor();\r\n\r\n      // Check if possible to zoom-out\r\n      if (\r\n        effect === \"zoom\" &&\r\n        !($content && duration && current.type === \"image\" && !self.isMoved() && !current.hasError && (end = self.getThumbPos(current)))\r\n      ) {\r\n        effect = \"fade\";\r\n      }\r\n\r\n      if (effect === \"zoom\") {\r\n        $.fancybox.stop($content);\r\n\r\n        domRect = $.fancybox.getTranslate($content);\r\n\r\n        start = {\r\n          top: domRect.top,\r\n          left: domRect.left,\r\n          scaleX: domRect.width / end.width,\r\n          scaleY: domRect.height / end.height,\r\n          width: end.width,\r\n          height: end.height\r\n        };\r\n\r\n        // Check if we need to animate opacity\r\n        opacity = current.opts.zoomOpacity;\r\n\r\n        if (opacity == \"auto\") {\r\n          opacity = Math.abs(current.width / current.height - end.width / end.height) > 0.1;\r\n        }\r\n\r\n        if (opacity) {\r\n          end.opacity = 0;\r\n        }\r\n\r\n        $.fancybox.setTranslate($content, start);\r\n\r\n        forceRedraw($content);\r\n\r\n        $.fancybox.animate($content, end, duration, done);\r\n\r\n        return true;\r\n      }\r\n\r\n      if (effect && duration) {\r\n        $.fancybox.animate(\r\n          current.$slide.addClass(\"fancybox-slide--previous\").removeClass(\"fancybox-slide--current\"),\r\n          \"fancybox-animated fancybox-fx-\" + effect,\r\n          duration,\r\n          done\r\n        );\r\n      } else {\r\n        // If skip animation\r\n        if (e === true) {\r\n          setTimeout(done, duration);\r\n        } else {\r\n          done();\r\n        }\r\n      }\r\n\r\n      return true;\r\n    },\r\n\r\n    // Final adjustments after removing the instance\r\n    // =============================================\r\n\r\n    cleanUp: function(e) {\r\n      var self = this,\r\n        instance,\r\n        $focus = self.current.opts.$orig,\r\n        x,\r\n        y;\r\n\r\n      self.current.$slide.trigger(\"onReset\");\r\n\r\n      self.$refs.container.empty().remove();\r\n\r\n      self.trigger(\"afterClose\", e);\r\n\r\n      // Place back focus\r\n      if (!!self.current.opts.backFocus) {\r\n        if (!$focus || !$focus.length || !$focus.is(\":visible\")) {\r\n          $focus = self.$trigger;\r\n        }\r\n\r\n        if ($focus && $focus.length) {\r\n          x = window.scrollX;\r\n          y = window.scrollY;\r\n\r\n          $focus.trigger(\"focus\");\r\n\r\n          $(\"html, body\")\r\n            .scrollTop(y)\r\n            .scrollLeft(x);\r\n        }\r\n      }\r\n\r\n      self.current = null;\r\n\r\n      // Check if there are other instances\r\n      instance = $.fancybox.getInstance();\r\n\r\n      if (instance) {\r\n        instance.activate();\r\n      } else {\r\n        $(\"body\").removeClass(\"fancybox-active compensate-for-scrollbar\");\r\n\r\n        $(\"#fancybox-style-noscroll\").remove();\r\n      }\r\n    },\r\n\r\n    // Call callback and trigger an event\r\n    // ==================================\r\n\r\n    trigger: function(name, slide) {\r\n      var args = Array.prototype.slice.call(arguments, 1),\r\n        self = this,\r\n        obj = slide && slide.opts ? slide : self.current,\r\n        rez;\r\n\r\n      if (obj) {\r\n        args.unshift(obj);\r\n      } else {\r\n        obj = self;\r\n      }\r\n\r\n      args.unshift(self);\r\n\r\n      if ($.isFunction(obj.opts[name])) {\r\n        rez = obj.opts[name].apply(obj, args);\r\n      }\r\n\r\n      if (rez === false) {\r\n        return rez;\r\n      }\r\n\r\n      if (name === \"afterClose\" || !self.$refs) {\r\n        $D.trigger(name + \".fb\", args);\r\n      } else {\r\n        self.$refs.container.trigger(name + \".fb\", args);\r\n      }\r\n    },\r\n\r\n    // Update infobar values, navigation button states and reveal caption\r\n    // ==================================================================\r\n\r\n    updateControls: function() {\r\n      var self = this,\r\n        current = self.current,\r\n        index = current.index,\r\n        $container = self.$refs.container,\r\n        $caption = self.$refs.caption,\r\n        caption = current.opts.caption;\r\n\r\n      // Recalculate content dimensions\r\n      current.$slide.trigger(\"refresh\");\r\n\r\n      self.$caption = caption && caption.length ? $caption.html(caption) : null;\r\n\r\n      if (!self.hasHiddenControls && !self.isIdle) {\r\n        self.showControls();\r\n      }\r\n\r\n      // Update info and navigation elements\r\n      $container.find(\"[data-fancybox-count]\").html(self.group.length);\r\n      $container.find(\"[data-fancybox-index]\").html(index + 1);\r\n\r\n      $container.find(\"[data-fancybox-prev]\").prop(\"disabled\", !current.opts.loop && index <= 0);\r\n      $container.find(\"[data-fancybox-next]\").prop(\"disabled\", !current.opts.loop && index >= self.group.length - 1);\r\n\r\n      if (current.type === \"image\") {\r\n        // Re-enable buttons; update download button source\r\n        $container\r\n          .find(\"[data-fancybox-zoom]\")\r\n          .show()\r\n          .end()\r\n          .find(\"[data-fancybox-download]\")\r\n          .attr(\"href\", current.opts.image.src || current.src)\r\n          .show();\r\n      } else if (current.opts.toolbar) {\r\n        $container.find(\"[data-fancybox-download],[data-fancybox-zoom]\").hide();\r\n      }\r\n\r\n      // Make sure focus is not on disabled button/element\r\n      if ($(document.activeElement).is(\":hidden,[disabled]\")) {\r\n        self.$refs.container.trigger(\"focus\");\r\n      }\r\n    },\r\n\r\n    // Hide toolbar and caption\r\n    // ========================\r\n\r\n    hideControls: function(andCaption) {\r\n      var self = this,\r\n        arr = [\"infobar\", \"toolbar\", \"nav\"];\r\n\r\n      if (andCaption || !self.current.opts.preventCaptionOverlap) {\r\n        arr.push(\"caption\");\r\n      }\r\n\r\n      this.$refs.container.removeClass(\r\n        arr\r\n          .map(function(i) {\r\n            return \"fancybox-show-\" + i;\r\n          })\r\n          .join(\" \")\r\n      );\r\n\r\n      this.hasHiddenControls = true;\r\n    },\r\n\r\n    showControls: function() {\r\n      var self = this,\r\n        opts = self.current ? self.current.opts : self.opts,\r\n        $container = self.$refs.container;\r\n\r\n      self.hasHiddenControls = false;\r\n      self.idleSecondsCounter = 0;\r\n\r\n      $container\r\n        .toggleClass(\"fancybox-show-toolbar\", !!(opts.toolbar && opts.buttons))\r\n        .toggleClass(\"fancybox-show-infobar\", !!(opts.infobar && self.group.length > 1))\r\n        .toggleClass(\"fancybox-show-caption\", !!self.$caption)\r\n        .toggleClass(\"fancybox-show-nav\", !!(opts.arrows && self.group.length > 1))\r\n        .toggleClass(\"fancybox-is-modal\", !!opts.modal);\r\n    },\r\n\r\n    // Toggle toolbar and caption\r\n    // ==========================\r\n\r\n    toggleControls: function() {\r\n      if (this.hasHiddenControls) {\r\n        this.showControls();\r\n      } else {\r\n        this.hideControls();\r\n      }\r\n    }\r\n  });\r\n\r\n  $.fancybox = {\r\n    version: \"3.5.2\",\r\n    defaults: defaults,\r\n\r\n    // Get current instance and execute a command.\r\n    //\r\n    // Examples of usage:\r\n    //\r\n    //   $instance = $.fancybox.getInstance();\r\n    //   $.fancybox.getInstance().jumpTo( 1 );\r\n    //   $.fancybox.getInstance( 'jumpTo', 1 );\r\n    //   $.fancybox.getInstance( function() {\r\n    //       console.info( this.currIndex );\r\n    //   });\r\n    // ======================================================\r\n\r\n    getInstance: function(command) {\r\n      var instance = $('.fancybox-container:not(\".fancybox-is-closing\"):last').data(\"FancyBox\"),\r\n        args = Array.prototype.slice.call(arguments, 1);\r\n\r\n      if (instance instanceof FancyBox) {\r\n        if ($.type(command) === \"string\") {\r\n          instance[command].apply(instance, args);\r\n        } else if ($.type(command) === \"function\") {\r\n          command.apply(instance, args);\r\n        }\r\n\r\n        return instance;\r\n      }\r\n\r\n      return false;\r\n    },\r\n\r\n    // Create new instance\r\n    // ===================\r\n\r\n    open: function(items, opts, index) {\r\n      return new FancyBox(items, opts, index);\r\n    },\r\n\r\n    // Close current or all instances\r\n    // ==============================\r\n\r\n    close: function(all) {\r\n      var instance = this.getInstance();\r\n\r\n      if (instance) {\r\n        instance.close();\r\n\r\n        // Try to find and close next instance\r\n        if (all === true) {\r\n          this.close(all);\r\n        }\r\n      }\r\n    },\r\n\r\n    // Close all instances and unbind all events\r\n    // =========================================\r\n\r\n    destroy: function() {\r\n      this.close(true);\r\n\r\n      $D.add(\"body\").off(\"click.fb-start\", \"**\");\r\n    },\r\n\r\n    // Try to detect mobile devices\r\n    // ============================\r\n\r\n    isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),\r\n\r\n    // Detect if 'translate3d' support is available\r\n    // ============================================\r\n\r\n    use3d: (function() {\r\n      var div = document.createElement(\"div\");\r\n\r\n      return (\r\n        window.getComputedStyle &&\r\n        window.getComputedStyle(div) &&\r\n        window.getComputedStyle(div).getPropertyValue(\"transform\") &&\r\n        !(document.documentMode && document.documentMode < 11)\r\n      );\r\n    })(),\r\n\r\n    // Helper function to get current visual state of an element\r\n    // returns array[ top, left, horizontal-scale, vertical-scale, opacity ]\r\n    // =====================================================================\r\n\r\n    getTranslate: function($el) {\r\n      var domRect;\r\n\r\n      if (!$el || !$el.length) {\r\n        return false;\r\n      }\r\n\r\n      domRect = $el[0].getBoundingClientRect();\r\n\r\n      return {\r\n        top: domRect.top || 0,\r\n        left: domRect.left || 0,\r\n        width: domRect.width,\r\n        height: domRect.height,\r\n        opacity: parseFloat($el.css(\"opacity\"))\r\n      };\r\n    },\r\n\r\n    // Shortcut for setting \"translate3d\" properties for element\r\n    // Can set be used to set opacity, too\r\n    // ========================================================\r\n\r\n    setTranslate: function($el, props) {\r\n      var str = \"\",\r\n        css = {};\r\n\r\n      if (!$el || !props) {\r\n        return;\r\n      }\r\n\r\n      if (props.left !== undefined || props.top !== undefined) {\r\n        str =\r\n          (props.left === undefined ? $el.position().left : props.left) +\r\n          \"px, \" +\r\n          (props.top === undefined ? $el.position().top : props.top) +\r\n          \"px\";\r\n\r\n        if (this.use3d) {\r\n          str = \"translate3d(\" + str + \", 0px)\";\r\n        } else {\r\n          str = \"translate(\" + str + \")\";\r\n        }\r\n      }\r\n\r\n      if (props.scaleX !== undefined && props.scaleY !== undefined) {\r\n        str += \" scale(\" + props.scaleX + \", \" + props.scaleY + \")\";\r\n      } else if (props.scaleX !== undefined) {\r\n        str += \" scaleX(\" + props.scaleX + \")\";\r\n      }\r\n\r\n      if (str.length) {\r\n        css.transform = str;\r\n      }\r\n\r\n      if (props.opacity !== undefined) {\r\n        css.opacity = props.opacity;\r\n      }\r\n\r\n      if (props.width !== undefined) {\r\n        css.width = props.width;\r\n      }\r\n\r\n      if (props.height !== undefined) {\r\n        css.height = props.height;\r\n      }\r\n\r\n      return $el.css(css);\r\n    },\r\n\r\n    // Simple CSS transition handler\r\n    // =============================\r\n\r\n    animate: function($el, to, duration, callback, leaveAnimationName) {\r\n      var self = this,\r\n        from;\r\n\r\n      if ($.isFunction(duration)) {\r\n        callback = duration;\r\n        duration = null;\r\n      }\r\n\r\n      self.stop($el);\r\n\r\n      from = self.getTranslate($el);\r\n\r\n      $el.on(transitionEnd, function(e) {\r\n        // Skip events from child elements and z-index change\r\n        if (e && e.originalEvent && (!$el.is(e.originalEvent.target) || e.originalEvent.propertyName == \"z-index\")) {\r\n          return;\r\n        }\r\n\r\n        self.stop($el);\r\n\r\n        if ($.isNumeric(duration)) {\r\n          $el.css(\"transition-duration\", \"\");\r\n        }\r\n\r\n        if ($.isPlainObject(to)) {\r\n          if (to.scaleX !== undefined && to.scaleY !== undefined) {\r\n            self.setTranslate($el, {\r\n              top: to.top,\r\n              left: to.left,\r\n              width: from.width * to.scaleX,\r\n              height: from.height * to.scaleY,\r\n              scaleX: 1,\r\n              scaleY: 1\r\n            });\r\n          }\r\n        } else if (leaveAnimationName !== true) {\r\n          $el.removeClass(to);\r\n        }\r\n\r\n        if ($.isFunction(callback)) {\r\n          callback(e);\r\n        }\r\n      });\r\n\r\n      if ($.isNumeric(duration)) {\r\n        $el.css(\"transition-duration\", duration + \"ms\");\r\n      }\r\n\r\n      // Start animation by changing CSS properties or class name\r\n      if ($.isPlainObject(to)) {\r\n        if (to.scaleX !== undefined && to.scaleY !== undefined) {\r\n          delete to.width;\r\n          delete to.height;\r\n\r\n          if ($el.parent().hasClass(\"fancybox-slide--image\")) {\r\n            $el.parent().addClass(\"fancybox-is-scaling\");\r\n          }\r\n        }\r\n\r\n        $.fancybox.setTranslate($el, to);\r\n      } else {\r\n        $el.addClass(to);\r\n      }\r\n\r\n      // Make sure that `transitionend` callback gets fired\r\n      $el.data(\r\n        \"timer\",\r\n        setTimeout(function() {\r\n          $el.trigger(transitionEnd);\r\n        }, duration + 33)\r\n      );\r\n    },\r\n\r\n    stop: function($el, callCallback) {\r\n      if ($el && $el.length) {\r\n        clearTimeout($el.data(\"timer\"));\r\n\r\n        if (callCallback) {\r\n          $el.trigger(transitionEnd);\r\n        }\r\n\r\n        $el.off(transitionEnd).css(\"transition-duration\", \"\");\r\n\r\n        $el.parent().removeClass(\"fancybox-is-scaling\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // Default click handler for \"fancyboxed\" links\r\n  // ============================================\r\n\r\n  function _run(e, opts) {\r\n    var items = [],\r\n      index = 0,\r\n      $target,\r\n      value,\r\n      instance;\r\n\r\n    // Avoid opening multiple times\r\n    if (e && e.isDefaultPrevented()) {\r\n      return;\r\n    }\r\n\r\n    e.preventDefault();\r\n\r\n    opts = opts || {};\r\n\r\n    if (e && e.data) {\r\n      opts = mergeOpts(e.data.options, opts);\r\n    }\r\n\r\n    $target = opts.$target || $(e.currentTarget).trigger(\"blur\");\r\n    instance = $.fancybox.getInstance();\r\n\r\n    if (instance && instance.$trigger && instance.$trigger.is($target)) {\r\n      return;\r\n    }\r\n\r\n    if (opts.selector) {\r\n      items = $(opts.selector);\r\n    } else {\r\n      // Get all related items and find index for clicked one\r\n      value = $target.attr(\"data-fancybox\") || \"\";\r\n\r\n      if (value) {\r\n        items = e.data ? e.data.items : [];\r\n        items = items.length ? items.filter('[data-fancybox=\"' + value + '\"]') : $('[data-fancybox=\"' + value + '\"]');\r\n      } else {\r\n        items = [$target];\r\n      }\r\n    }\r\n\r\n    index = $(items).index($target);\r\n\r\n    // Sometimes current item can not be found\r\n    if (index < 0) {\r\n      index = 0;\r\n    }\r\n\r\n    instance = $.fancybox.open(items, opts, index);\r\n\r\n    // Save last active element\r\n    instance.$trigger = $target;\r\n  }\r\n\r\n  // Create a jQuery plugin\r\n  // ======================\r\n\r\n  $.fn.fancybox = function(options) {\r\n    var selector;\r\n\r\n    options = options || {};\r\n    selector = options.selector || false;\r\n\r\n    if (selector) {\r\n      // Use body element instead of document so it executes first\r\n      $(\"body\")\r\n        .off(\"click.fb-start\", selector)\r\n        .on(\"click.fb-start\", selector, {options: options}, _run);\r\n    } else {\r\n      this.off(\"click.fb-start\").on(\r\n        \"click.fb-start\",\r\n        {\r\n          items: this,\r\n          options: options\r\n        },\r\n        _run\r\n      );\r\n    }\r\n\r\n    return this;\r\n  };\r\n\r\n  // Self initializing plugin for all elements having `data-fancybox` attribute\r\n  // ==========================================================================\r\n\r\n  $D.on(\"click.fb-start\", \"[data-fancybox]\", _run);\r\n\r\n  // Enable \"trigger elements\"\r\n  // =========================\r\n\r\n  $D.on(\"click.fb-start\", \"[data-fancybox-trigger]\", function(e) {\r\n    $('[data-fancybox=\"' + $(this).attr(\"data-fancybox-trigger\") + '\"]')\r\n      .eq($(this).attr(\"data-fancybox-index\") || 0)\r\n      .trigger(\"click.fb-start\", {\r\n        $trigger: $(this)\r\n      });\r\n  });\r\n\r\n  // Track focus event for better accessibility styling\r\n  // ==================================================\r\n  (function() {\r\n    var buttonStr = \".fancybox-button\",\r\n      focusStr = \"fancybox-focus\",\r\n      $pressed = null;\r\n\r\n    $D.on(\"mousedown mouseup focus blur\", buttonStr, function(e) {\r\n      switch (e.type) {\r\n        case \"mousedown\":\r\n          $pressed = $(this);\r\n          break;\r\n        case \"mouseup\":\r\n          $pressed = null;\r\n          break;\r\n        case \"focusin\":\r\n          $(buttonStr).removeClass(focusStr);\r\n\r\n          if (!$(this).is($pressed) && !$(this).is(\"[disabled]\")) {\r\n            $(this).addClass(focusStr);\r\n          }\r\n          break;\r\n        case \"focusout\":\r\n          $(buttonStr).removeClass(focusStr);\r\n          break;\r\n      }\r\n    });\r\n  })();\r\n})(window, document, jQuery);\r\n\n// ==========================================================================\r\n//\r\n// Media\r\n// Adds additional media type support\r\n//\r\n// ==========================================================================\r\n(function($) {\r\n  \"use strict\";\r\n\r\n  // Object containing properties for each media type\r\n  var defaults = {\r\n    youtube: {\r\n      matcher: /(youtube\\.com|youtu\\.be|youtube\\-nocookie\\.com)\\/(watch\\?(.*&)?v=|v\\/|u\\/|embed\\/?)?(videoseries\\?list=(.*)|[\\w-]{11}|\\?listType=(.*)&list=(.*))(.*)/i,\r\n      params: {\r\n        autoplay: 1,\r\n        autohide: 1,\r\n        fs: 1,\r\n        rel: 0,\r\n        hd: 1,\r\n        wmode: \"transparent\",\r\n        enablejsapi: 1,\r\n        html5: 1\r\n      },\r\n      paramPlace: 8,\r\n      type: \"iframe\",\r\n      url: \"//www.youtube-nocookie.com/embed/$4\",\r\n      thumb: \"//img.youtube.com/vi/$4/hqdefault.jpg\"\r\n    },\r\n\r\n    vimeo: {\r\n      matcher: /^.+vimeo.com\\/(.*\\/)?([\\d]+)(.*)?/,\r\n      params: {\r\n        autoplay: 1,\r\n        hd: 1,\r\n        show_title: 1,\r\n        show_byline: 1,\r\n        show_portrait: 0,\r\n        fullscreen: 1\r\n      },\r\n      paramPlace: 3,\r\n      type: \"iframe\",\r\n      url: \"//player.vimeo.com/video/$2\"\r\n    },\r\n\r\n    instagram: {\r\n      matcher: /(instagr\\.am|instagram\\.com)\\/p\\/([a-zA-Z0-9_\\-]+)\\/?/i,\r\n      type: \"image\",\r\n      url: \"//$1/p/$2/media/?size=l\"\r\n    },\r\n\r\n    // Examples:\r\n    // http://maps.google.com/?ll=48.857995,2.294297&spn=0.007666,0.021136&t=m&z=16\r\n    // https://www.google.com/maps/@37.7852006,-122.4146355,14.65z\r\n    // https://www.google.com/maps/@52.2111123,2.9237542,6.61z?hl=en\r\n    // https://www.google.com/maps/place/Googleplex/@37.4220041,-122.0833494,17z/data=!4m5!3m4!1s0x0:0x6c296c66619367e0!8m2!3d37.4219998!4d-122.0840572\r\n    gmap_place: {\r\n      matcher: /(maps\\.)?google\\.([a-z]{2,3}(\\.[a-z]{2})?)\\/(((maps\\/(place\\/(.*)\\/)?\\@(.*),(\\d+.?\\d+?)z))|(\\?ll=))(.*)?/i,\r\n      type: \"iframe\",\r\n      url: function(rez) {\r\n        return (\r\n          \"//maps.google.\" +\r\n          rez[2] +\r\n          \"/?ll=\" +\r\n          (rez[9] ? rez[9] + \"&z=\" + Math.floor(rez[10]) + (rez[12] ? rez[12].replace(/^\\//, \"&\") : \"\") : rez[12] + \"\").replace(/\\?/, \"&\") +\r\n          \"&output=\" +\r\n          (rez[12] && rez[12].indexOf(\"layer=c\") > 0 ? \"svembed\" : \"embed\")\r\n        );\r\n      }\r\n    },\r\n\r\n    // Examples:\r\n    // https://www.google.com/maps/search/Empire+State+Building/\r\n    // https://www.google.com/maps/search/?api=1&query=centurylink+field\r\n    // https://www.google.com/maps/search/?api=1&query=47.5951518,-122.3316393\r\n    gmap_search: {\r\n      matcher: /(maps\\.)?google\\.([a-z]{2,3}(\\.[a-z]{2})?)\\/(maps\\/search\\/)(.*)/i,\r\n      type: \"iframe\",\r\n      url: function(rez) {\r\n        return \"//maps.google.\" + rez[2] + \"/maps?q=\" + rez[5].replace(\"query=\", \"q=\").replace(\"api=1\", \"\") + \"&output=embed\";\r\n      }\r\n    }\r\n  };\r\n\r\n  // Formats matching url to final form\r\n  var format = function(url, rez, params) {\r\n    if (!url) {\r\n      return;\r\n    }\r\n\r\n    params = params || \"\";\r\n\r\n    if ($.type(params) === \"object\") {\r\n      params = $.param(params, true);\r\n    }\r\n\r\n    $.each(rez, function(key, value) {\r\n      url = url.replace(\"$\" + key, value || \"\");\r\n    });\r\n\r\n    if (params.length) {\r\n      url += (url.indexOf(\"?\") > 0 ? \"&\" : \"?\") + params;\r\n    }\r\n\r\n    return url;\r\n  };\r\n\r\n  $(document).on(\"objectNeedsType.fb\", function(e, instance, item) {\r\n    var url = item.src || \"\",\r\n      type = false,\r\n      media,\r\n      thumb,\r\n      rez,\r\n      params,\r\n      urlParams,\r\n      paramObj,\r\n      provider;\r\n\r\n    media = $.extend(true, {}, defaults, item.opts.media);\r\n\r\n    // Look for any matching media type\r\n    $.each(media, function(providerName, providerOpts) {\r\n      rez = url.match(providerOpts.matcher);\r\n\r\n      if (!rez) {\r\n        return;\r\n      }\r\n\r\n      type = providerOpts.type;\r\n      provider = providerName;\r\n      paramObj = {};\r\n\r\n      if (providerOpts.paramPlace && rez[providerOpts.paramPlace]) {\r\n        urlParams = rez[providerOpts.paramPlace];\r\n\r\n        if (urlParams[0] == \"?\") {\r\n          urlParams = urlParams.substring(1);\r\n        }\r\n\r\n        urlParams = urlParams.split(\"&\");\r\n\r\n        for (var m = 0; m < urlParams.length; ++m) {\r\n          var p = urlParams[m].split(\"=\", 2);\r\n\r\n          if (p.length == 2) {\r\n            paramObj[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\r\n          }\r\n        }\r\n      }\r\n\r\n      params = $.extend(true, {}, providerOpts.params, item.opts[providerName], paramObj);\r\n\r\n      url =\r\n        $.type(providerOpts.url) === \"function\" ? providerOpts.url.call(this, rez, params, item) : format(providerOpts.url, rez, params);\r\n\r\n      thumb =\r\n        $.type(providerOpts.thumb) === \"function\" ? providerOpts.thumb.call(this, rez, params, item) : format(providerOpts.thumb, rez);\r\n\r\n      if (providerName === \"youtube\") {\r\n        url = url.replace(/&t=((\\d+)m)?(\\d+)s/, function(match, p1, m, s) {\r\n          return \"&start=\" + ((m ? parseInt(m, 10) * 60 : 0) + parseInt(s, 10));\r\n        });\r\n      } else if (providerName === \"vimeo\") {\r\n        url = url.replace(\"&%23\", \"#\");\r\n      }\r\n\r\n      return false;\r\n    });\r\n\r\n    // If it is found, then change content type and update the url\r\n\r\n    if (type) {\r\n      if (!item.opts.thumb && !(item.opts.$thumb && item.opts.$thumb.length)) {\r\n        item.opts.thumb = thumb;\r\n      }\r\n\r\n      if (type === \"iframe\") {\r\n        item.opts = $.extend(true, item.opts, {\r\n          iframe: {\r\n            preload: false,\r\n            attr: {\r\n              scrolling: \"no\"\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      $.extend(item, {\r\n        type: type,\r\n        src: url,\r\n        origSrc: item.src,\r\n        contentSource: provider,\r\n        contentType: type === \"image\" ? \"image\" : provider == \"gmap_place\" || provider == \"gmap_search\" ? \"map\" : \"video\"\r\n      });\r\n    } else if (url) {\r\n      item.type = item.opts.defaultType;\r\n    }\r\n  });\r\n\r\n  // Load YouTube/Video API on request to detect when video finished playing\r\n  var VideoAPILoader = {\r\n    youtube: {\r\n      src: \"https://www.youtube.com/iframe_api\",\r\n      class: \"YT\",\r\n      loading: false,\r\n      loaded: false\r\n    },\r\n\r\n    vimeo: {\r\n      src: \"https://player.vimeo.com/api/player.js\",\r\n      class: \"Vimeo\",\r\n      loading: false,\r\n      loaded: false\r\n    },\r\n\r\n    load: function(vendor) {\r\n      var _this = this,\r\n        script;\r\n\r\n      if (this[vendor].loaded) {\r\n        setTimeout(function() {\r\n          _this.done(vendor);\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (this[vendor].loading) {\r\n        return;\r\n      }\r\n\r\n      this[vendor].loading = true;\r\n\r\n      script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src = this[vendor].src;\r\n\r\n      if (vendor === \"youtube\") {\r\n        window.onYouTubeIframeAPIReady = function() {\r\n          _this[vendor].loaded = true;\r\n          _this.done(vendor);\r\n        };\r\n      } else {\r\n        script.onload = function() {\r\n          _this[vendor].loaded = true;\r\n          _this.done(vendor);\r\n        };\r\n      }\r\n\r\n      document.body.appendChild(script);\r\n    },\r\n    done: function(vendor) {\r\n      var instance, $el, player;\r\n\r\n      if (vendor === \"youtube\") {\r\n        delete window.onYouTubeIframeAPIReady;\r\n      }\r\n\r\n      instance = $.fancybox.getInstance();\r\n\r\n      if (instance) {\r\n        $el = instance.current.$content.find(\"iframe\");\r\n\r\n        if (vendor === \"youtube\" && YT !== undefined && YT) {\r\n          player = new YT.Player($el.attr(\"id\"), {\r\n            events: {\r\n              onStateChange: function(e) {\r\n                if (e.data == 0) {\r\n                  instance.next();\r\n                }\r\n              }\r\n            }\r\n          });\r\n        } else if (vendor === \"vimeo\" && Vimeo !== undefined && Vimeo) {\r\n          player = new Vimeo.Player($el);\r\n\r\n          player.on(\"ended\", function() {\r\n            instance.next();\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  $(document).on({\r\n    \"afterShow.fb\": function(e, instance, current) {\r\n      if (instance.group.length > 1 && (current.contentSource === \"youtube\" || current.contentSource === \"vimeo\")) {\r\n        VideoAPILoader.load(current.contentSource);\r\n      }\r\n    }\r\n  });\r\n})(jQuery);\r\n\n// ==========================================================================\r\n//\r\n// Guestures\r\n// Adds touch guestures, handles click and tap events\r\n//\r\n// ==========================================================================\r\n(function(window, document, $) {\r\n  \"use strict\";\r\n\r\n  var requestAFrame = (function() {\r\n    return (\r\n      window.requestAnimationFrame ||\r\n      window.webkitRequestAnimationFrame ||\r\n      window.mozRequestAnimationFrame ||\r\n      window.oRequestAnimationFrame ||\r\n      // if all else fails, use setTimeout\r\n      function(callback) {\r\n        return window.setTimeout(callback, 1000 / 60);\r\n      }\r\n    );\r\n  })();\r\n\r\n  var cancelAFrame = (function() {\r\n    return (\r\n      window.cancelAnimationFrame ||\r\n      window.webkitCancelAnimationFrame ||\r\n      window.mozCancelAnimationFrame ||\r\n      window.oCancelAnimationFrame ||\r\n      function(id) {\r\n        window.clearTimeout(id);\r\n      }\r\n    );\r\n  })();\r\n\r\n  var getPointerXY = function(e) {\r\n    var result = [];\r\n\r\n    e = e.originalEvent || e || window.e;\r\n    e = e.touches && e.touches.length ? e.touches : e.changedTouches && e.changedTouches.length ? e.changedTouches : [e];\r\n\r\n    for (var key in e) {\r\n      if (e[key].pageX) {\r\n        result.push({\r\n          x: e[key].pageX,\r\n          y: e[key].pageY\r\n        });\r\n      } else if (e[key].clientX) {\r\n        result.push({\r\n          x: e[key].clientX,\r\n          y: e[key].clientY\r\n        });\r\n      }\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  var distance = function(point2, point1, what) {\r\n    if (!point1 || !point2) {\r\n      return 0;\r\n    }\r\n\r\n    if (what === \"x\") {\r\n      return point2.x - point1.x;\r\n    } else if (what === \"y\") {\r\n      return point2.y - point1.y;\r\n    }\r\n\r\n    return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));\r\n  };\r\n\r\n  var isClickable = function($el) {\r\n    if (\r\n      $el.is('a,area,button,[role=\"button\"],input,label,select,summary,textarea,video,audio,iframe') ||\r\n      $.isFunction($el.get(0).onclick) ||\r\n      $el.data(\"selectable\")\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    // Check for attributes like data-fancybox-next or data-fancybox-close\r\n    for (var i = 0, atts = $el[0].attributes, n = atts.length; i < n; i++) {\r\n      if (atts[i].nodeName.substr(0, 14) === \"data-fancybox-\") {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  var hasScrollbars = function(el) {\r\n    var overflowY = window.getComputedStyle(el)[\"overflow-y\"],\r\n      overflowX = window.getComputedStyle(el)[\"overflow-x\"],\r\n      vertical = (overflowY === \"scroll\" || overflowY === \"auto\") && el.scrollHeight > el.clientHeight,\r\n      horizontal = (overflowX === \"scroll\" || overflowX === \"auto\") && el.scrollWidth > el.clientWidth;\r\n\r\n    return vertical || horizontal;\r\n  };\r\n\r\n  var isScrollable = function($el) {\r\n    var rez = false;\r\n\r\n    while (true) {\r\n      rez = hasScrollbars($el.get(0));\r\n\r\n      if (rez) {\r\n        break;\r\n      }\r\n\r\n      $el = $el.parent();\r\n\r\n      if (!$el.length || $el.hasClass(\"fancybox-stage\") || $el.is(\"body\")) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return rez;\r\n  };\r\n\r\n  var Guestures = function(instance) {\r\n    var self = this;\r\n\r\n    self.instance = instance;\r\n\r\n    self.$bg = instance.$refs.bg;\r\n    self.$stage = instance.$refs.stage;\r\n    self.$container = instance.$refs.container;\r\n\r\n    self.destroy();\r\n\r\n    self.$container.on(\"touchstart.fb.touch mousedown.fb.touch\", $.proxy(self, \"ontouchstart\"));\r\n  };\r\n\r\n  Guestures.prototype.destroy = function() {\r\n    var self = this;\r\n\r\n    self.$container.off(\".fb.touch\");\r\n\r\n    $(document).off(\".fb.touch\");\r\n\r\n    if (self.requestId) {\r\n      cancelAFrame(self.requestId);\r\n      self.requestId = null;\r\n    }\r\n\r\n    if (self.tapped) {\r\n      clearTimeout(self.tapped);\r\n      self.tapped = null;\r\n    }\r\n  };\r\n\r\n  Guestures.prototype.ontouchstart = function(e) {\r\n    var self = this,\r\n      $target = $(e.target),\r\n      instance = self.instance,\r\n      current = instance.current,\r\n      $slide = current.$slide,\r\n      $content = current.$content,\r\n      isTouchDevice = e.type == \"touchstart\";\r\n\r\n    // Do not respond to both (touch and mouse) events\r\n    if (isTouchDevice) {\r\n      self.$container.off(\"mousedown.fb.touch\");\r\n    }\r\n\r\n    // Ignore right click\r\n    if (e.originalEvent && e.originalEvent.button == 2) {\r\n      return;\r\n    }\r\n\r\n    // Ignore taping on links, buttons, input elements\r\n    if (!$slide.length || !$target.length || isClickable($target) || isClickable($target.parent())) {\r\n      return;\r\n    }\r\n    // Ignore clicks on the scrollbar\r\n    if (!$target.is(\"img\") && e.originalEvent.clientX > $target[0].clientWidth + $target.offset().left) {\r\n      return;\r\n    }\r\n\r\n    // Ignore clicks while zooming or closing\r\n    if (!current || instance.isAnimating || current.$slide.hasClass(\"fancybox-animated\")) {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n\r\n      return;\r\n    }\r\n\r\n    self.realPoints = self.startPoints = getPointerXY(e);\r\n\r\n    if (!self.startPoints.length) {\r\n      return;\r\n    }\r\n\r\n    // Allow other scripts to catch touch event if \"touch\" is set to false\r\n    if (current.touch) {\r\n      e.stopPropagation();\r\n    }\r\n\r\n    self.startEvent = e;\r\n\r\n    self.canTap = true;\r\n    self.$target = $target;\r\n    self.$content = $content;\r\n    self.opts = current.opts.touch;\r\n\r\n    self.isPanning = false;\r\n    self.isSwiping = false;\r\n    self.isZooming = false;\r\n    self.isScrolling = false;\r\n    self.canPan = instance.canPan();\r\n\r\n    self.startTime = new Date().getTime();\r\n    self.distanceX = self.distanceY = self.distance = 0;\r\n\r\n    self.canvasWidth = Math.round($slide[0].clientWidth);\r\n    self.canvasHeight = Math.round($slide[0].clientHeight);\r\n\r\n    self.contentLastPos = null;\r\n    self.contentStartPos = $.fancybox.getTranslate(self.$content) || {top: 0, left: 0};\r\n    self.sliderStartPos = $.fancybox.getTranslate($slide);\r\n\r\n    // Since position will be absolute, but we need to make it relative to the stage\r\n    self.stagePos = $.fancybox.getTranslate(instance.$refs.stage);\r\n\r\n    self.sliderStartPos.top -= self.stagePos.top;\r\n    self.sliderStartPos.left -= self.stagePos.left;\r\n\r\n    self.contentStartPos.top -= self.stagePos.top;\r\n    self.contentStartPos.left -= self.stagePos.left;\r\n\r\n    $(document)\r\n      .off(\".fb.touch\")\r\n      .on(isTouchDevice ? \"touchend.fb.touch touchcancel.fb.touch\" : \"mouseup.fb.touch mouseleave.fb.touch\", $.proxy(self, \"ontouchend\"))\r\n      .on(isTouchDevice ? \"touchmove.fb.touch\" : \"mousemove.fb.touch\", $.proxy(self, \"ontouchmove\"));\r\n\r\n    if ($.fancybox.isMobile) {\r\n      document.addEventListener(\"scroll\", self.onscroll, true);\r\n    }\r\n\r\n    // Skip if clicked outside the sliding area\r\n    if (!(self.opts || self.canPan) || !($target.is(self.$stage) || self.$stage.find($target).length)) {\r\n      if ($target.is(\".fancybox-image\")) {\r\n        e.preventDefault();\r\n      }\r\n\r\n      if (!($.fancybox.isMobile && $target.hasClass(\"fancybox-caption\"))) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    self.isScrollable = isScrollable($target) || isScrollable($target.parent());\r\n\r\n    // Check if element is scrollable and try to prevent default behavior (scrolling)\r\n    if (!($.fancybox.isMobile && self.isScrollable)) {\r\n      e.preventDefault();\r\n    }\r\n\r\n    // One finger or mouse click - swipe or pan an image\r\n    if (self.startPoints.length === 1 || current.hasError) {\r\n      if (self.canPan) {\r\n        $.fancybox.stop(self.$content);\r\n\r\n        self.isPanning = true;\r\n      } else {\r\n        self.isSwiping = true;\r\n      }\r\n\r\n      self.$container.addClass(\"fancybox-is-grabbing\");\r\n    }\r\n\r\n    // Two fingers - zoom image\r\n    if (self.startPoints.length === 2 && current.type === \"image\" && (current.isLoaded || current.$ghost)) {\r\n      self.canTap = false;\r\n      self.isSwiping = false;\r\n      self.isPanning = false;\r\n\r\n      self.isZooming = true;\r\n\r\n      $.fancybox.stop(self.$content);\r\n\r\n      self.centerPointStartX = (self.startPoints[0].x + self.startPoints[1].x) * 0.5 - $(window).scrollLeft();\r\n      self.centerPointStartY = (self.startPoints[0].y + self.startPoints[1].y) * 0.5 - $(window).scrollTop();\r\n\r\n      self.percentageOfImageAtPinchPointX = (self.centerPointStartX - self.contentStartPos.left) / self.contentStartPos.width;\r\n      self.percentageOfImageAtPinchPointY = (self.centerPointStartY - self.contentStartPos.top) / self.contentStartPos.height;\r\n\r\n      self.startDistanceBetweenFingers = distance(self.startPoints[0], self.startPoints[1]);\r\n    }\r\n  };\r\n\r\n  Guestures.prototype.onscroll = function(e) {\r\n    var self = this;\r\n\r\n    self.isScrolling = true;\r\n\r\n    document.removeEventListener(\"scroll\", self.onscroll, true);\r\n  };\r\n\r\n  Guestures.prototype.ontouchmove = function(e) {\r\n    var self = this;\r\n\r\n    // Make sure user has not released over iframe or disabled element\r\n    if (e.originalEvent.buttons !== undefined && e.originalEvent.buttons === 0) {\r\n      self.ontouchend(e);\r\n      return;\r\n    }\r\n\r\n    if (self.isScrolling) {\r\n      self.canTap = false;\r\n      return;\r\n    }\r\n\r\n    self.newPoints = getPointerXY(e);\r\n\r\n    if (!(self.opts || self.canPan) || !self.newPoints.length || !self.newPoints.length) {\r\n      return;\r\n    }\r\n\r\n    if (!(self.isSwiping && self.isSwiping === true)) {\r\n      e.preventDefault();\r\n    }\r\n\r\n    self.distanceX = distance(self.newPoints[0], self.startPoints[0], \"x\");\r\n    self.distanceY = distance(self.newPoints[0], self.startPoints[0], \"y\");\r\n\r\n    self.distance = distance(self.newPoints[0], self.startPoints[0]);\r\n\r\n    // Skip false ontouchmove events (Chrome)\r\n    if (self.distance > 0) {\r\n      if (self.isSwiping) {\r\n        self.onSwipe(e);\r\n      } else if (self.isPanning) {\r\n        self.onPan();\r\n      } else if (self.isZooming) {\r\n        self.onZoom();\r\n      }\r\n    }\r\n  };\r\n\r\n  Guestures.prototype.onSwipe = function(e) {\r\n    var self = this,\r\n      instance = self.instance,\r\n      swiping = self.isSwiping,\r\n      left = self.sliderStartPos.left || 0,\r\n      angle;\r\n\r\n    // If direction is not yet determined\r\n    if (swiping === true) {\r\n      // We need at least 10px distance to correctly calculate an angle\r\n      if (Math.abs(self.distance) > 10) {\r\n        self.canTap = false;\r\n\r\n        if (instance.group.length < 2 && self.opts.vertical) {\r\n          self.isSwiping = \"y\";\r\n        } else if (instance.isDragging || self.opts.vertical === false || (self.opts.vertical === \"auto\" && $(window).width() > 800)) {\r\n          self.isSwiping = \"x\";\r\n        } else {\r\n          angle = Math.abs((Math.atan2(self.distanceY, self.distanceX) * 180) / Math.PI);\r\n\r\n          self.isSwiping = angle > 45 && angle < 135 ? \"y\" : \"x\";\r\n        }\r\n\r\n        if (self.isSwiping === \"y\" && $.fancybox.isMobile && self.isScrollable) {\r\n          self.isScrolling = true;\r\n\r\n          return;\r\n        }\r\n\r\n        instance.isDragging = self.isSwiping;\r\n\r\n        // Reset points to avoid jumping, because we dropped first swipes to calculate the angle\r\n        self.startPoints = self.newPoints;\r\n\r\n        $.each(instance.slides, function(index, slide) {\r\n          var slidePos, stagePos;\r\n\r\n          $.fancybox.stop(slide.$slide);\r\n\r\n          slidePos = $.fancybox.getTranslate(slide.$slide);\r\n          stagePos = $.fancybox.getTranslate(instance.$refs.stage);\r\n\r\n          slide.$slide\r\n            .css({\r\n              transform: \"\",\r\n              opacity: \"\",\r\n              \"transition-duration\": \"\"\r\n            })\r\n            .removeClass(\"fancybox-animated\")\r\n            .removeClass(function(index, className) {\r\n              return (className.match(/(^|\\s)fancybox-fx-\\S+/g) || []).join(\" \");\r\n            });\r\n\r\n          if (slide.pos === instance.current.pos) {\r\n            self.sliderStartPos.top = slidePos.top - stagePos.top;\r\n            self.sliderStartPos.left = slidePos.left - stagePos.left;\r\n          }\r\n\r\n          $.fancybox.setTranslate(slide.$slide, {\r\n            top: slidePos.top - stagePos.top,\r\n            left: slidePos.left - stagePos.left\r\n          });\r\n        });\r\n\r\n        // Stop slideshow\r\n        if (instance.SlideShow && instance.SlideShow.isActive) {\r\n          instance.SlideShow.stop();\r\n        }\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    // Sticky edges\r\n    if (swiping == \"x\") {\r\n      if (\r\n        self.distanceX > 0 &&\r\n        (self.instance.group.length < 2 || (self.instance.current.index === 0 && !self.instance.current.opts.loop))\r\n      ) {\r\n        left = left + Math.pow(self.distanceX, 0.8);\r\n      } else if (\r\n        self.distanceX < 0 &&\r\n        (self.instance.group.length < 2 ||\r\n          (self.instance.current.index === self.instance.group.length - 1 && !self.instance.current.opts.loop))\r\n      ) {\r\n        left = left - Math.pow(-self.distanceX, 0.8);\r\n      } else {\r\n        left = left + self.distanceX;\r\n      }\r\n    }\r\n\r\n    self.sliderLastPos = {\r\n      top: swiping == \"x\" ? 0 : self.sliderStartPos.top + self.distanceY,\r\n      left: left\r\n    };\r\n\r\n    if (self.requestId) {\r\n      cancelAFrame(self.requestId);\r\n\r\n      self.requestId = null;\r\n    }\r\n\r\n    self.requestId = requestAFrame(function() {\r\n      if (self.sliderLastPos) {\r\n        $.each(self.instance.slides, function(index, slide) {\r\n          var pos = slide.pos - self.instance.currPos;\r\n\r\n          $.fancybox.setTranslate(slide.$slide, {\r\n            top: self.sliderLastPos.top,\r\n            left: self.sliderLastPos.left + pos * self.canvasWidth + pos * slide.opts.gutter\r\n          });\r\n        });\r\n\r\n        self.$container.addClass(\"fancybox-is-sliding\");\r\n      }\r\n    });\r\n  };\r\n\r\n  Guestures.prototype.onPan = function() {\r\n    var self = this;\r\n\r\n    // Prevent accidental movement (sometimes, when tapping casually, finger can move a bit)\r\n    if (distance(self.newPoints[0], self.realPoints[0]) < ($.fancybox.isMobile ? 10 : 5)) {\r\n      self.startPoints = self.newPoints;\r\n      return;\r\n    }\r\n\r\n    self.canTap = false;\r\n\r\n    self.contentLastPos = self.limitMovement();\r\n\r\n    if (self.requestId) {\r\n      cancelAFrame(self.requestId);\r\n    }\r\n\r\n    self.requestId = requestAFrame(function() {\r\n      $.fancybox.setTranslate(self.$content, self.contentLastPos);\r\n    });\r\n  };\r\n\r\n  // Make panning sticky to the edges\r\n  Guestures.prototype.limitMovement = function() {\r\n    var self = this;\r\n\r\n    var canvasWidth = self.canvasWidth;\r\n    var canvasHeight = self.canvasHeight;\r\n\r\n    var distanceX = self.distanceX;\r\n    var distanceY = self.distanceY;\r\n\r\n    var contentStartPos = self.contentStartPos;\r\n\r\n    var currentOffsetX = contentStartPos.left;\r\n    var currentOffsetY = contentStartPos.top;\r\n\r\n    var currentWidth = contentStartPos.width;\r\n    var currentHeight = contentStartPos.height;\r\n\r\n    var minTranslateX, minTranslateY, maxTranslateX, maxTranslateY, newOffsetX, newOffsetY;\r\n\r\n    if (currentWidth > canvasWidth) {\r\n      newOffsetX = currentOffsetX + distanceX;\r\n    } else {\r\n      newOffsetX = currentOffsetX;\r\n    }\r\n\r\n    newOffsetY = currentOffsetY + distanceY;\r\n\r\n    // Slow down proportionally to traveled distance\r\n    minTranslateX = Math.max(0, canvasWidth * 0.5 - currentWidth * 0.5);\r\n    minTranslateY = Math.max(0, canvasHeight * 0.5 - currentHeight * 0.5);\r\n\r\n    maxTranslateX = Math.min(canvasWidth - currentWidth, canvasWidth * 0.5 - currentWidth * 0.5);\r\n    maxTranslateY = Math.min(canvasHeight - currentHeight, canvasHeight * 0.5 - currentHeight * 0.5);\r\n\r\n    //   ->\r\n    if (distanceX > 0 && newOffsetX > minTranslateX) {\r\n      newOffsetX = minTranslateX - 1 + Math.pow(-minTranslateX + currentOffsetX + distanceX, 0.8) || 0;\r\n    }\r\n\r\n    //    <-\r\n    if (distanceX < 0 && newOffsetX < maxTranslateX) {\r\n      newOffsetX = maxTranslateX + 1 - Math.pow(maxTranslateX - currentOffsetX - distanceX, 0.8) || 0;\r\n    }\r\n\r\n    //   \\/\r\n    if (distanceY > 0 && newOffsetY > minTranslateY) {\r\n      newOffsetY = minTranslateY - 1 + Math.pow(-minTranslateY + currentOffsetY + distanceY, 0.8) || 0;\r\n    }\r\n\r\n    //   /\\\r\n    if (distanceY < 0 && newOffsetY < maxTranslateY) {\r\n      newOffsetY = maxTranslateY + 1 - Math.pow(maxTranslateY - currentOffsetY - distanceY, 0.8) || 0;\r\n    }\r\n\r\n    return {\r\n      top: newOffsetY,\r\n      left: newOffsetX\r\n    };\r\n  };\r\n\r\n  Guestures.prototype.limitPosition = function(newOffsetX, newOffsetY, newWidth, newHeight) {\r\n    var self = this;\r\n\r\n    var canvasWidth = self.canvasWidth;\r\n    var canvasHeight = self.canvasHeight;\r\n\r\n    if (newWidth > canvasWidth) {\r\n      newOffsetX = newOffsetX > 0 ? 0 : newOffsetX;\r\n      newOffsetX = newOffsetX < canvasWidth - newWidth ? canvasWidth - newWidth : newOffsetX;\r\n    } else {\r\n      // Center horizontally\r\n      newOffsetX = Math.max(0, canvasWidth / 2 - newWidth / 2);\r\n    }\r\n\r\n    if (newHeight > canvasHeight) {\r\n      newOffsetY = newOffsetY > 0 ? 0 : newOffsetY;\r\n      newOffsetY = newOffsetY < canvasHeight - newHeight ? canvasHeight - newHeight : newOffsetY;\r\n    } else {\r\n      // Center vertically\r\n      newOffsetY = Math.max(0, canvasHeight / 2 - newHeight / 2);\r\n    }\r\n\r\n    return {\r\n      top: newOffsetY,\r\n      left: newOffsetX\r\n    };\r\n  };\r\n\r\n  Guestures.prototype.onZoom = function() {\r\n    var self = this;\r\n\r\n    // Calculate current distance between points to get pinch ratio and new width and height\r\n    var contentStartPos = self.contentStartPos;\r\n\r\n    var currentWidth = contentStartPos.width;\r\n    var currentHeight = contentStartPos.height;\r\n\r\n    var currentOffsetX = contentStartPos.left;\r\n    var currentOffsetY = contentStartPos.top;\r\n\r\n    var endDistanceBetweenFingers = distance(self.newPoints[0], self.newPoints[1]);\r\n\r\n    var pinchRatio = endDistanceBetweenFingers / self.startDistanceBetweenFingers;\r\n\r\n    var newWidth = Math.floor(currentWidth * pinchRatio);\r\n    var newHeight = Math.floor(currentHeight * pinchRatio);\r\n\r\n    // This is the translation due to pinch-zooming\r\n    var translateFromZoomingX = (currentWidth - newWidth) * self.percentageOfImageAtPinchPointX;\r\n    var translateFromZoomingY = (currentHeight - newHeight) * self.percentageOfImageAtPinchPointY;\r\n\r\n    // Point between the two touches\r\n    var centerPointEndX = (self.newPoints[0].x + self.newPoints[1].x) / 2 - $(window).scrollLeft();\r\n    var centerPointEndY = (self.newPoints[0].y + self.newPoints[1].y) / 2 - $(window).scrollTop();\r\n\r\n    // And this is the translation due to translation of the centerpoint\r\n    // between the two fingers\r\n    var translateFromTranslatingX = centerPointEndX - self.centerPointStartX;\r\n    var translateFromTranslatingY = centerPointEndY - self.centerPointStartY;\r\n\r\n    // The new offset is the old/current one plus the total translation\r\n    var newOffsetX = currentOffsetX + (translateFromZoomingX + translateFromTranslatingX);\r\n    var newOffsetY = currentOffsetY + (translateFromZoomingY + translateFromTranslatingY);\r\n\r\n    var newPos = {\r\n      top: newOffsetY,\r\n      left: newOffsetX,\r\n      scaleX: pinchRatio,\r\n      scaleY: pinchRatio\r\n    };\r\n\r\n    self.canTap = false;\r\n\r\n    self.newWidth = newWidth;\r\n    self.newHeight = newHeight;\r\n\r\n    self.contentLastPos = newPos;\r\n\r\n    if (self.requestId) {\r\n      cancelAFrame(self.requestId);\r\n    }\r\n\r\n    self.requestId = requestAFrame(function() {\r\n      $.fancybox.setTranslate(self.$content, self.contentLastPos);\r\n    });\r\n  };\r\n\r\n  Guestures.prototype.ontouchend = function(e) {\r\n    var self = this;\r\n\r\n    var swiping = self.isSwiping;\r\n    var panning = self.isPanning;\r\n    var zooming = self.isZooming;\r\n    var scrolling = self.isScrolling;\r\n\r\n    self.endPoints = getPointerXY(e);\r\n    self.dMs = Math.max(new Date().getTime() - self.startTime, 1);\r\n\r\n    self.$container.removeClass(\"fancybox-is-grabbing\");\r\n\r\n    $(document).off(\".fb.touch\");\r\n\r\n    document.removeEventListener(\"scroll\", self.onscroll, true);\r\n\r\n    if (self.requestId) {\r\n      cancelAFrame(self.requestId);\r\n\r\n      self.requestId = null;\r\n    }\r\n\r\n    self.isSwiping = false;\r\n    self.isPanning = false;\r\n    self.isZooming = false;\r\n    self.isScrolling = false;\r\n\r\n    self.instance.isDragging = false;\r\n\r\n    if (self.canTap) {\r\n      return self.onTap(e);\r\n    }\r\n\r\n    self.speed = 100;\r\n\r\n    // Speed in px/ms\r\n    self.velocityX = (self.distanceX / self.dMs) * 0.5;\r\n    self.velocityY = (self.distanceY / self.dMs) * 0.5;\r\n\r\n    if (panning) {\r\n      self.endPanning();\r\n    } else if (zooming) {\r\n      self.endZooming();\r\n    } else {\r\n      self.endSwiping(swiping, scrolling);\r\n    }\r\n\r\n    return;\r\n  };\r\n\r\n  Guestures.prototype.endSwiping = function(swiping, scrolling) {\r\n    var self = this,\r\n      ret = false,\r\n      len = self.instance.group.length,\r\n      distanceX = Math.abs(self.distanceX),\r\n      canAdvance = swiping == \"x\" && len > 1 && ((self.dMs > 130 && distanceX > 10) || distanceX > 50),\r\n      speedX = 300;\r\n\r\n    self.sliderLastPos = null;\r\n\r\n    // Close if swiped vertically / navigate if horizontally\r\n    if (swiping == \"y\" && !scrolling && Math.abs(self.distanceY) > 50) {\r\n      // Continue vertical movement\r\n      $.fancybox.animate(\r\n        self.instance.current.$slide,\r\n        {\r\n          top: self.sliderStartPos.top + self.distanceY + self.velocityY * 150,\r\n          opacity: 0\r\n        },\r\n        200\r\n      );\r\n      ret = self.instance.close(true, 250);\r\n    } else if (canAdvance && self.distanceX > 0) {\r\n      ret = self.instance.previous(speedX);\r\n    } else if (canAdvance && self.distanceX < 0) {\r\n      ret = self.instance.next(speedX);\r\n    }\r\n\r\n    if (ret === false && (swiping == \"x\" || swiping == \"y\")) {\r\n      self.instance.centerSlide(200);\r\n    }\r\n\r\n    self.$container.removeClass(\"fancybox-is-sliding\");\r\n  };\r\n\r\n  // Limit panning from edges\r\n  // ========================\r\n  Guestures.prototype.endPanning = function() {\r\n    var self = this,\r\n      newOffsetX,\r\n      newOffsetY,\r\n      newPos;\r\n\r\n    if (!self.contentLastPos) {\r\n      return;\r\n    }\r\n\r\n    if (self.opts.momentum === false || self.dMs > 350) {\r\n      newOffsetX = self.contentLastPos.left;\r\n      newOffsetY = self.contentLastPos.top;\r\n    } else {\r\n      // Continue movement\r\n      newOffsetX = self.contentLastPos.left + self.velocityX * 500;\r\n      newOffsetY = self.contentLastPos.top + self.velocityY * 500;\r\n    }\r\n\r\n    newPos = self.limitPosition(newOffsetX, newOffsetY, self.contentStartPos.width, self.contentStartPos.height);\r\n\r\n    newPos.width = self.contentStartPos.width;\r\n    newPos.height = self.contentStartPos.height;\r\n\r\n    $.fancybox.animate(self.$content, newPos, 330);\r\n  };\r\n\r\n  Guestures.prototype.endZooming = function() {\r\n    var self = this;\r\n\r\n    var current = self.instance.current;\r\n\r\n    var newOffsetX, newOffsetY, newPos, reset;\r\n\r\n    var newWidth = self.newWidth;\r\n    var newHeight = self.newHeight;\r\n\r\n    if (!self.contentLastPos) {\r\n      return;\r\n    }\r\n\r\n    newOffsetX = self.contentLastPos.left;\r\n    newOffsetY = self.contentLastPos.top;\r\n\r\n    reset = {\r\n      top: newOffsetY,\r\n      left: newOffsetX,\r\n      width: newWidth,\r\n      height: newHeight,\r\n      scaleX: 1,\r\n      scaleY: 1\r\n    };\r\n\r\n    // Reset scalex/scaleY values; this helps for perfomance and does not break animation\r\n    $.fancybox.setTranslate(self.$content, reset);\r\n\r\n    if (newWidth < self.canvasWidth && newHeight < self.canvasHeight) {\r\n      self.instance.scaleToFit(150);\r\n    } else if (newWidth > current.width || newHeight > current.height) {\r\n      self.instance.scaleToActual(self.centerPointStartX, self.centerPointStartY, 150);\r\n    } else {\r\n      newPos = self.limitPosition(newOffsetX, newOffsetY, newWidth, newHeight);\r\n\r\n      $.fancybox.animate(self.$content, newPos, 150);\r\n    }\r\n  };\r\n\r\n  Guestures.prototype.onTap = function(e) {\r\n    var self = this;\r\n    var $target = $(e.target);\r\n\r\n    var instance = self.instance;\r\n    var current = instance.current;\r\n\r\n    var endPoints = (e && getPointerXY(e)) || self.startPoints;\r\n\r\n    var tapX = endPoints[0] ? endPoints[0].x - $(window).scrollLeft() - self.stagePos.left : 0;\r\n    var tapY = endPoints[0] ? endPoints[0].y - $(window).scrollTop() - self.stagePos.top : 0;\r\n\r\n    var where;\r\n\r\n    var process = function(prefix) {\r\n      var action = current.opts[prefix];\r\n\r\n      if ($.isFunction(action)) {\r\n        action = action.apply(instance, [current, e]);\r\n      }\r\n\r\n      if (!action) {\r\n        return;\r\n      }\r\n\r\n      switch (action) {\r\n        case \"close\":\r\n          instance.close(self.startEvent);\r\n\r\n          break;\r\n\r\n        case \"toggleControls\":\r\n          instance.toggleControls();\r\n\r\n          break;\r\n\r\n        case \"next\":\r\n          instance.next();\r\n\r\n          break;\r\n\r\n        case \"nextOrClose\":\r\n          if (instance.group.length > 1) {\r\n            instance.next();\r\n          } else {\r\n            instance.close(self.startEvent);\r\n          }\r\n\r\n          break;\r\n\r\n        case \"zoom\":\r\n          if (current.type == \"image\" && (current.isLoaded || current.$ghost)) {\r\n            if (instance.canPan()) {\r\n              instance.scaleToFit();\r\n            } else if (instance.isScaledDown()) {\r\n              instance.scaleToActual(tapX, tapY);\r\n            } else if (instance.group.length < 2) {\r\n              instance.close(self.startEvent);\r\n            }\r\n          }\r\n\r\n          break;\r\n      }\r\n    };\r\n\r\n    // Ignore right click\r\n    if (e.originalEvent && e.originalEvent.button == 2) {\r\n      return;\r\n    }\r\n\r\n    // Skip if clicked on the scrollbar\r\n    if (!$target.is(\"img\") && tapX > $target[0].clientWidth + $target.offset().left) {\r\n      return;\r\n    }\r\n\r\n    // Check where is clicked\r\n    if ($target.is(\".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container\")) {\r\n      where = \"Outside\";\r\n    } else if ($target.is(\".fancybox-slide\")) {\r\n      where = \"Slide\";\r\n    } else if (\r\n      instance.current.$content &&\r\n      instance.current.$content\r\n        .find($target)\r\n        .addBack()\r\n        .filter($target).length\r\n    ) {\r\n      where = \"Content\";\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    // Check if this is a double tap\r\n    if (self.tapped) {\r\n      // Stop previously created single tap\r\n      clearTimeout(self.tapped);\r\n      self.tapped = null;\r\n\r\n      // Skip if distance between taps is too big\r\n      if (Math.abs(tapX - self.tapX) > 50 || Math.abs(tapY - self.tapY) > 50) {\r\n        return this;\r\n      }\r\n\r\n      // OK, now we assume that this is a double-tap\r\n      process(\"dblclick\" + where);\r\n    } else {\r\n      // Single tap will be processed if user has not clicked second time within 300ms\r\n      // or there is no need to wait for double-tap\r\n      self.tapX = tapX;\r\n      self.tapY = tapY;\r\n\r\n      if (current.opts[\"dblclick\" + where] && current.opts[\"dblclick\" + where] !== current.opts[\"click\" + where]) {\r\n        self.tapped = setTimeout(function() {\r\n          self.tapped = null;\r\n\r\n          if (!instance.isAnimating) {\r\n            process(\"click\" + where);\r\n          }\r\n        }, 500);\r\n      } else {\r\n        process(\"click\" + where);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  };\r\n\r\n  $(document)\r\n    .on(\"onActivate.fb\", function(e, instance) {\r\n      if (instance && !instance.Guestures) {\r\n        instance.Guestures = new Guestures(instance);\r\n      }\r\n    })\r\n    .on(\"beforeClose.fb\", function(e, instance) {\r\n      if (instance && instance.Guestures) {\r\n        instance.Guestures.destroy();\r\n      }\r\n    });\r\n})(window, document, jQuery);\r\n\n// ==========================================================================\r\n//\r\n// SlideShow\r\n// Enables slideshow functionality\r\n//\r\n// Example of usage:\r\n// $.fancybox.getInstance().SlideShow.start()\r\n//\r\n// ==========================================================================\r\n(function(document, $) {\r\n  \"use strict\";\r\n\r\n  $.extend(true, $.fancybox.defaults, {\r\n    btnTpl: {\r\n      slideShow:\r\n        '<button data-fancybox-play class=\"fancybox-button fancybox-button--play\" title=\"{{PLAY_START}}\">' +\r\n        '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M6.5 5.4v13.2l11-6.6z\"/></svg>' +\r\n        '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z\"/></svg>' +\r\n        \"</button>\"\r\n    },\r\n    slideShow: {\r\n      autoStart: false,\r\n      speed: 3000,\r\n      progress: true\r\n    }\r\n  });\r\n\r\n  var SlideShow = function(instance) {\r\n    this.instance = instance;\r\n    this.init();\r\n  };\r\n\r\n  $.extend(SlideShow.prototype, {\r\n    timer: null,\r\n    isActive: false,\r\n    $button: null,\r\n\r\n    init: function() {\r\n      var self = this,\r\n        instance = self.instance,\r\n        opts = instance.group[instance.currIndex].opts.slideShow;\r\n\r\n      self.$button = instance.$refs.toolbar.find(\"[data-fancybox-play]\").on(\"click\", function() {\r\n        self.toggle();\r\n      });\r\n\r\n      if (instance.group.length < 2 || !opts) {\r\n        self.$button.hide();\r\n      } else if (opts.progress) {\r\n        self.$progress = $('<div class=\"fancybox-progress\"></div>').appendTo(instance.$refs.inner);\r\n      }\r\n    },\r\n\r\n    set: function(force) {\r\n      var self = this,\r\n        instance = self.instance,\r\n        current = instance.current;\r\n\r\n      // Check if reached last element\r\n      if (current && (force === true || current.opts.loop || instance.currIndex < instance.group.length - 1)) {\r\n        if (self.isActive && current.contentType !== \"video\") {\r\n          if (self.$progress) {\r\n            $.fancybox.animate(self.$progress.show(), {scaleX: 1}, current.opts.slideShow.speed);\r\n          }\r\n\r\n          self.timer = setTimeout(function() {\r\n            if (!instance.current.opts.loop && instance.current.index == instance.group.length - 1) {\r\n              instance.jumpTo(0);\r\n            } else {\r\n              instance.next();\r\n            }\r\n          }, current.opts.slideShow.speed);\r\n        }\r\n      } else {\r\n        self.stop();\r\n        instance.idleSecondsCounter = 0;\r\n        instance.showControls();\r\n      }\r\n    },\r\n\r\n    clear: function() {\r\n      var self = this;\r\n\r\n      clearTimeout(self.timer);\r\n\r\n      self.timer = null;\r\n\r\n      if (self.$progress) {\r\n        self.$progress.removeAttr(\"style\").hide();\r\n      }\r\n    },\r\n\r\n    start: function() {\r\n      var self = this,\r\n        current = self.instance.current;\r\n\r\n      if (current) {\r\n        self.$button\r\n          .attr(\"title\", (current.opts.i18n[current.opts.lang] || current.opts.i18n.en).PLAY_STOP)\r\n          .removeClass(\"fancybox-button--play\")\r\n          .addClass(\"fancybox-button--pause\");\r\n\r\n        self.isActive = true;\r\n\r\n        if (current.isComplete) {\r\n          self.set(true);\r\n        }\r\n\r\n        self.instance.trigger(\"onSlideShowChange\", true);\r\n      }\r\n    },\r\n\r\n    stop: function() {\r\n      var self = this,\r\n        current = self.instance.current;\r\n\r\n      self.clear();\r\n\r\n      self.$button\r\n        .attr(\"title\", (current.opts.i18n[current.opts.lang] || current.opts.i18n.en).PLAY_START)\r\n        .removeClass(\"fancybox-button--pause\")\r\n        .addClass(\"fancybox-button--play\");\r\n\r\n      self.isActive = false;\r\n\r\n      self.instance.trigger(\"onSlideShowChange\", false);\r\n\r\n      if (self.$progress) {\r\n        self.$progress.removeAttr(\"style\").hide();\r\n      }\r\n    },\r\n\r\n    toggle: function() {\r\n      var self = this;\r\n\r\n      if (self.isActive) {\r\n        self.stop();\r\n      } else {\r\n        self.start();\r\n      }\r\n    }\r\n  });\r\n\r\n  $(document).on({\r\n    \"onInit.fb\": function(e, instance) {\r\n      if (instance && !instance.SlideShow) {\r\n        instance.SlideShow = new SlideShow(instance);\r\n      }\r\n    },\r\n\r\n    \"beforeShow.fb\": function(e, instance, current, firstRun) {\r\n      var SlideShow = instance && instance.SlideShow;\r\n\r\n      if (firstRun) {\r\n        if (SlideShow && current.opts.slideShow.autoStart) {\r\n          SlideShow.start();\r\n        }\r\n      } else if (SlideShow && SlideShow.isActive) {\r\n        SlideShow.clear();\r\n      }\r\n    },\r\n\r\n    \"afterShow.fb\": function(e, instance, current) {\r\n      var SlideShow = instance && instance.SlideShow;\r\n\r\n      if (SlideShow && SlideShow.isActive) {\r\n        SlideShow.set();\r\n      }\r\n    },\r\n\r\n    \"afterKeydown.fb\": function(e, instance, current, keypress, keycode) {\r\n      var SlideShow = instance && instance.SlideShow;\r\n\r\n      // \"P\" or Spacebar\r\n      if (SlideShow && current.opts.slideShow && (keycode === 80 || keycode === 32) && !$(document.activeElement).is(\"button,a,input\")) {\r\n        keypress.preventDefault();\r\n\r\n        SlideShow.toggle();\r\n      }\r\n    },\r\n\r\n    \"beforeClose.fb onDeactivate.fb\": function(e, instance) {\r\n      var SlideShow = instance && instance.SlideShow;\r\n\r\n      if (SlideShow) {\r\n        SlideShow.stop();\r\n      }\r\n    }\r\n  });\r\n\r\n  // Page Visibility API to pause slideshow when window is not active\r\n  $(document).on(\"visibilitychange\", function() {\r\n    var instance = $.fancybox.getInstance(),\r\n      SlideShow = instance && instance.SlideShow;\r\n\r\n    if (SlideShow && SlideShow.isActive) {\r\n      if (document.hidden) {\r\n        SlideShow.clear();\r\n      } else {\r\n        SlideShow.set();\r\n      }\r\n    }\r\n  });\r\n})(document, jQuery);\r\n\n// ==========================================================================\r\n//\r\n// FullScreen\r\n// Adds fullscreen functionality\r\n//\r\n// ==========================================================================\r\n(function(document, $) {\r\n  \"use strict\";\r\n\r\n  // Collection of methods supported by user browser\r\n  var fn = (function() {\r\n    var fnMap = [\r\n      [\"requestFullscreen\", \"exitFullscreen\", \"fullscreenElement\", \"fullscreenEnabled\", \"fullscreenchange\", \"fullscreenerror\"],\r\n      // new WebKit\r\n      [\r\n        \"webkitRequestFullscreen\",\r\n        \"webkitExitFullscreen\",\r\n        \"webkitFullscreenElement\",\r\n        \"webkitFullscreenEnabled\",\r\n        \"webkitfullscreenchange\",\r\n        \"webkitfullscreenerror\"\r\n      ],\r\n      // old WebKit (Safari 5.1)\r\n      [\r\n        \"webkitRequestFullScreen\",\r\n        \"webkitCancelFullScreen\",\r\n        \"webkitCurrentFullScreenElement\",\r\n        \"webkitCancelFullScreen\",\r\n        \"webkitfullscreenchange\",\r\n        \"webkitfullscreenerror\"\r\n      ],\r\n      [\r\n        \"mozRequestFullScreen\",\r\n        \"mozCancelFullScreen\",\r\n        \"mozFullScreenElement\",\r\n        \"mozFullScreenEnabled\",\r\n        \"mozfullscreenchange\",\r\n        \"mozfullscreenerror\"\r\n      ],\r\n      [\"msRequestFullscreen\", \"msExitFullscreen\", \"msFullscreenElement\", \"msFullscreenEnabled\", \"MSFullscreenChange\", \"MSFullscreenError\"]\r\n    ];\r\n\r\n    var ret = {};\r\n\r\n    for (var i = 0; i < fnMap.length; i++) {\r\n      var val = fnMap[i];\r\n\r\n      if (val && val[1] in document) {\r\n        for (var j = 0; j < val.length; j++) {\r\n          ret[fnMap[0][j]] = val[j];\r\n        }\r\n\r\n        return ret;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  })();\r\n\r\n  if (fn) {\r\n    var FullScreen = {\r\n      request: function(elem) {\r\n        elem = elem || document.documentElement;\r\n\r\n        elem[fn.requestFullscreen](elem.ALLOW_KEYBOARD_INPUT);\r\n      },\r\n      exit: function() {\r\n        document[fn.exitFullscreen]();\r\n      },\r\n      toggle: function(elem) {\r\n        elem = elem || document.documentElement;\r\n\r\n        if (this.isFullscreen()) {\r\n          this.exit();\r\n        } else {\r\n          this.request(elem);\r\n        }\r\n      },\r\n      isFullscreen: function() {\r\n        return Boolean(document[fn.fullscreenElement]);\r\n      },\r\n      enabled: function() {\r\n        return Boolean(document[fn.fullscreenEnabled]);\r\n      }\r\n    };\r\n\r\n    $.extend(true, $.fancybox.defaults, {\r\n      btnTpl: {\r\n        fullScreen:\r\n          '<button data-fancybox-fullscreen class=\"fancybox-button fancybox-button--fsenter\" title=\"{{FULL_SCREEN}}\">' +\r\n          '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z\"/></svg>' +\r\n          '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z\"/></svg>' +\r\n          \"</button>\"\r\n      },\r\n      fullScreen: {\r\n        autoStart: false\r\n      }\r\n    });\r\n\r\n    $(document).on(fn.fullscreenchange, function() {\r\n      var isFullscreen = FullScreen.isFullscreen(),\r\n        instance = $.fancybox.getInstance();\r\n\r\n      if (instance) {\r\n        // If image is zooming, then force to stop and reposition properly\r\n        if (instance.current && instance.current.type === \"image\" && instance.isAnimating) {\r\n          instance.current.$content.css(\"transition\", \"none\");\r\n\r\n          instance.isAnimating = false;\r\n\r\n          instance.update(true, true, 0);\r\n        }\r\n\r\n        instance.trigger(\"onFullscreenChange\", isFullscreen);\r\n\r\n        instance.$refs.container.toggleClass(\"fancybox-is-fullscreen\", isFullscreen);\r\n\r\n        instance.$refs.toolbar\r\n          .find(\"[data-fancybox-fullscreen]\")\r\n          .toggleClass(\"fancybox-button--fsenter\", !isFullscreen)\r\n          .toggleClass(\"fancybox-button--fsexit\", isFullscreen);\r\n      }\r\n    });\r\n  }\r\n\r\n  $(document).on({\r\n    \"onInit.fb\": function(e, instance) {\r\n      var $container;\r\n\r\n      if (!fn) {\r\n        instance.$refs.toolbar.find(\"[data-fancybox-fullscreen]\").remove();\r\n\r\n        return;\r\n      }\r\n\r\n      if (instance && instance.group[instance.currIndex].opts.fullScreen) {\r\n        $container = instance.$refs.container;\r\n\r\n        $container.on(\"click.fb-fullscreen\", \"[data-fancybox-fullscreen]\", function(e) {\r\n          e.stopPropagation();\r\n          e.preventDefault();\r\n\r\n          FullScreen.toggle();\r\n        });\r\n\r\n        if (instance.opts.fullScreen && instance.opts.fullScreen.autoStart === true) {\r\n          FullScreen.request();\r\n        }\r\n\r\n        // Expose API\r\n        instance.FullScreen = FullScreen;\r\n      } else if (instance) {\r\n        instance.$refs.toolbar.find(\"[data-fancybox-fullscreen]\").hide();\r\n      }\r\n    },\r\n\r\n    \"afterKeydown.fb\": function(e, instance, current, keypress, keycode) {\r\n      // \"F\"\r\n      if (instance && instance.FullScreen && keycode === 70) {\r\n        keypress.preventDefault();\r\n\r\n        instance.FullScreen.toggle();\r\n      }\r\n    },\r\n\r\n    \"beforeClose.fb\": function(e, instance) {\r\n      if (instance && instance.FullScreen && instance.$refs.container.hasClass(\"fancybox-is-fullscreen\")) {\r\n        FullScreen.exit();\r\n      }\r\n    }\r\n  });\r\n})(document, jQuery);\r\n\n// ==========================================================================\r\n//\r\n// Thumbs\r\n// Displays thumbnails in a grid\r\n//\r\n// ==========================================================================\r\n(function(document, $) {\r\n  \"use strict\";\r\n\r\n  var CLASS = \"fancybox-thumbs\",\r\n    CLASS_ACTIVE = CLASS + \"-active\";\r\n\r\n  // Make sure there are default values\r\n  $.fancybox.defaults = $.extend(\r\n    true,\r\n    {\r\n      btnTpl: {\r\n        thumbs:\r\n          '<button data-fancybox-thumbs class=\"fancybox-button fancybox-button--thumbs\" title=\"{{THUMBS}}\">' +\r\n          '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z\"/></svg>' +\r\n          \"</button>\"\r\n      },\r\n      thumbs: {\r\n        autoStart: false, // Display thumbnails on opening\r\n        hideOnClose: true, // Hide thumbnail grid when closing animation starts\r\n        parentEl: \".fancybox-container\", // Container is injected into this element\r\n        axis: \"y\" // Vertical (y) or horizontal (x) scrolling\r\n      }\r\n    },\r\n    $.fancybox.defaults\r\n  );\r\n\r\n  var FancyThumbs = function(instance) {\r\n    this.init(instance);\r\n  };\r\n\r\n  $.extend(FancyThumbs.prototype, {\r\n    $button: null,\r\n    $grid: null,\r\n    $list: null,\r\n    isVisible: false,\r\n    isActive: false,\r\n\r\n    init: function(instance) {\r\n      var self = this,\r\n        group = instance.group,\r\n        enabled = 0;\r\n\r\n      self.instance = instance;\r\n      self.opts = group[instance.currIndex].opts.thumbs;\r\n\r\n      instance.Thumbs = self;\r\n\r\n      self.$button = instance.$refs.toolbar.find(\"[data-fancybox-thumbs]\");\r\n\r\n      // Enable thumbs if at least two group items have thumbnails\r\n      for (var i = 0, len = group.length; i < len; i++) {\r\n        if (group[i].thumb) {\r\n          enabled++;\r\n        }\r\n\r\n        if (enabled > 1) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (enabled > 1 && !!self.opts) {\r\n        self.$button.removeAttr(\"style\").on(\"click\", function() {\r\n          self.toggle();\r\n        });\r\n\r\n        self.isActive = true;\r\n      } else {\r\n        self.$button.hide();\r\n      }\r\n    },\r\n\r\n    create: function() {\r\n      var self = this,\r\n        instance = self.instance,\r\n        parentEl = self.opts.parentEl,\r\n        list = [],\r\n        src;\r\n\r\n      if (!self.$grid) {\r\n        // Create main element\r\n        self.$grid = $('<div class=\"' + CLASS + \" \" + CLASS + \"-\" + self.opts.axis + '\"></div>').appendTo(\r\n          instance.$refs.container\r\n            .find(parentEl)\r\n            .addBack()\r\n            .filter(parentEl)\r\n        );\r\n\r\n        // Add \"click\" event that performs gallery navigation\r\n        self.$grid.on(\"click\", \"a\", function() {\r\n          instance.jumpTo($(this).attr(\"data-index\"));\r\n        });\r\n      }\r\n\r\n      // Build the list\r\n      if (!self.$list) {\r\n        self.$list = $('<div class=\"' + CLASS + '__list\">').appendTo(self.$grid);\r\n      }\r\n\r\n      $.each(instance.group, function(i, item) {\r\n        src = item.thumb;\r\n\r\n        if (!src && item.type === \"image\") {\r\n          src = item.src;\r\n        }\r\n\r\n        list.push(\r\n          '<a href=\"javascript:;\" tabindex=\"0\" data-index=\"' +\r\n            i +\r\n            '\"' +\r\n            (src && src.length ? ' style=\"background-image:url(' + src + ')\"' : 'class=\"fancybox-thumbs-missing\"') +\r\n            \"></a>\"\r\n        );\r\n      });\r\n\r\n      self.$list[0].innerHTML = list.join(\"\");\r\n\r\n      if (self.opts.axis === \"x\") {\r\n        // Set fixed width for list element to enable horizontal scrolling\r\n        self.$list.width(\r\n          parseInt(self.$grid.css(\"padding-right\"), 10) +\r\n            instance.group.length *\r\n              self.$list\r\n                .children()\r\n                .eq(0)\r\n                .outerWidth(true)\r\n        );\r\n      }\r\n    },\r\n\r\n    focus: function(duration) {\r\n      var self = this,\r\n        $list = self.$list,\r\n        $grid = self.$grid,\r\n        thumb,\r\n        thumbPos;\r\n\r\n      if (!self.instance.current) {\r\n        return;\r\n      }\r\n\r\n      thumb = $list\r\n        .children()\r\n        .removeClass(CLASS_ACTIVE)\r\n        .filter('[data-index=\"' + self.instance.current.index + '\"]')\r\n        .addClass(CLASS_ACTIVE);\r\n\r\n      thumbPos = thumb.position();\r\n\r\n      // Check if need to scroll to make current thumb visible\r\n      if (self.opts.axis === \"y\" && (thumbPos.top < 0 || thumbPos.top > $list.height() - thumb.outerHeight())) {\r\n        $list.stop().animate(\r\n          {\r\n            scrollTop: $list.scrollTop() + thumbPos.top\r\n          },\r\n          duration\r\n        );\r\n      } else if (\r\n        self.opts.axis === \"x\" &&\r\n        (thumbPos.left < $grid.scrollLeft() || thumbPos.left > $grid.scrollLeft() + ($grid.width() - thumb.outerWidth()))\r\n      ) {\r\n        $list\r\n          .parent()\r\n          .stop()\r\n          .animate(\r\n            {\r\n              scrollLeft: thumbPos.left\r\n            },\r\n            duration\r\n          );\r\n      }\r\n    },\r\n\r\n    update: function() {\r\n      var that = this;\r\n      that.instance.$refs.container.toggleClass(\"fancybox-show-thumbs\", this.isVisible);\r\n\r\n      if (that.isVisible) {\r\n        if (!that.$grid) {\r\n          that.create();\r\n        }\r\n\r\n        that.instance.trigger(\"onThumbsShow\");\r\n\r\n        that.focus(0);\r\n      } else if (that.$grid) {\r\n        that.instance.trigger(\"onThumbsHide\");\r\n      }\r\n\r\n      // Update content position\r\n      that.instance.update();\r\n    },\r\n\r\n    hide: function() {\r\n      this.isVisible = false;\r\n      this.update();\r\n    },\r\n\r\n    show: function() {\r\n      this.isVisible = true;\r\n      this.update();\r\n    },\r\n\r\n    toggle: function() {\r\n      this.isVisible = !this.isVisible;\r\n      this.update();\r\n    }\r\n  });\r\n\r\n  $(document).on({\r\n    \"onInit.fb\": function(e, instance) {\r\n      var Thumbs;\r\n\r\n      if (instance && !instance.Thumbs) {\r\n        Thumbs = new FancyThumbs(instance);\r\n\r\n        if (Thumbs.isActive && Thumbs.opts.autoStart === true) {\r\n          Thumbs.show();\r\n        }\r\n      }\r\n    },\r\n\r\n    \"beforeShow.fb\": function(e, instance, item, firstRun) {\r\n      var Thumbs = instance && instance.Thumbs;\r\n\r\n      if (Thumbs && Thumbs.isVisible) {\r\n        Thumbs.focus(firstRun ? 0 : 250);\r\n      }\r\n    },\r\n\r\n    \"afterKeydown.fb\": function(e, instance, current, keypress, keycode) {\r\n      var Thumbs = instance && instance.Thumbs;\r\n\r\n      // \"G\"\r\n      if (Thumbs && Thumbs.isActive && keycode === 71) {\r\n        keypress.preventDefault();\r\n\r\n        Thumbs.toggle();\r\n      }\r\n    },\r\n\r\n    \"beforeClose.fb\": function(e, instance) {\r\n      var Thumbs = instance && instance.Thumbs;\r\n\r\n      if (Thumbs && Thumbs.isVisible && Thumbs.opts.hideOnClose !== false) {\r\n        Thumbs.$grid.hide();\r\n      }\r\n    }\r\n  });\r\n})(document, jQuery);\r\n\n//// ==========================================================================\r\n//\r\n// Share\r\n// Displays simple form for sharing current url\r\n//\r\n// ==========================================================================\r\n(function(document, $) {\r\n  \"use strict\";\r\n\r\n  $.extend(true, $.fancybox.defaults, {\r\n    btnTpl: {\r\n      share:\r\n        '<button data-fancybox-share class=\"fancybox-button fancybox-button--share\" title=\"{{SHARE}}\">' +\r\n        '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z\"/></svg>' +\r\n        \"</button>\"\r\n    },\r\n    share: {\r\n      url: function(instance, item) {\r\n        return (\r\n          (!instance.currentHash && !(item.type === \"inline\" || item.type === \"html\") ? item.origSrc || item.src : false) || window.location\r\n        );\r\n      },\r\n      tpl:\r\n        '<div class=\"fancybox-share\">' +\r\n        \"<h1>{{SHARE}}</h1>\" +\r\n        \"<p>\" +\r\n        '<a class=\"fancybox-share__button fancybox-share__button--fb\" href=\"https://www.facebook.com/sharer/sharer.php?u={{url}}\">' +\r\n        '<svg viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196\" /></svg>' +\r\n        \"<span>Facebook</span>\" +\r\n        \"</a>\" +\r\n        '<a class=\"fancybox-share__button fancybox-share__button--tw\" href=\"https://twitter.com/intent/tweet?url={{url}}&text={{descr}}\">' +\r\n        '<svg viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z\" /></svg>' +\r\n        \"<span>Twitter</span>\" +\r\n        \"</a>\" +\r\n        '<a class=\"fancybox-share__button fancybox-share__button--pt\" href=\"https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}\">' +\r\n        '<svg viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z\" fill=\"#fff\"/></svg>' +\r\n        \"<span>Pinterest</span>\" +\r\n        \"</a>\" +\r\n        \"</p>\" +\r\n        '<p><input class=\"fancybox-share__input\" type=\"text\" value=\"{{url_raw}}\" onclick=\"select()\" /></p>' +\r\n        \"</div>\"\r\n    }\r\n  });\r\n\r\n  function escapeHtml(string) {\r\n    var entityMap = {\r\n      \"&\": \"&amp;\",\r\n      \"<\": \"&lt;\",\r\n      \">\": \"&gt;\",\r\n      '\"': \"&quot;\",\r\n      \"'\": \"&#39;\",\r\n      \"/\": \"&#x2F;\",\r\n      \"`\": \"&#x60;\",\r\n      \"=\": \"&#x3D;\"\r\n    };\r\n\r\n    return String(string).replace(/[&<>\"'`=\\/]/g, function(s) {\r\n      return entityMap[s];\r\n    });\r\n  }\r\n\r\n  $(document).on(\"click\", \"[data-fancybox-share]\", function() {\r\n    var instance = $.fancybox.getInstance(),\r\n      current = instance.current || null,\r\n      url,\r\n      tpl;\r\n\r\n    if (!current) {\r\n      return;\r\n    }\r\n\r\n    if ($.type(current.opts.share.url) === \"function\") {\r\n      url = current.opts.share.url.apply(current, [instance, current]);\r\n    }\r\n\r\n    tpl = current.opts.share.tpl\r\n      .replace(/\\{\\{media\\}\\}/g, current.type === \"image\" ? encodeURIComponent(current.src) : \"\")\r\n      .replace(/\\{\\{url\\}\\}/g, encodeURIComponent(url))\r\n      .replace(/\\{\\{url_raw\\}\\}/g, escapeHtml(url))\r\n      .replace(/\\{\\{descr\\}\\}/g, instance.$caption ? encodeURIComponent(instance.$caption.text()) : \"\");\r\n\r\n    $.fancybox.open({\r\n      src: instance.translate(instance, tpl),\r\n      type: \"html\",\r\n      opts: {\r\n        touch: false,\r\n        animationEffect: false,\r\n        afterLoad: function(shareInstance, shareCurrent) {\r\n          // Close self if parent instance is closing\r\n          instance.$refs.container.one(\"beforeClose.fb\", function() {\r\n            shareInstance.close(null, 0);\r\n          });\r\n\r\n          // Opening links in a popup window\r\n          shareCurrent.$content.find(\".fancybox-share__button\").click(function() {\r\n            window.open(this.href, \"Share\", \"width=550, height=450\");\r\n            return false;\r\n          });\r\n        },\r\n        mobile: {\r\n          autoFocus: false\r\n        }\r\n      }\r\n    });\r\n  });\r\n})(document, jQuery);\r\n\n// ==========================================================================\r\n//\r\n// Hash\r\n// Enables linking to each modal\r\n//\r\n// ==========================================================================\r\n(function(window, document, $) {\r\n  \"use strict\";\r\n\r\n  // Simple $.escapeSelector polyfill (for jQuery prior v3)\r\n  if (!$.escapeSelector) {\r\n    $.escapeSelector = function(sel) {\r\n      var rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\x80-\\uFFFF\\w-]/g;\r\n      var fcssescape = function(ch, asCodePoint) {\r\n        if (asCodePoint) {\r\n          // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\r\n          if (ch === \"\\0\") {\r\n            return \"\\uFFFD\";\r\n          }\r\n\r\n          // Control characters and (dependent upon position) numbers get escaped as code points\r\n          return ch.slice(0, -1) + \"\\\\\" + ch.charCodeAt(ch.length - 1).toString(16) + \" \";\r\n        }\r\n\r\n        // Other potentially-special ASCII characters get backslash-escaped\r\n        return \"\\\\\" + ch;\r\n      };\r\n\r\n      return (sel + \"\").replace(rcssescape, fcssescape);\r\n    };\r\n  }\r\n\r\n  // Get info about gallery name and current index from url\r\n  function parseUrl() {\r\n    var hash = window.location.hash.substr(1),\r\n      rez = hash.split(\"-\"),\r\n      index = rez.length > 1 && /^\\+?\\d+$/.test(rez[rez.length - 1]) ? parseInt(rez.pop(-1), 10) || 1 : 1,\r\n      gallery = rez.join(\"-\");\r\n\r\n    return {\r\n      hash: hash,\r\n      /* Index is starting from 1 */\r\n      index: index < 1 ? 1 : index,\r\n      gallery: gallery\r\n    };\r\n  }\r\n\r\n  // Trigger click evnt on links to open new fancyBox instance\r\n  function triggerFromUrl(url) {\r\n    if (url.gallery !== \"\") {\r\n      // If we can find element matching 'data-fancybox' atribute,\r\n      // then triggering click event should start fancyBox\r\n      $(\"[data-fancybox='\" + $.escapeSelector(url.gallery) + \"']\")\r\n        .eq(url.index - 1)\r\n        .focus()\r\n        .trigger(\"click.fb-start\");\r\n    }\r\n  }\r\n\r\n  // Get gallery name from current instance\r\n  function getGalleryID(instance) {\r\n    var opts, ret;\r\n\r\n    if (!instance) {\r\n      return false;\r\n    }\r\n\r\n    opts = instance.current ? instance.current.opts : instance.opts;\r\n    ret = opts.hash || (opts.$orig ? opts.$orig.data(\"fancybox\") || opts.$orig.data(\"fancybox-trigger\") : \"\");\r\n\r\n    return ret === \"\" ? false : ret;\r\n  }\r\n\r\n  // Start when DOM becomes ready\r\n  $(function() {\r\n    // Check if user has disabled this module\r\n    if ($.fancybox.defaults.hash === false) {\r\n      return;\r\n    }\r\n\r\n    // Update hash when opening/closing fancyBox\r\n    $(document).on({\r\n      \"onInit.fb\": function(e, instance) {\r\n        var url, gallery;\r\n\r\n        if (instance.group[instance.currIndex].opts.hash === false) {\r\n          return;\r\n        }\r\n\r\n        url = parseUrl();\r\n        gallery = getGalleryID(instance);\r\n\r\n        // Make sure gallery start index matches index from hash\r\n        if (gallery && url.gallery && gallery == url.gallery) {\r\n          instance.currIndex = url.index - 1;\r\n        }\r\n      },\r\n\r\n      \"beforeShow.fb\": function(e, instance, current, firstRun) {\r\n        var gallery;\r\n\r\n        if (!current || current.opts.hash === false) {\r\n          return;\r\n        }\r\n\r\n        // Check if need to update window hash\r\n        gallery = getGalleryID(instance);\r\n\r\n        if (!gallery) {\r\n          return;\r\n        }\r\n\r\n        // Variable containing last hash value set by fancyBox\r\n        // It will be used to determine if fancyBox needs to close after hash change is detected\r\n        instance.currentHash = gallery + (instance.group.length > 1 ? \"-\" + (current.index + 1) : \"\");\r\n\r\n        // If current hash is the same (this instance most likely is opened by hashchange), then do nothing\r\n        if (window.location.hash === \"#\" + instance.currentHash) {\r\n          return;\r\n        }\r\n\r\n        if (firstRun && !instance.origHash) {\r\n          instance.origHash = window.location.hash;\r\n        }\r\n\r\n        if (instance.hashTimer) {\r\n          clearTimeout(instance.hashTimer);\r\n        }\r\n\r\n        // Update hash\r\n        instance.hashTimer = setTimeout(function() {\r\n          if (\"replaceState\" in window.history) {\r\n            window.history[firstRun ? \"pushState\" : \"replaceState\"](\r\n              {},\r\n              document.title,\r\n              window.location.pathname + window.location.search + \"#\" + instance.currentHash\r\n            );\r\n\r\n            if (firstRun) {\r\n              instance.hasCreatedHistory = true;\r\n            }\r\n          } else {\r\n            window.location.hash = instance.currentHash;\r\n          }\r\n\r\n          instance.hashTimer = null;\r\n        }, 300);\r\n      },\r\n\r\n      \"beforeClose.fb\": function(e, instance, current) {\r\n        if (current.opts.hash === false) {\r\n          return;\r\n        }\r\n\r\n        clearTimeout(instance.hashTimer);\r\n\r\n        // Goto previous history entry\r\n        if (instance.currentHash && instance.hasCreatedHistory) {\r\n          window.history.back();\r\n        } else if (instance.currentHash) {\r\n          if (\"replaceState\" in window.history) {\r\n            window.history.replaceState({}, document.title, window.location.pathname + window.location.search + (instance.origHash || \"\"));\r\n          } else {\r\n            window.location.hash = instance.origHash;\r\n          }\r\n        }\r\n\r\n        instance.currentHash = null;\r\n      }\r\n    });\r\n\r\n    // Check if need to start/close after url has changed\r\n    $(window).on(\"hashchange.fb\", function() {\r\n      var url = parseUrl(),\r\n        fb = null;\r\n\r\n      // Find last fancyBox instance that has \"hash\"\r\n      $.each(\r\n        $(\".fancybox-container\")\r\n          .get()\r\n          .reverse(),\r\n        function(index, value) {\r\n          var tmp = $(value).data(\"FancyBox\");\r\n\r\n          if (tmp && tmp.currentHash) {\r\n            fb = tmp;\r\n            return false;\r\n          }\r\n        }\r\n      );\r\n\r\n      if (fb) {\r\n        // Now, compare hash values\r\n        if (fb.currentHash !== url.gallery + \"-\" + url.index && !(url.index === 1 && fb.currentHash == url.gallery)) {\r\n          fb.currentHash = null;\r\n\r\n          fb.close();\r\n        }\r\n      } else if (url.gallery !== \"\") {\r\n        triggerFromUrl(url);\r\n      }\r\n    });\r\n\r\n    // Check current hash and trigger click event on matching element to start fancyBox, if needed\r\n    setTimeout(function() {\r\n      if (!$.fancybox.getInstance()) {\r\n        triggerFromUrl(parseUrl());\r\n      }\r\n    }, 50);\r\n  });\r\n})(window, document, jQuery);\r\n\n// ==========================================================================\r\n//\r\n// Wheel\r\n// Basic mouse weheel support for gallery navigation\r\n//\r\n// ==========================================================================\r\n(function(document, $) {\r\n  \"use strict\";\r\n\r\n  var prevTime = new Date().getTime();\r\n\r\n  $(document).on({\r\n    \"onInit.fb\": function(e, instance, current) {\r\n      instance.$refs.stage.on(\"mousewheel DOMMouseScroll wheel MozMousePixelScroll\", function(e) {\r\n        var current = instance.current,\r\n          currTime = new Date().getTime();\r\n\r\n        if (instance.group.length < 2 || current.opts.wheel === false || (current.opts.wheel === \"auto\" && current.type !== \"image\")) {\r\n          return;\r\n        }\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        if (current.$slide.hasClass(\"fancybox-animated\")) {\r\n          return;\r\n        }\r\n\r\n        e = e.originalEvent || e;\r\n\r\n        if (currTime - prevTime < 250) {\r\n          return;\r\n        }\r\n\r\n        prevTime = currTime;\r\n\r\n        instance[(-e.deltaY || -e.deltaX || e.wheelDelta || -e.detail) < 0 ? \"next\" : \"previous\"]();\r\n      });\r\n    }\r\n  });\r\n})(document, jQuery);\r\n\n}).call(global, module, undefined, undefined);\n","// doT.js\n// 2011-2014, Laura Doktorova, https://github.com/olado/doT\n// Licensed under the MIT license.\n\n(function () {\n\t\"use strict\";\n\n\tvar doT = {\n\t\tname: \"doT\",\n\t\tversion: \"1.1.1\",\n\t\ttemplateSettings: {\n\t\t\tevaluate:    /\\{\\{([\\s\\S]+?(\\}?)+)\\}\\}/g,\n\t\t\tinterpolate: /\\{\\{=([\\s\\S]+?)\\}\\}/g,\n\t\t\tencode:      /\\{\\{!([\\s\\S]+?)\\}\\}/g,\n\t\t\tuse:         /\\{\\{#([\\s\\S]+?)\\}\\}/g,\n\t\t\tuseParams:   /(^|[^\\w$])def(?:\\.|\\[[\\'\\\"])([\\w$\\.]+)(?:[\\'\\\"]\\])?\\s*\\:\\s*([\\w$\\.]+|\\\"[^\\\"]+\\\"|\\'[^\\']+\\'|\\{[^\\}]+\\})/g,\n\t\t\tdefine:      /\\{\\{##\\s*([\\w\\.$]+)\\s*(\\:|=)([\\s\\S]+?)#\\}\\}/g,\n\t\t\tdefineParams:/^\\s*([\\w$]+):([\\s\\S]+)/,\n\t\t\tconditional: /\\{\\{\\?(\\?)?\\s*([\\s\\S]*?)\\s*\\}\\}/g,\n\t\t\titerate:     /\\{\\{~\\s*(?:\\}\\}|([\\s\\S]+?)\\s*\\:\\s*([\\w$]+)\\s*(?:\\:\\s*([\\w$]+))?\\s*\\}\\})/g,\n\t\t\tvarname:\t\"it\",\n\t\t\tstrip:\t\ttrue,\n\t\t\tappend:\t\ttrue,\n\t\t\tselfcontained: false,\n\t\t\tdoNotSkipEncoded: false\n\t\t},\n\t\ttemplate: undefined, //fn, compile template\n\t\tcompile:  undefined, //fn, for express\n\t\tlog: true\n\t}, _globals;\n\n\tdoT.encodeHTMLSource = function(doNotSkipEncoded) {\n\t\tvar encodeHTMLRules = { \"&\": \"&#38;\", \"<\": \"&#60;\", \">\": \"&#62;\", '\"': \"&#34;\", \"'\": \"&#39;\", \"/\": \"&#47;\" },\n\t\t\tmatchHTML = doNotSkipEncoded ? /[&<>\"'\\/]/g : /&(?!#?\\w+;)|<|>|\"|'|\\//g;\n\t\treturn function(code) {\n\t\t\treturn code ? code.toString().replace(matchHTML, function(m) {return encodeHTMLRules[m] || m;}) : \"\";\n\t\t};\n\t};\n\n\t_globals = (function(){ return this || (0,eval)(\"this\"); }());\n\n\t/* istanbul ignore else */\n\tif (typeof module !== \"undefined\" && module.exports) {\n\t\tmodule.exports = doT;\n\t} else if (typeof define === \"function\" && define.amd) {\n\t\tdefine(function(){return doT;});\n\t} else {\n\t\t_globals.doT = doT;\n\t}\n\n\tvar startend = {\n\t\tappend: { start: \"'+(\",      end: \")+'\",      startencode: \"'+encodeHTML(\" },\n\t\tsplit:  { start: \"';out+=(\", end: \");out+='\", startencode: \"';out+=encodeHTML(\" }\n\t}, skip = /$^/;\n\n\tfunction resolveDefs(c, block, def) {\n\t\treturn ((typeof block === \"string\") ? block : block.toString())\n\t\t.replace(c.define || skip, function(m, code, assign, value) {\n\t\t\tif (code.indexOf(\"def.\") === 0) {\n\t\t\t\tcode = code.substring(4);\n\t\t\t}\n\t\t\tif (!(code in def)) {\n\t\t\t\tif (assign === \":\") {\n\t\t\t\t\tif (c.defineParams) value.replace(c.defineParams, function(m, param, v) {\n\t\t\t\t\t\tdef[code] = {arg: param, text: v};\n\t\t\t\t\t});\n\t\t\t\t\tif (!(code in def)) def[code]= value;\n\t\t\t\t} else {\n\t\t\t\t\tnew Function(\"def\", \"def['\"+code+\"']=\" + value)(def);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn \"\";\n\t\t})\n\t\t.replace(c.use || skip, function(m, code) {\n\t\t\tif (c.useParams) code = code.replace(c.useParams, function(m, s, d, param) {\n\t\t\t\tif (def[d] && def[d].arg && param) {\n\t\t\t\t\tvar rw = (d+\":\"+param).replace(/'|\\\\/g, \"_\");\n\t\t\t\t\tdef.__exp = def.__exp || {};\n\t\t\t\t\tdef.__exp[rw] = def[d].text.replace(new RegExp(\"(^|[^\\\\w$])\" + def[d].arg + \"([^\\\\w$])\", \"g\"), \"$1\" + param + \"$2\");\n\t\t\t\t\treturn s + \"def.__exp['\"+rw+\"']\";\n\t\t\t\t}\n\t\t\t});\n\t\t\tvar v = new Function(\"def\", \"return \" + code)(def);\n\t\t\treturn v ? resolveDefs(c, v, def) : v;\n\t\t});\n\t}\n\n\tfunction unescape(code) {\n\t\treturn code.replace(/\\\\('|\\\\)/g, \"$1\").replace(/[\\r\\t\\n]/g, \" \");\n\t}\n\n\tdoT.template = function(tmpl, c, def) {\n\t\tc = c || doT.templateSettings;\n\t\tvar cse = c.append ? startend.append : startend.split, needhtmlencode, sid = 0, indv,\n\t\t\tstr  = (c.use || c.define) ? resolveDefs(c, tmpl, def || {}) : tmpl;\n\n\t\tstr = (\"var out='\" + (c.strip ? str.replace(/(^|\\r|\\n)\\t* +| +\\t*(\\r|\\n|$)/g,\" \")\n\t\t\t\t\t.replace(/\\r|\\n|\\t|\\/\\*[\\s\\S]*?\\*\\//g,\"\"): str)\n\t\t\t.replace(/'|\\\\/g, \"\\\\$&\")\n\t\t\t.replace(c.interpolate || skip, function(m, code) {\n\t\t\t\treturn cse.start + unescape(code) + cse.end;\n\t\t\t})\n\t\t\t.replace(c.encode || skip, function(m, code) {\n\t\t\t\tneedhtmlencode = true;\n\t\t\t\treturn cse.startencode + unescape(code) + cse.end;\n\t\t\t})\n\t\t\t.replace(c.conditional || skip, function(m, elsecase, code) {\n\t\t\t\treturn elsecase ?\n\t\t\t\t\t(code ? \"';}else if(\" + unescape(code) + \"){out+='\" : \"';}else{out+='\") :\n\t\t\t\t\t(code ? \"';if(\" + unescape(code) + \"){out+='\" : \"';}out+='\");\n\t\t\t})\n\t\t\t.replace(c.iterate || skip, function(m, iterate, vname, iname) {\n\t\t\t\tif (!iterate) return \"';} } out+='\";\n\t\t\t\tsid+=1; indv=iname || \"i\"+sid; iterate=unescape(iterate);\n\t\t\t\treturn \"';var arr\"+sid+\"=\"+iterate+\";if(arr\"+sid+\"){var \"+vname+\",\"+indv+\"=-1,l\"+sid+\"=arr\"+sid+\".length-1;while(\"+indv+\"<l\"+sid+\"){\"\n\t\t\t\t\t+vname+\"=arr\"+sid+\"[\"+indv+\"+=1];out+='\";\n\t\t\t})\n\t\t\t.replace(c.evaluate || skip, function(m, code) {\n\t\t\t\treturn \"';\" + unescape(code) + \"out+='\";\n\t\t\t})\n\t\t\t+ \"';return out;\")\n\t\t\t.replace(/\\n/g, \"\\\\n\").replace(/\\t/g, '\\\\t').replace(/\\r/g, \"\\\\r\")\n\t\t\t.replace(/(\\s|;|\\}|^|\\{)out\\+='';/g, '$1').replace(/\\+''/g, \"\");\n\t\t\t//.replace(/(\\s|;|\\}|^|\\{)out\\+=''\\+/g,'$1out+=');\n\n\t\tif (needhtmlencode) {\n\t\t\tif (!c.selfcontained && _globals && !_globals._encodeHTML) _globals._encodeHTML = doT.encodeHTMLSource(c.doNotSkipEncoded);\n\t\t\tstr = \"var encodeHTML = typeof _encodeHTML !== 'undefined' ? _encodeHTML : (\"\n\t\t\t\t+ doT.encodeHTMLSource.toString() + \"(\" + (c.doNotSkipEncoded || '') + \"));\"\n\t\t\t\t+ str;\n\t\t}\n\t\ttry {\n\t\t\treturn new Function(c.varname, str);\n\t\t} catch (e) {\n\t\t\t/* istanbul ignore else */\n\t\t\tif (typeof console !== \"undefined\") console.log(\"Could not create a template function: \" + str);\n\t\t\tthrow e;\n\t\t}\n\t};\n\n\tdoT.compile = function(tmpl, def) {\n\t\treturn doT.template(tmpl, null, def);\n\t};\n}());\n","var QueryHandler = require('./QueryHandler');\nvar each = require('./Util').each;\n\n/**\n * Represents a single media query, manages it's state and registered handlers for this query\n *\n * @constructor\n * @param {string} query the media query string\n * @param {boolean} [isUnconditional=false] whether the media query should run regardless of whether the conditions are met. Primarily for helping older browsers deal with mobile-first design\n */\nfunction MediaQuery(query, isUnconditional) {\n    this.query = query;\n    this.isUnconditional = isUnconditional;\n    this.handlers = [];\n    this.mql = window.matchMedia(query);\n\n    var self = this;\n    this.listener = function(mql) {\n        // Chrome passes an MediaQueryListEvent object, while other browsers pass MediaQueryList directly\n        self.mql = mql.currentTarget || mql;\n        self.assess();\n    };\n    this.mql.addListener(this.listener);\n}\n\nMediaQuery.prototype = {\n\n    constuctor : MediaQuery,\n\n    /**\n     * add a handler for this query, triggering if already active\n     *\n     * @param {object} handler\n     * @param {function} handler.match callback for when query is activated\n     * @param {function} [handler.unmatch] callback for when query is deactivated\n     * @param {function} [handler.setup] callback for immediate execution when a query handler is registered\n     * @param {boolean} [handler.deferSetup=false] should the setup callback be deferred until the first time the handler is matched?\n     */\n    addHandler : function(handler) {\n        var qh = new QueryHandler(handler);\n        this.handlers.push(qh);\n\n        this.matches() && qh.on();\n    },\n\n    /**\n     * removes the given handler from the collection, and calls it's destroy methods\n     *\n     * @param {object || function} handler the handler to remove\n     */\n    removeHandler : function(handler) {\n        var handlers = this.handlers;\n        each(handlers, function(h, i) {\n            if(h.equals(handler)) {\n                h.destroy();\n                return !handlers.splice(i,1); //remove from array and exit each early\n            }\n        });\n    },\n\n    /**\n     * Determine whether the media query should be considered a match\n     *\n     * @return {Boolean} true if media query can be considered a match, false otherwise\n     */\n    matches : function() {\n        return this.mql.matches || this.isUnconditional;\n    },\n\n    /**\n     * Clears all handlers and unbinds events\n     */\n    clear : function() {\n        each(this.handlers, function(handler) {\n            handler.destroy();\n        });\n        this.mql.removeListener(this.listener);\n        this.handlers.length = 0; //clear array\n    },\n\n    /*\n        * Assesses the query, turning on all handlers if it matches, turning them off if it doesn't match\n        */\n    assess : function() {\n        var action = this.matches() ? 'on' : 'off';\n\n        each(this.handlers, function(handler) {\n            handler[action]();\n        });\n    }\n};\n\nmodule.exports = MediaQuery;\n","var MediaQuery = require('./MediaQuery');\nvar Util = require('./Util');\nvar each = Util.each;\nvar isFunction = Util.isFunction;\nvar isArray = Util.isArray;\n\n/**\n * Allows for registration of query handlers.\n * Manages the query handler's state and is responsible for wiring up browser events\n *\n * @constructor\n */\nfunction MediaQueryDispatch () {\n    if(!window.matchMedia) {\n        throw new Error('matchMedia not present, legacy browsers require a polyfill');\n    }\n\n    this.queries = {};\n    this.browserIsIncapable = !window.matchMedia('only all').matches;\n}\n\nMediaQueryDispatch.prototype = {\n\n    constructor : MediaQueryDispatch,\n\n    /**\n     * Registers a handler for the given media query\n     *\n     * @param {string} q the media query\n     * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers\n     * @param {function} options.match fired when query matched\n     * @param {function} [options.unmatch] fired when a query is no longer matched\n     * @param {function} [options.setup] fired when handler first triggered\n     * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched\n     * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers\n     */\n    register : function(q, options, shouldDegrade) {\n        var queries         = this.queries,\n            isUnconditional = shouldDegrade && this.browserIsIncapable;\n\n        if(!queries[q]) {\n            queries[q] = new MediaQuery(q, isUnconditional);\n        }\n\n        //normalise to object in an array\n        if(isFunction(options)) {\n            options = { match : options };\n        }\n        if(!isArray(options)) {\n            options = [options];\n        }\n        each(options, function(handler) {\n            if (isFunction(handler)) {\n                handler = { match : handler };\n            }\n            queries[q].addHandler(handler);\n        });\n\n        return this;\n    },\n\n    /**\n     * unregisters a query and all it's handlers, or a specific handler for a query\n     *\n     * @param {string} q the media query to target\n     * @param {object || function} [handler] specific handler to unregister\n     */\n    unregister : function(q, handler) {\n        var query = this.queries[q];\n\n        if(query) {\n            if(handler) {\n                query.removeHandler(handler);\n            }\n            else {\n                query.clear();\n                delete this.queries[q];\n            }\n        }\n\n        return this;\n    }\n};\n\nmodule.exports = MediaQueryDispatch;\n","/**\n * Delegate to handle a media query being matched and unmatched.\n *\n * @param {object} options\n * @param {function} options.match callback for when the media query is matched\n * @param {function} [options.unmatch] callback for when the media query is unmatched\n * @param {function} [options.setup] one-time callback triggered the first time a query is matched\n * @param {boolean} [options.deferSetup=false] should the setup callback be run immediately, rather than first time query is matched?\n * @constructor\n */\nfunction QueryHandler(options) {\n    this.options = options;\n    !options.deferSetup && this.setup();\n}\n\nQueryHandler.prototype = {\n\n    constructor : QueryHandler,\n\n    /**\n     * coordinates setup of the handler\n     *\n     * @function\n     */\n    setup : function() {\n        if(this.options.setup) {\n            this.options.setup();\n        }\n        this.initialised = true;\n    },\n\n    /**\n     * coordinates setup and triggering of the handler\n     *\n     * @function\n     */\n    on : function() {\n        !this.initialised && this.setup();\n        this.options.match && this.options.match();\n    },\n\n    /**\n     * coordinates the unmatch event for the handler\n     *\n     * @function\n     */\n    off : function() {\n        this.options.unmatch && this.options.unmatch();\n    },\n\n    /**\n     * called when a handler is to be destroyed.\n     * delegates to the destroy or unmatch callbacks, depending on availability.\n     *\n     * @function\n     */\n    destroy : function() {\n        this.options.destroy ? this.options.destroy() : this.off();\n    },\n\n    /**\n     * determines equality by reference.\n     * if object is supplied compare options, if function, compare match callback\n     *\n     * @function\n     * @param {object || function} [target] the target for comparison\n     */\n    equals : function(target) {\n        return this.options === target || this.options.match === target;\n    }\n\n};\n\nmodule.exports = QueryHandler;\n","/**\n * Helper function for iterating over a collection\n *\n * @param collection\n * @param fn\n */\nfunction each(collection, fn) {\n    var i      = 0,\n        length = collection.length,\n        cont;\n\n    for(i; i < length; i++) {\n        cont = fn(collection[i], i);\n        if(cont === false) {\n            break; //allow early exit\n        }\n    }\n}\n\n/**\n * Helper function for determining whether target object is an array\n *\n * @param target the object under test\n * @return {Boolean} true if array, false otherwise\n */\nfunction isArray(target) {\n    return Object.prototype.toString.apply(target) === '[object Array]';\n}\n\n/**\n * Helper function for determining whether target object is a function\n *\n * @param target the object under test\n * @return {Boolean} true if function, false otherwise\n */\nfunction isFunction(target) {\n    return typeof target === 'function';\n}\n\nmodule.exports = {\n    isFunction : isFunction,\n    isArray : isArray,\n    each : each\n};\n","var MediaQueryDispatch = require('./MediaQueryDispatch');\nmodule.exports = new MediaQueryDispatch();\n","/**\n* jquery-match-height 0.7.2 by @liabru\n* http://brm.io/jquery-match-height/\n* License: MIT\n*/\n\n;(function(factory) { // eslint-disable-line no-extra-semi\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['jquery'], factory);\n    } else if (typeof module !== 'undefined' && module.exports) {\n        // CommonJS\n        module.exports = factory(require('jquery'));\n    } else {\n        // Global\n        factory(jQuery);\n    }\n})(function($) {\n    /*\n    *  internal\n    */\n\n    var _previousResizeWidth = -1,\n        _updateTimeout = -1;\n\n    /*\n    *  _parse\n    *  value parse utility function\n    */\n\n    var _parse = function(value) {\n        // parse value and convert NaN to 0\n        return parseFloat(value) || 0;\n    };\n\n    /*\n    *  _rows\n    *  utility function returns array of jQuery selections representing each row\n    *  (as displayed after float wrapping applied by browser)\n    */\n\n    var _rows = function(elements) {\n        var tolerance = 1,\n            $elements = $(elements),\n            lastTop = null,\n            rows = [];\n\n        // group elements by their top position\n        $elements.each(function(){\n            var $that = $(this),\n                top = $that.offset().top - _parse($that.css('margin-top')),\n                lastRow = rows.length > 0 ? rows[rows.length - 1] : null;\n\n            if (lastRow === null) {\n                // first item on the row, so just push it\n                rows.push($that);\n            } else {\n                // if the row top is the same, add to the row group\n                if (Math.floor(Math.abs(lastTop - top)) <= tolerance) {\n                    rows[rows.length - 1] = lastRow.add($that);\n                } else {\n                    // otherwise start a new row group\n                    rows.push($that);\n                }\n            }\n\n            // keep track of the last row top\n            lastTop = top;\n        });\n\n        return rows;\n    };\n\n    /*\n    *  _parseOptions\n    *  handle plugin options\n    */\n\n    var _parseOptions = function(options) {\n        var opts = {\n            byRow: true,\n            property: 'height',\n            target: null,\n            remove: false\n        };\n\n        if (typeof options === 'object') {\n            return $.extend(opts, options);\n        }\n\n        if (typeof options === 'boolean') {\n            opts.byRow = options;\n        } else if (options === 'remove') {\n            opts.remove = true;\n        }\n\n        return opts;\n    };\n\n    /*\n    *  matchHeight\n    *  plugin definition\n    */\n\n    var matchHeight = $.fn.matchHeight = function(options) {\n        var opts = _parseOptions(options);\n\n        // handle remove\n        if (opts.remove) {\n            var that = this;\n\n            // remove fixed height from all selected elements\n            this.css(opts.property, '');\n\n            // remove selected elements from all groups\n            $.each(matchHeight._groups, function(key, group) {\n                group.elements = group.elements.not(that);\n            });\n\n            // TODO: cleanup empty groups\n\n            return this;\n        }\n\n        if (this.length <= 1 && !opts.target) {\n            return this;\n        }\n\n        // keep track of this group so we can re-apply later on load and resize events\n        matchHeight._groups.push({\n            elements: this,\n            options: opts\n        });\n\n        // match each element's height to the tallest element in the selection\n        matchHeight._apply(this, opts);\n\n        return this;\n    };\n\n    /*\n    *  plugin global options\n    */\n\n    matchHeight.version = '0.7.2';\n    matchHeight._groups = [];\n    matchHeight._throttle = 80;\n    matchHeight._maintainScroll = false;\n    matchHeight._beforeUpdate = null;\n    matchHeight._afterUpdate = null;\n    matchHeight._rows = _rows;\n    matchHeight._parse = _parse;\n    matchHeight._parseOptions = _parseOptions;\n\n    /*\n    *  matchHeight._apply\n    *  apply matchHeight to given elements\n    */\n\n    matchHeight._apply = function(elements, options) {\n        var opts = _parseOptions(options),\n            $elements = $(elements),\n            rows = [$elements];\n\n        // take note of scroll position\n        var scrollTop = $(window).scrollTop(),\n            htmlHeight = $('html').outerHeight(true);\n\n        // get hidden parents\n        var $hiddenParents = $elements.parents().filter(':hidden');\n\n        // cache the original inline style\n        $hiddenParents.each(function() {\n            var $that = $(this);\n            $that.data('style-cache', $that.attr('style'));\n        });\n\n        // temporarily must force hidden parents visible\n        $hiddenParents.css('display', 'block');\n\n        // get rows if using byRow, otherwise assume one row\n        if (opts.byRow && !opts.target) {\n\n            // must first force an arbitrary equal height so floating elements break evenly\n            $elements.each(function() {\n                var $that = $(this),\n                    display = $that.css('display');\n\n                // temporarily force a usable display value\n                if (display !== 'inline-block' && display !== 'flex' && display !== 'inline-flex') {\n                    display = 'block';\n                }\n\n                // cache the original inline style\n                $that.data('style-cache', $that.attr('style'));\n\n                $that.css({\n                    'display': display,\n                    'padding-top': '0',\n                    'padding-bottom': '0',\n                    'margin-top': '0',\n                    'margin-bottom': '0',\n                    'border-top-width': '0',\n                    'border-bottom-width': '0',\n                    'height': '100px',\n                    'overflow': 'hidden'\n                });\n            });\n\n            // get the array of rows (based on element top position)\n            rows = _rows($elements);\n\n            // revert original inline styles\n            $elements.each(function() {\n                var $that = $(this);\n                $that.attr('style', $that.data('style-cache') || '');\n            });\n        }\n\n        $.each(rows, function(key, row) {\n            var $row = $(row),\n                targetHeight = 0;\n\n            if (!opts.target) {\n                // skip apply to rows with only one item\n                if (opts.byRow && $row.length <= 1) {\n                    $row.css(opts.property, '');\n                    return;\n                }\n\n                // iterate the row and find the max height\n                $row.each(function(){\n                    var $that = $(this),\n                        style = $that.attr('style'),\n                        display = $that.css('display');\n\n                    // temporarily force a usable display value\n                    if (display !== 'inline-block' && display !== 'flex' && display !== 'inline-flex') {\n                        display = 'block';\n                    }\n\n                    // ensure we get the correct actual height (and not a previously set height value)\n                    var css = { 'display': display };\n                    css[opts.property] = '';\n                    $that.css(css);\n\n                    // find the max height (including padding, but not margin)\n                    if ($that.outerHeight(false) > targetHeight) {\n                        targetHeight = $that.outerHeight(false);\n                    }\n\n                    // revert styles\n                    if (style) {\n                        $that.attr('style', style);\n                    } else {\n                        $that.css('display', '');\n                    }\n                });\n            } else {\n                // if target set, use the height of the target element\n                targetHeight = opts.target.outerHeight(false);\n            }\n\n            // iterate the row and apply the height to all elements\n            $row.each(function(){\n                var $that = $(this),\n                    verticalPadding = 0;\n\n                // don't apply to a target\n                if (opts.target && $that.is(opts.target)) {\n                    return;\n                }\n\n                // handle padding and border correctly (required when not using border-box)\n                if ($that.css('box-sizing') !== 'border-box') {\n                    verticalPadding += _parse($that.css('border-top-width')) + _parse($that.css('border-bottom-width'));\n                    verticalPadding += _parse($that.css('padding-top')) + _parse($that.css('padding-bottom'));\n                }\n\n                // set the height (accounting for padding and border)\n                $that.css(opts.property, (targetHeight - verticalPadding) + 'px');\n            });\n        });\n\n        // revert hidden parents\n        $hiddenParents.each(function() {\n            var $that = $(this);\n            $that.attr('style', $that.data('style-cache') || null);\n        });\n\n        // restore scroll position if enabled\n        if (matchHeight._maintainScroll) {\n            $(window).scrollTop((scrollTop / htmlHeight) * $('html').outerHeight(true));\n        }\n\n        return this;\n    };\n\n    /*\n    *  matchHeight._applyDataApi\n    *  applies matchHeight to all elements with a data-match-height attribute\n    */\n\n    matchHeight._applyDataApi = function() {\n        var groups = {};\n\n        // generate groups by their groupId set by elements using data-match-height\n        $('[data-match-height], [data-mh]').each(function() {\n            var $this = $(this),\n                groupId = $this.attr('data-mh') || $this.attr('data-match-height');\n\n            if (groupId in groups) {\n                groups[groupId] = groups[groupId].add($this);\n            } else {\n                groups[groupId] = $this;\n            }\n        });\n\n        // apply matchHeight to each group\n        $.each(groups, function() {\n            this.matchHeight(true);\n        });\n    };\n\n    /*\n    *  matchHeight._update\n    *  updates matchHeight on all current groups with their correct options\n    */\n\n    var _update = function(event) {\n        if (matchHeight._beforeUpdate) {\n            matchHeight._beforeUpdate(event, matchHeight._groups);\n        }\n\n        $.each(matchHeight._groups, function() {\n            matchHeight._apply(this.elements, this.options);\n        });\n\n        if (matchHeight._afterUpdate) {\n            matchHeight._afterUpdate(event, matchHeight._groups);\n        }\n    };\n\n    matchHeight._update = function(throttle, event) {\n        // prevent update if fired from a resize event\n        // where the viewport width hasn't actually changed\n        // fixes an event looping bug in IE8\n        if (event && event.type === 'resize') {\n            var windowWidth = $(window).width();\n            if (windowWidth === _previousResizeWidth) {\n                return;\n            }\n            _previousResizeWidth = windowWidth;\n        }\n\n        // throttle updates\n        if (!throttle) {\n            _update(event);\n        } else if (_updateTimeout === -1) {\n            _updateTimeout = setTimeout(function() {\n                _update(event);\n                _updateTimeout = -1;\n            }, matchHeight._throttle);\n        }\n    };\n\n    /*\n    *  bind events\n    */\n\n    // apply on DOM ready event\n    $(matchHeight._applyDataApi);\n\n    // use on or bind where supported\n    var on = $.fn.on ? 'on' : 'bind';\n\n    // update heights on load and resize events\n    $(window)[on]('load', function(event) {\n        matchHeight._update(false, event);\n    });\n\n    // throttled update heights on resize events\n    $(window)[on]('resize orientationchange', function(event) {\n        matchHeight._update(true, event);\n    });\n\n});\n","/*!\n * jQuery JavaScript Library v3.1.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2016-09-22T22:30Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar document = window.document;\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\n\n\n\tfunction DOMEval( code, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar script = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.1.1\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android <=4.0 only\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\t// Matches dashed string for camelizing\n\trmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g,\n\n\t// Used by jQuery.camelCase as callback to replace()\n\tfcamelCase = function( all, letter ) {\n\t\treturn letter.toUpperCase();\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !jQuery.isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = jQuery.isArray( copy ) ) ) ) {\n\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && jQuery.isArray( src ) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject( src ) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisFunction: function( obj ) {\n\t\treturn jQuery.type( obj ) === \"function\";\n\t},\n\n\tisArray: Array.isArray,\n\n\tisWindow: function( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t},\n\n\tisNumeric: function( obj ) {\n\n\t\t// As of jQuery 3.0, isNumeric is limited to\n\t\t// strings and numbers (primitives or objects)\n\t\t// that can be coerced to finite numbers (gh-2662)\n\t\tvar type = jQuery.type( obj );\n\t\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t\t// subtraction forces infinities to NaN\n\t\t\t!isNaN( obj - parseFloat( obj ) );\n\t},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\n\t\t/* eslint-disable no-unused-vars */\n\t\t// See https://github.com/eslint/eslint/issues/6125\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\ttype: function( obj ) {\n\t\tif ( obj == null ) {\n\t\t\treturn obj + \"\";\n\t\t}\n\n\t\t// Support: Android <=2.3 only (functionish RegExp)\n\t\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\t\ttypeof obj;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code ) {\n\t\tDOMEval( code );\n\t},\n\n\t// Convert dashed to camelCase; used by the css and data modules\n\t// Support: IE <=9 - 11, Edge 12 - 13\n\t// Microsoft forgot to hump their vendor prefix (#9572)\n\tcamelCase: function( string ) {\n\t\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n\t},\n\n\tnodeName: function( elem, name ) {\n\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android <=4.0 only\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// Bind a function to a context, optionally partially applying any\n\t// arguments.\n\tproxy: function( fn, context ) {\n\t\tvar tmp, args, proxy;\n\n\t\tif ( typeof context === \"string\" ) {\n\t\t\ttmp = fn[ context ];\n\t\t\tcontext = fn;\n\t\t\tfn = tmp;\n\t\t}\n\n\t\t// Quick check to determine if target is callable, in the spec\n\t\t// this throws a TypeError, but we will just return undefined.\n\t\tif ( !jQuery.isFunction( fn ) ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Simulated bind\n\t\targs = slice.call( arguments, 2 );\n\t\tproxy = function() {\n\t\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t\t};\n\n\t\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\t\treturn proxy;\n\t},\n\n\tnow: Date.now,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = jQuery.type( obj );\n\n\tif ( type === \"function\" || jQuery.isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.3\n * https://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2016-08-08\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n\t\t\"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\n\trattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tdisabledAncestor = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && (\"form\" in elem || \"label\" in elem);\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\n\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\t\tsetDocument( context );\n\t\t}\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( (m = match[1]) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[2] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!compilerCache[ selector + \" \" ] &&\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\n\n\t\t\t\tif ( nodeType !== 1 ) {\n\t\t\t\t\tnewContext = context;\n\t\t\t\t\tnewSelector = selector;\n\n\t\t\t\t// qSA looks outside Element context, which is not what we want\n\t\t\t\t// Thanks to Andrew Dupont for this workaround technique\n\t\t\t\t// Support: IE <=8\n\t\t\t\t// Exclude object elements\n\t\t\t\t} else if ( context.nodeName.toLowerCase() !== \"object\" ) {\n\n\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\tif ( (nid = context.getAttribute( \"id\" )) ) {\n\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.setAttribute( \"id\", (nid = expando) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[i] = \"#\" + nid + \" \" + toSelector( groups[i] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\t\t\t\t}\n\n\t\t\t\tif ( newSelector ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + \" \" ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement(\"fieldset\");\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split(\"|\"),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\t\tdisabledAncestor( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\t// documentElement is verified for cases where it doesn't yet exist\n\t// (such as loading iframes in IE - #4833)\n\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9-11, Edge\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\tif ( preferredDoc !== document &&\n\t\t(subWindow = document.defaultView) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute(\"className\");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert(function( el ) {\n\t\tel.appendChild( document.createComment(\"\") );\n\t\treturn !el.getElementsByTagName(\"*\").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t});\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[\"ID\"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[\"ID\"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode(\"id\");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( (elem = elems[i++]) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( el ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll(\"[msallowcapture^='']\").length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll(\"[selected]\").length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll(\":checked\").length ) {\n\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement(\"input\");\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll(\"[name=d]\").length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll(\":enabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll(\":disabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll(\"*,:x\");\n\t\t\trbuggyQSA.push(\",.*:\");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( el ) {\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === document ? -1 :\n\t\t\t\tb === document ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\t// Make sure that attribute selectors are quoted\n\texpr = expr.replace( rattributeQuotes, \"='$1']\" );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!compilerCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn (sel + \"\").replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === \"~=\" ) {\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t\"has\": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t\"contains\": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( (oldCache = uniqueCache[ key ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( el ) {\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement(\"fieldset\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n\taddHandle( \"value\", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( el ) {\n\treturn el.getAttribute(\"disabled\") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\nvar risSimple = /^.[^:#\\[\\.,]*$/;\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( jQuery.isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Simple selector that can be filtered directly, removing non-Elements\n\tif ( risSimple.test( qualifier ) ) {\n\t\treturn jQuery.filter( qualifier, elements, not );\n\t}\n\n\t// Complex selector, compare the two sets, removing non-Elements\n\tqualifier = jQuery.filter( qualifier, elements );\n\treturn jQuery.grep( elements, function( elem ) {\n\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;\n\t} );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( jQuery.isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( jQuery.isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\treturn elem.contentDocument || jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( jQuery.isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && jQuery.type( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && jQuery.isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Support: Android 4.0 only\n\t\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\t\tresolve.call( undefined, value );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.call( undefined, value );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && jQuery.isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( jQuery.isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the master Deferred\n\t\t\tmaster = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tmaster.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( master.state() === \"pending\" ||\n\t\t\t\tjQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn master.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), master.reject );\n\t\t}\n\n\t\treturn master.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Hold (or release) the ready event\n\tholdReady: function( hold ) {\n\t\tif ( hold ) {\n\t\t\tjQuery.readyWait++;\n\t\t} else {\n\t\t\tjQuery.ready( true );\n\t\t}\n\t},\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( jQuery.type( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !jQuery.isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ jQuery.camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ jQuery.camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( jQuery.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( jQuery.camelCase );\n\t\t\t} else {\n\t\t\t\tkey = jQuery.camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = jQuery.camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || jQuery.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tjQuery.contains( elem.ownerDocument, elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\nvar swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted,\n\t\tscale = 1,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\tdo {\n\n\t\t\t// If previous iteration zeroed out, double until we get *something*.\n\t\t\t// Use string for doubling so we don't accidentally see scale as unchanged below\n\t\t\tscale = scale || \".5\";\n\n\t\t\t// Adjust and apply\n\t\t\tinitialInUnit = initialInUnit / scale;\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Update scale, tolerating zero or NaN from tween.cur()\n\t\t// Break the loop if scale is unchanged or perfect, or if we've just had enough.\n\t\t} while (\n\t\t\tscale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations\n\t\t);\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]+)/i );\n\nvar rscriptType = ( /^$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// Support: IE <=9 only\n\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\n// Support: IE <=9 only\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && jQuery.nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, contains, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( jQuery.type( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tcontains = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( contains ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\nvar documentElement = document.documentElement;\n\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 only\n// See #13393 for more info\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tvar event = jQuery.event.fix( nativeEvent );\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\t\t\thandlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\tif ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: jQuery.isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tfocus: {\n\n\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {\n\t\t\t\t\tthis.focus();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusin\"\n\t\t},\n\t\tblur: {\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this === safeActiveElement() && this.blur ) {\n\t\t\t\t\tthis.blur();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusout\"\n\t\t},\n\t\tclick: {\n\n\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this.type === \"checkbox\" && this.click && jQuery.nodeName( this, \"input\" ) ) {\n\t\t\t\t\tthis.click();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, don't fire native .click() on links\n\t\t\t_default: function( event ) {\n\t\t\t\treturn jQuery.nodeName( event.target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (#504, #13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || jQuery.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\n\twhich: function( event ) {\n\t\tvar button = event.button;\n\n\t\t// Add which for key events\n\t\tif ( event.which == null && rkeyEvent.test( event.type ) ) {\n\t\t\treturn event.charCode != null ? event.charCode : event.keyCode;\n\t\t}\n\n\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\tif ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {\n\t\t\tif ( button & 1 ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ( button & 2 ) {\n\t\t\t\treturn 3;\n\t\t\t}\n\n\t\t\tif ( button & 4 ) {\n\t\t\t\treturn 2;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn event.which;\n\t}\n}, jQuery.event.addProp );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t/* eslint-disable max-len */\n\n\t// See https://github.com/eslint/eslint/issues/3229\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n\n\t/* eslint-enable */\n\n\t// Support: IE <=10 - 11, Edge 12 - 13\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trscriptTypeMasked = /^true\\/(.*)/,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\nfunction manipulationTarget( elem, content ) {\n\tif ( jQuery.nodeName( elem, \"table\" ) &&\n\t\tjQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn elem.getElementsByTagName( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tvar match = rscriptTypeMasked.exec( elem.type );\n\n\tif ( match ) {\n\t\telem.type = match[ 1 ];\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.access( src );\n\t\tpdataCur = dataPriv.set( dest, pdataOld );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdelete pdataCur.handle;\n\t\t\tpdataCur.events = {};\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = concat.apply( [], args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tisFunction = jQuery.isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( isFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( isFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && jQuery.contains( node.ownerDocument, node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rmargin = ( /^margin/ );\n\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdiv.style.cssText =\n\t\t\t\"box-sizing:border-box;\" +\n\t\t\t\"position:relative;display:block;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"top:1%;width:50%\";\n\t\tdiv.innerHTML = \"\";\n\t\tdocumentElement.appendChild( container );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = divStyle.marginLeft === \"2px\";\n\t\tboxSizingReliableVal = divStyle.width === \"4px\";\n\n\t\t// Support: Android 4.0 - 4.3 only\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.marginRight = \"50%\";\n\t\tpixelMarginRightVal = divStyle.marginRight === \"4px\";\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tcontainer.style.cssText = \"border:0;width:8px;height:0;top:0;left:-9999px;\" +\n\t\t\"padding:0;margin-top:1px;position:absolute\";\n\tcontainer.appendChild( div );\n\n\tjQuery.extend( support, {\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelMarginRight: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelMarginRightVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// Support: IE <=9 only\n\t// getPropertyValue is only needed for .css('filter') (#12537)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( ret === \"\" && !jQuery.contains( elem.ownerDocument, elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t},\n\n\tcssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style;\n\n// Return a css property mapped to a potentially vendor prefixed property\nfunction vendorPropName( name ) {\n\n\t// Shortcut for names that are not vendor prefixed\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {\n\tvar i,\n\t\tval = 0;\n\n\t// If we already have the right measurement, avoid augmentation\n\tif ( extra === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\ti = 4;\n\n\t// Otherwise initialize for horizontal or vertical properties\n\t} else {\n\t\ti = name === \"width\" ? 1 : 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin, so add it if we want it\n\t\tif ( extra === \"margin\" ) {\n\t\t\tval += jQuery.css( elem, extra + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\tif ( isBorderBox ) {\n\n\t\t\t// border-box includes padding, so remove it if we want content\n\t\t\tif ( extra === \"content\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// At this point, extra isn't border nor margin, so remove border\n\t\t\tif ( extra !== \"margin\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t} else {\n\n\t\t\t// At this point, extra isn't content, so add padding\n\t\t\tval += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// At this point, extra isn't content nor padding, so add border\n\t\t\tif ( extra !== \"padding\" ) {\n\t\t\t\tval += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn val;\n}\n\nfunction getWidthOrHeight( elem, name, extra ) {\n\n\t// Start with offset property, which is equivalent to the border-box value\n\tvar val,\n\t\tvalueIsBorderBox = true,\n\t\tstyles = getStyles( elem ),\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t// Support: IE <=11 only\n\t// Running getBoundingClientRect on a disconnected node\n\t// in IE throws an error.\n\tif ( elem.getClientRects().length ) {\n\t\tval = elem.getBoundingClientRect()[ name ];\n\t}\n\n\t// Some non-html elements return undefined for offsetWidth, so check for null/undefined\n\t// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\n\t// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\n\tif ( val <= 0 || val == null ) {\n\n\t\t// Fall back to computed then uncomputed css if necessary\n\t\tval = curCSS( elem, name, styles );\n\t\tif ( val < 0 || val == null ) {\n\t\t\tval = elem.style[ name ];\n\t\t}\n\n\t\t// Computed unit is not pixels. Stop here and return.\n\t\tif ( rnumnonpx.test( val ) ) {\n\t\t\treturn val;\n\t\t}\n\n\t\t// Check for style in case a browser which returns unreliable values\n\t\t// for getComputedStyle silently falls back to the reliable elem.style\n\t\tvalueIsBorderBox = isBorderBox &&\n\t\t\t( support.boxSizingReliable() || val === elem.style[ name ] );\n\n\t\t// Normalize \"\", auto, and prepare for extra\n\t\tval = parseFloat( val ) || 0;\n\t}\n\n\t// Use the active box-sizing model to add/subtract irrelevant styles\n\treturn ( val +\n\t\taugmentWidthOrHeight(\n\t\t\telem,\n\t\t\tname,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {\n\t\t\"float\": \"cssFloat\"\n\t},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = jQuery.camelCase( name ),\n\t\t\tstyle = elem.style;\n\n\t\tname = jQuery.cssProps[ origName ] ||\n\t\t\t( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\tif ( type === \"number\" ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tstyle[ name ] = value;\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = jQuery.camelCase( name );\n\n\t\t// Make sure that we're working with the right name\n\t\tname = jQuery.cssProps[ origName ] ||\n\t\t\t( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( i, name ) {\n\tjQuery.cssHooks[ name ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, name, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, name, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = extra && getStyles( elem ),\n\t\t\t\tsubtract = extra && augmentWidthOrHeight(\n\t\t\t\t\telem,\n\t\t\t\t\tname,\n\t\t\t\t\textra,\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\t\tstyles\n\t\t\t\t);\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ name ] = value;\n\t\t\t\tvalue = jQuery.css( elem, name );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( !rmargin.test( prefix ) ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( jQuery.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 &&\n\t\t\t\t( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, timerId,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction raf() {\n\tif ( timerId ) {\n\t\twindow.requestAnimationFrame( raf );\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = jQuery.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 13\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = jQuery.camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( jQuery.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t} else {\n\t\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( jQuery.isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tjQuery.proxy( result.stop, result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( jQuery.isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\t// attach callbacks from options\n\treturn animation.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( jQuery.isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tjQuery.isFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !jQuery.isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off or if document is hidden\n\tif ( jQuery.fx.off || document.hidden ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( jQuery.isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = jQuery.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Checks the timer has not already been removed\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tif ( timer() ) {\n\t\tjQuery.fx.start();\n\t} else {\n\t\tjQuery.timers.pop();\n\t}\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( !timerId ) {\n\t\ttimerId = window.requestAnimationFrame ?\n\t\t\twindow.requestAnimationFrame( raf ) :\n\t\t\twindow.setInterval( jQuery.fx.tick, jQuery.fx.interval );\n\t}\n};\n\njQuery.fx.stop = function() {\n\tif ( window.cancelAnimationFrame ) {\n\t\twindow.cancelAnimationFrame( timerId );\n\t} else {\n\t\twindow.clearInterval( timerId );\n\t}\n\n\ttimerId = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tjQuery.nodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnothtmlwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnothtmlwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value;\n\n\t\tif ( typeof stateVal === \"boolean\" && type === \"string\" ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( type === \"string\" ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = value.match( rnothtmlwhite ) || [];\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, isFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tisFunction = jQuery.isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( jQuery.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!jQuery.nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( jQuery.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\t\t\t\t\telem[ type ]();\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\njQuery.each( ( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n} );\n\njQuery.fn.extend( {\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\n\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = jQuery.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( jQuery.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && jQuery.type( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = jQuery.isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( jQuery.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\toriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( jQuery.isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 13\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available, append data to url\n\t\t\tif ( s.data ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce++ ) + uncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( jQuery.isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\n\njQuery._evalUrl = function( url ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\t\t\"throws\": true\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar isFunction = jQuery.isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain requests\n\tif ( s.crossDomain ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" ).prop( {\n\t\t\t\t\tcharset: s.scriptCharset,\n\t\t\t\t\tsrc: s.url\n\t\t\t\t} ).on(\n\t\t\t\t\t\"load error\",\n\t\t\t\t\tcallback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( jQuery.isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\n/**\n * Gets a window from an element\n */\nfunction getWindow( elem ) {\n\treturn jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;\n}\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( jQuery.isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar docElem, win, rect, doc,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\trect = elem.getBoundingClientRect();\n\n\t\t// Make sure element is not hidden (display: none)\n\t\tif ( rect.width || rect.height ) {\n\t\t\tdoc = elem.ownerDocument;\n\t\t\twin = getWindow( doc );\n\t\t\tdocElem = doc.documentElement;\n\n\t\t\treturn {\n\t\t\t\ttop: rect.top + win.pageYOffset - docElem.clientTop,\n\t\t\t\tleft: rect.left + win.pageXOffset - docElem.clientLeft\n\t\t\t};\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden elements (gh-2310)\n\t\treturn rect;\n\t},\n\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n\t\t// because it is its only offset parent\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume getBoundingClientRect is there when computed position is fixed\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\n\t\t\t// Get *real* offsetParent\n\t\t\toffsetParent = this.offsetParent();\n\n\t\t\t// Get correct offsets\n\t\t\toffset = this.offset();\n\t\t\tif ( !jQuery.nodeName( offsetParent[ 0 ], \"html\" ) ) {\n\t\t\t\tparentOffset = offsetParent.offset();\n\t\t\t}\n\n\t\t\t// Add offsetParent borders\n\t\t\tparentOffset = {\n\t\t\t\ttop: parentOffset.top + jQuery.css( offsetParent[ 0 ], \"borderTopWidth\", true ),\n\t\t\t\tleft: parentOffset.left + jQuery.css( offsetParent[ 0 ], \"borderLeftWidth\", true )\n\t\t\t};\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\t\t\tvar win = getWindow( elem );\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n\t\tfunction( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t}\n} );\n\njQuery.parseJSON = JSON.parse;\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( typeof define === \"function\" && define.amd ) {\n\tdefine( \"jquery\", [], function() {\n\t\treturn jQuery;\n\t} );\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\n\nreturn jQuery;\n} );\n","/*!\n * JavaScript Cookie v2.2.0\n * https://github.com/js-cookie/js-cookie\n *\n * Copyright 2006, 2015 Klaus Hartl & Fagner Brack\n * Released under the MIT license\n */\n;(function (factory) {\n\tvar registeredInModuleLoader = false;\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine(factory);\n\t\tregisteredInModuleLoader = true;\n\t}\n\tif (typeof exports === 'object') {\n\t\tmodule.exports = factory();\n\t\tregisteredInModuleLoader = true;\n\t}\n\tif (!registeredInModuleLoader) {\n\t\tvar OldCookies = window.Cookies;\n\t\tvar api = window.Cookies = factory();\n\t\tapi.noConflict = function () {\n\t\t\twindow.Cookies = OldCookies;\n\t\t\treturn api;\n\t\t};\n\t}\n}(function () {\n\tfunction extend () {\n\t\tvar i = 0;\n\t\tvar result = {};\n\t\tfor (; i < arguments.length; i++) {\n\t\t\tvar attributes = arguments[ i ];\n\t\t\tfor (var key in attributes) {\n\t\t\t\tresult[key] = attributes[key];\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tfunction init (converter) {\n\t\tfunction api (key, value, attributes) {\n\t\t\tvar result;\n\t\t\tif (typeof document === 'undefined') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Write\n\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tattributes = extend({\n\t\t\t\t\tpath: '/'\n\t\t\t\t}, api.defaults, attributes);\n\n\t\t\t\tif (typeof attributes.expires === 'number') {\n\t\t\t\t\tvar expires = new Date();\n\t\t\t\t\texpires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);\n\t\t\t\t\tattributes.expires = expires;\n\t\t\t\t}\n\n\t\t\t\t// We're using \"expires\" because \"max-age\" is not supported by IE\n\t\t\t\tattributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';\n\n\t\t\t\ttry {\n\t\t\t\t\tresult = JSON.stringify(value);\n\t\t\t\t\tif (/^[\\{\\[]/.test(result)) {\n\t\t\t\t\t\tvalue = result;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {}\n\n\t\t\t\tif (!converter.write) {\n\t\t\t\t\tvalue = encodeURIComponent(String(value))\n\t\t\t\t\t\t.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);\n\t\t\t\t} else {\n\t\t\t\t\tvalue = converter.write(value, key);\n\t\t\t\t}\n\n\t\t\t\tkey = encodeURIComponent(String(key));\n\t\t\t\tkey = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);\n\t\t\t\tkey = key.replace(/[\\(\\)]/g, escape);\n\n\t\t\t\tvar stringifiedAttributes = '';\n\n\t\t\t\tfor (var attributeName in attributes) {\n\t\t\t\t\tif (!attributes[attributeName]) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tstringifiedAttributes += '; ' + attributeName;\n\t\t\t\t\tif (attributes[attributeName] === true) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tstringifiedAttributes += '=' + attributes[attributeName];\n\t\t\t\t}\n\t\t\t\treturn (document.cookie = key + '=' + value + stringifiedAttributes);\n\t\t\t}\n\n\t\t\t// Read\n\n\t\t\tif (!key) {\n\t\t\t\tresult = {};\n\t\t\t}\n\n\t\t\t// To prevent the for loop in the first place assign an empty array\n\t\t\t// in case there are no cookies at all. Also prevents odd result when\n\t\t\t// calling \"get()\"\n\t\t\tvar cookies = document.cookie ? document.cookie.split('; ') : [];\n\t\t\tvar rdecode = /(%[0-9A-Z]{2})+/g;\n\t\t\tvar i = 0;\n\n\t\t\tfor (; i < cookies.length; i++) {\n\t\t\t\tvar parts = cookies[i].split('=');\n\t\t\t\tvar cookie = parts.slice(1).join('=');\n\n\t\t\t\tif (!this.json && cookie.charAt(0) === '\"') {\n\t\t\t\t\tcookie = cookie.slice(1, -1);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tvar name = parts[0].replace(rdecode, decodeURIComponent);\n\t\t\t\t\tcookie = converter.read ?\n\t\t\t\t\t\tconverter.read(cookie, name) : converter(cookie, name) ||\n\t\t\t\t\t\tcookie.replace(rdecode, decodeURIComponent);\n\n\t\t\t\t\tif (this.json) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tcookie = JSON.parse(cookie);\n\t\t\t\t\t\t} catch (e) {}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (key === name) {\n\t\t\t\t\t\tresult = cookie;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!key) {\n\t\t\t\t\t\tresult[name] = cookie;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\tapi.set = api;\n\t\tapi.get = function (key) {\n\t\t\treturn api.call(api, key);\n\t\t};\n\t\tapi.getJSON = function () {\n\t\t\treturn api.apply({\n\t\t\t\tjson: true\n\t\t\t}, [].slice.call(arguments));\n\t\t};\n\t\tapi.defaults = {};\n\n\t\tapi.remove = function (key, attributes) {\n\t\t\tapi(key, '', extend(attributes, {\n\t\t\t\texpires: -1\n\t\t\t}));\n\t\t};\n\n\t\tapi.withConverter = init;\n\n\t\treturn api;\n\t}\n\n\treturn init(function () {});\n}));\n","var State = require('./lib/state')\nvar tokenize = require('./lib/tokenize')\n\nvar tokenizedCache = {}\n\nmodule.exports = function jsonQuery (query, options) {\n\n  // extract params for ['test[param=?]', 'value'] type queries\n  var params = options && options.params || null\n  if (Array.isArray(query)) {\n    params = query.slice(1)\n    query = query[0]\n  }\n\n  if (!tokenizedCache[query]) {\n    tokenizedCache[query] = tokenize(query, true)\n  }\n\n  return handleQuery(tokenizedCache[query], options, params)\n}\n\n\nmodule.exports.lastParent = function (query) {\n  var last = query.parents[query.parents.length - 1]\n  if (last) {\n    return last.value\n  } else {\n    return null\n  }\n}\n\n\nfunction handleQuery (tokens, options, params) {\n  var state = new State(options, params, handleQuery)\n\n  for (var i = 0; i < tokens.length; i++) {\n    if (handleToken(tokens[i], state)) {\n      break\n    }\n  }\n\n  // flush\n  handleToken(null, state)\n\n  // set databind hooks\n  if (state.currentItem instanceof Object) {\n    state.addReference(state.currentItem)\n  } else {\n    var parentObject = getLastParentObject(state.currentParents)\n    if (parentObject) {\n      state.addReference(parentObject)\n    }\n  }\n\n  return {\n    value: state.currentItem,\n    key: state.currentKey,\n    references: state.currentReferences,\n    parents: state.currentParents\n  }\n}\n\nfunction handleToken (token, state) {\n  // state: setCurrent, getValue, getValues, resetCurrent, deepQuery, rootContext, currentItem, currentKey, options, filters\n\n  if (token == null) {\n    // process end of query\n    if (!state.currentItem && state.options.force) {\n      state.force(state.options.force)\n    }\n  } else if (token.values) {\n    if (state.currentItem) {\n      var keys = Object.keys(state.currentItem)\n      var values = []\n      keys.forEach(function (key) {\n        if (token.deep && Array.isArray(state.currentItem[key])) {\n          state.currentItem[key].forEach(function (item) {\n            values.push(item)\n          })\n        } else {\n          values.push(state.currentItem[key])\n        }\n      })\n      state.setCurrent(keys, values)\n    } else {\n      state.setCurrent(keys, [])\n    }\n  } else if (token.get) {\n    var key = state.getValue(token.get)\n    if (shouldOverride(state, key)) {\n      state.setCurrent(key, state.override[key])\n    } else {\n      if (state.currentItem || (state.options.force && state.force({}))) {\n        if (isDeepAccessor(state.currentItem, key) || token.multiple) {\n          var values = state.currentItem.map(function (item) {\n            return item[key]\n          }).filter(isDefined)\n\n          values = Array.prototype.concat.apply([], values) // flatten\n\n          state.setCurrent(key, values)\n        } else {\n          state.setCurrent(key, state.currentItem[key])\n        }\n      } else {\n        state.setCurrent(key, null)\n      }\n    }\n  } else if (token.select) {\n    if (Array.isArray(state.currentItem) || (state.options.force && state.force([]))) {\n      var match = (token.boolean ? token.select : [token]).map(function (part) {\n        if (part.op === ':') {\n          var key = state.getValue(part.select[0])\n          return {\n            func: function (item) {\n              if (key) {\n                item = item[key]\n              }\n              return state.getValueFrom(part.select[1], item)\n            },\n            negate: part.negate,\n            booleanOp: part.booleanOp\n          }\n        } else {\n          var selector = state.getValues(part.select)\n          if (!state.options.allowRegexp && part.op === '~' && selector[1] instanceof RegExp) throw new Error('options.allowRegexp is not enabled.')\n          return {\n            key: selector[0],\n            value: selector[1],\n            negate: part.negate,\n            booleanOp: part.booleanOp,\n            op: part.op\n          }\n        }\n      })\n\n      if (token.multiple) {\n        var keys = []\n        var value = []\n        state.currentItem.forEach(function (item, i) {\n          if (matches(item, match)) {\n            keys.push(i)\n            value.push(item)\n          }\n        })\n        state.setCurrent(keys, value)\n      } else {\n        if (!state.currentItem.some(function (item, i) {\n          if (matches(item, match)) {\n            state.setCurrent(i, item)\n            return true\n          }\n        })) {\n          state.setCurrent(null, null)\n        }\n      }\n    } else {\n      state.setCurrent(null, null)\n    }\n  } else if (token.root) {\n    state.resetCurrent()\n    if (token.args && token.args.length) {\n      state.setCurrent(null, state.getValue(token.args[0]))\n    } else {\n      state.setCurrent(null, state.rootContext)\n    }\n  } else if (token.parent) {\n    state.resetCurrent()\n    state.setCurrent(null, state.options.parent)\n  } else if (token.or) {\n    if (state.currentItem) {\n      return true\n    } else {\n      state.resetCurrent()\n      state.setCurrent(null, state.context)\n    }\n  } else if (token.filter) {\n    var helper = state.getLocal(token.filter) || state.getGlobal(token.filter)\n    if (typeof helper === 'function') {\n      // function(input, args...)\n      var values = state.getValues(token.args || [])\n      var result = helper.apply(state.options, [state.currentItem].concat(values))\n      state.setCurrent(null, result)\n    } else {\n      // fallback to old filters\n      var filter = state.getFilter(token.filter)\n      if (typeof filter === 'function') {\n        var values = state.getValues(token.args || [])\n        var result = filter.call(state.options, state.currentItem, {args: values, state: state, data: state.rootContext})\n        state.setCurrent(null, result)\n      }\n    }\n  } else if (token.deep) {\n    if (state.currentItem) {\n      if (token.deep.length === 0) {\n        return\n      }\n\n      var result = state.deepQuery(state.currentItem, token.deep, state.options)\n      if (result) {\n        state.setCurrent(result.key, result.value)\n        for (var i = 0; i < result.parents.length; i++) {\n          state.currentParents.push(result.parents[i])\n        }\n      } else {\n        state.setCurrent(null, null)\n      }\n    } else {\n      state.currentItem = null\n    }\n  }\n}\n\nfunction matches (item, parts) {\n  var result = false\n  for (var i = 0; i < parts.length; i++) {\n    var opts = parts[i]\n    var r = false\n    if (opts.func) {\n      r = opts.func(item)\n    } else if (opts.op === '~') {\n      if (opts.value instanceof RegExp) {\n        r = item[opts.key] && !!item[opts.key].match(opts.value)\n      } else {\n        r = item[opts.key] && !!~item[opts.key].indexOf(opts.value)\n      }\n    } else if (opts.op === '=') {\n      if ((item[opts.key] === true && opts.value === 'true') || (item[opts.key] === false && opts.value === 'false')) {\n        r = true\n      } else {\n        r = item[opts.key] == opts.value\n      }\n    } else if (opts.op === '>') {\n      r = item[opts.key] > opts.value\n    } else if (opts.op === '<') {\n      r = item[opts.key] < opts.value\n    } else if (opts.op === '>=') {\n      r = item[opts.key] >= opts.value\n    } else if (opts.op === '<=') {\n      r = item[opts.key] <= opts.value\n    }\n\n    if (opts.negate) {\n      r = !r\n    }\n    if (opts.booleanOp === '&') {\n      result = result && r\n    } else if (opts.booleanOp === '|') {\n      result = result || r\n    } else {\n      result = r\n    }\n  }\n\n  return result\n}\n\nfunction isDefined(value) {\n  return typeof value !== 'undefined'\n}\n\nfunction shouldOverride (state, key) {\n  return state.override && state.currentItem === state.rootContext && state.override[key] !== undefined\n}\n\nfunction isDeepAccessor (currentItem, key) {\n  return currentItem instanceof Array && parseInt(key) != key\n}\n\nfunction getLastParentObject (parents) {\n  for (var i = 0; i < parents.length; i++) {\n    if (!(parents[i + 1]) || !(parents[i + 1].value instanceof Object)) {\n      return parents[i].value\n    }\n  }\n}\n","module.exports = depthSplit\n\nfunction depthSplit (text, delimiter, opts) {\n  var max = opts && opts.max || Infinity\n  var includeDelimiters = opts && opts.includeDelimiters || false\n\n  var depth = 0\n  var start = 0\n  var result = []\n  var zones = []\n\n  text.replace(/([\\[\\(\\{])|([\\]\\)\\}])/g, function (current, open, close, offset) {\n    if (open) {\n      if (depth === 0) {\n        zones.push([start, offset])\n      }\n      depth += 1\n    } else if (close) {\n      depth -= 1\n      if (depth === 0) {\n        start = offset + current.length\n      }\n    }\n  })\n\n  if (depth === 0 && start < text.length) {\n    zones.push([start, text.length])\n  }\n\n  start = 0\n\n  for (var i = 0; i < zones.length && max > 0; i++) {\n    for (\n      var pos = zones[i][0], match = delimiter.exec(text.slice(pos, zones[i][1]));\n      match && max > 1;\n      pos += match.index + match[0].length, start = pos, match = delimiter.exec(text.slice(pos, zones[i][1]))\n    ) {\n      result.push(text.slice(start, match.index + pos))\n      if (includeDelimiters) {\n        result.push(match[0])\n      }\n      max -= 1\n    }\n  }\n\n  if (start < text.length) {\n    result.push(text.slice(start))\n  }\n\n  return result\n}\n","module.exports = State\n\nfunction State(options, params, handleQuery){\n\n  options = options || {}\n\n  //this.options = options\n  this.handleQuery = handleQuery\n  this.options = options\n  this.locals = this.options.locals || {}\n  this.globals = this.options.globals || {}\n  this.rootContext = firstNonNull(options.data, options.rootContext, options.context, options.source)\n  this.parent = options.parent\n  this.override = options.override\n  this.filters = options.filters || {}\n  this.params = params || options.params || []\n  this.context = firstNonNull(options.currentItem, options.context, options.source)\n  this.currentItem = firstNonNull(this.context, options.rootContext, options.data)\n  this.currentKey = null\n  this.currentReferences = []\n  this.currentParents = []\n}\n\nState.prototype = {\n\n  // current manipulation\n  setCurrent: function(key, value){\n    if (this.currentItem || this.currentKey || this.currentParents.length>0){\n      this.currentParents.push({key: this.currentKey, value: this.currentItem})\n    }\n    this.currentItem = value\n    this.currentKey = key\n  },\n\n  resetCurrent: function(){\n    this.currentItem = null\n    this.currentKey = null\n    this.currentParents = []\n  },\n\n  force: function(def){\n    var parent = this.currentParents[this.currentParents.length-1]\n    if (!this.currentItem && parent && (this.currentKey != null)){\n      this.currentItem = def || {}\n      parent.value[this.currentKey] = this.currentItem\n    }\n    return !!this.currentItem\n  },\n\n  getLocal: function(localName){\n    if (~localName.indexOf('/')){\n      var result = null\n      var parts = localName.split('/')\n\n      for (var i=0;i<parts.length;i++){\n        var part = parts[i]\n        if (i == 0){\n          result = this.locals[part]\n        } else if (result && result[part]){\n          result = result[part]\n        }\n      }\n\n      return result\n    } else {\n      return this.locals[localName]\n    }\n  },\n\n  getGlobal: function(globalName){\n    if (~globalName.indexOf('/')){\n      var result = null\n      var parts = globalName.split('/')\n\n      for (var i=0;i<parts.length;i++){\n        var part = parts[i]\n        if (i == 0){\n          result = this.globals[part]\n        } else if (result && result[part]){\n          result = result[part]\n        }\n      }\n\n      return result\n    } else {\n      return this.globals[globalName]\n    }\n  },\n\n  getFilter: function(filterName){\n    if (~filterName.indexOf('/')){\n      var result = null\n      var filterParts = filterName.split('/')\n\n      for (var i=0;i<filterParts.length;i++){\n        var part = filterParts[i]\n        if (i == 0){\n          result = this.filters[part]\n        } else if (result && result[part]){\n          result = result[part]\n        }\n      }\n\n      return result\n    } else {\n      return this.filters[filterName]\n    }\n  },\n\n  addReferences: function(references){\n    if (references){\n      references.forEach(this.addReference, this)\n    }\n  },\n\n  addReference: function(ref){\n    if (ref instanceof Object && !~this.currentReferences.indexOf(ref)){\n      this.currentReferences.push(ref)\n    }\n  },\n\n  // helper functions\n  getValues: function(values, callback){\n    return values.map(this.getValue, this)\n  },\n\n  getValue: function (value) {\n    return this.getValueFrom(value, null)\n  },\n\n  getValueFrom: function (value, item) {\n    if (value._param != null){\n      return this.params[value._param]\n    } else if (value._sub){\n\n      var options = copy(this.options)\n      options.force = null\n      options.currentItem = item\n\n      var result = this.handleQuery(value._sub, options, this.params)\n      this.addReferences(result.references)\n      return result.value\n\n    } else {\n      return value\n    }\n  },\n\n  deepQuery: function(source, tokens, options, callback){\n    var keys = Object.keys(source)\n\n    for (var key in source){\n      if (key in source){\n\n        var options = copy(this.options)\n        options.currentItem = source[key]\n\n        var result = this.handleQuery(tokens, options, this.params)\n\n        if (result.value){\n          return result\n        }\n      }\n    }\n\n    return null\n  }\n\n}\n\nfunction firstNonNull(args){\n  for (var i=0;i<arguments.length;i++){\n    if (arguments[i] != null){\n      return arguments[i]\n    }\n  }\n}\n\nfunction copy(obj){\n  var result = {}\n  if (obj){\n    for (var key in obj){\n      if (key in obj){\n        result[key] = obj[key]\n      }\n    }\n  }\n  return result\n}\n","// todo: syntax checking\n// todo: test handle args\nvar depthSplit = require('./depth-split')\n\nmodule.exports = function(query, shouldAssignParamIds){\n  if (!query) return []\n\n  var result = []\n    , prevChar, char\n    , nextChar = query.charAt(0)\n    , bStart = 0\n    , bEnd = 0\n    , partOffset = 0\n    , pos = 0\n    , depth = 0\n    , mode = 'get'\n    , deepQuery = null\n\n  // if query contains params then number them\n  if (shouldAssignParamIds){\n    query = assignParamIds(query)\n  }\n\n  var tokens = {\n    '.': {mode: 'get'},\n    ':': {mode: 'filter'},\n    '|': {handle: 'or'},\n    '[': {open: 'select'},\n    ']': {close: 'select'},\n    '{': {open: 'meta'},\n    '}': {close: 'meta'},\n    '(': {open: 'args'},\n    ')': {close: 'args'}\n  }\n\n  function push(item){\n    if (deepQuery){\n      deepQuery.push(item)\n    } else {\n      result.push(item)\n    }\n  }\n\n  var handlers = {\n    get: function(buffer){\n      var trimmed = typeof buffer === 'string' ? buffer.trim() : null\n      if (trimmed){\n        push({get:trimmed})\n      }\n    },\n    select: function(buffer){\n      if (buffer){\n        push(tokenizeSelect(buffer))\n      } else {\n        // deep query override\n        var x = {deep: []}\n        result.push(x)\n        deepQuery = x.deep\n      }\n    },\n    filter: function(buffer){\n      if (buffer){\n        push({filter:buffer.trim()})\n      }\n    },\n    or: function(){\n      deepQuery = null\n      result.push({or:true})\n      partOffset = i + 1\n    },\n    args: function(buffer){\n      var args = tokenizeArgs(buffer)\n      result[result.length-1].args = args\n    }\n  }\n\n  function handleBuffer(){\n    var buffer = query.slice(bStart, bEnd)\n    if (handlers[mode]){\n      handlers[mode](buffer)\n    }\n    mode = 'get'\n    bStart = bEnd + 1\n  }\n\n  for (var i = 0;i < query.length;i++){\n\n    // update char values\n    prevChar = char; char = nextChar; nextChar = query.charAt(i + 1);\n    pos = i - partOffset\n\n    // root query check\n    if (pos === 0 && (char !== ':' && char !== '.')){\n      result.push({root:true})\n    }\n\n    // parent query check\n    if (pos === 0 && (char === '.' && nextChar === '.')){\n      result.push({parent:true})\n    }\n\n    var token = tokens[char]\n    if (token){\n\n      // set mode\n      if (depth === 0 && (token.mode || token.open)){\n        handleBuffer()\n        mode = token.mode || token.open\n      }\n\n      if (depth === 0 && token.handle){\n        handleBuffer()\n        handlers[token.handle]()\n      }\n\n      if (token.open){\n        depth += 1\n      } else if (token.close){\n        depth -= 1\n      }\n\n      // reset mode to get\n      if (depth === 0 && token.close){\n        handleBuffer()\n      }\n\n    }\n\n    bEnd = i + 1\n\n  }\n\n  handleBuffer()\n  return result\n}\n\nfunction tokenizeArgs(argsQuery){\n  if (argsQuery === ',') return [',']\n  return depthSplit(argsQuery, /,/).map(function(s){\n    return handleSelectPart(s.trim())\n  })\n}\n\nfunction tokenizeSelect (selectQuery) {\n  if (selectQuery === '*') {\n    return {\n      values: true\n    }\n  } else if (selectQuery === '**') {\n    return {\n      values: true,\n      deep: true\n    }\n  }\n\n  var multiple = false\n  if (selectQuery.charAt(0) === '*') {\n    multiple = true\n    selectQuery = selectQuery.slice(1)\n  }\n\n  var booleanParts = depthSplit(selectQuery, /&|\\|/, { includeDelimiters: true })\n  if (booleanParts.length > 1) {\n    var result = [\n      getSelectPart(booleanParts[0].trim())\n    ]\n    for (var i = 1; i < booleanParts.length; i += 2) {\n      var part = getSelectPart(booleanParts[i + 1].trim())\n      if (part) {\n        part.booleanOp = booleanParts[i]\n        result.push(part)\n      }\n    }\n    return {\n      multiple: multiple,\n      boolean: true,\n      select: result\n    }\n  } else {\n    var result = getSelectPart(selectQuery.trim())\n    if (!result) {\n      return {\n        get: handleSelectPart(selectQuery.trim())\n      }\n    } else {\n      if (multiple) {\n        result.multiple = true\n      }\n      return result\n    }\n  }\n}\n\nfunction getSelectPart (selectQuery) {\n  var parts = depthSplit(selectQuery, /(!)?(=|~|\\:|<=|>=|<|>)/, { max: 2, includeDelimiters: true })\n  if (parts.length === 3) {\n    var negate = parts[1].charAt(0) === '!'\n    var key = handleSelectPart(parts[0].trim())\n    var result = {\n      negate: negate,\n      op: negate ? parts[1].slice(1) : parts[1]\n    }\n    if (result.op === ':') {\n      result.select = [key, {_sub: module.exports(':' + parts[2].trim())}]\n    } else if (result.op === '~') {\n      var value = handleSelectPart(parts[2].trim())\n      if (typeof value === 'string') {\n        var reDef = parts[2].trim().match(/^\\/(.*)\\/([a-z]?)$/)\n        if (reDef) {\n          result.select = [key, new RegExp(reDef[1], reDef[2])]\n        } else {\n          result.select = [key, value]\n        }\n      } else {\n        result.select = [key, value]\n      }\n    } else {\n      result.select = [key, handleSelectPart(parts[2].trim())]\n    }\n    return result\n  }\n}\n\nfunction isInnerQuery (text) {\n  return text.charAt(0) === '{' && text.charAt(text.length-1) === '}'\n}\n\nfunction handleSelectPart(part){\n  if (isInnerQuery(part)){\n    var innerQuery = part.slice(1, -1)\n    return {_sub: module.exports(innerQuery)}\n  } else {\n    return paramToken(part)\n  }\n}\n\nfunction paramToken(text){\n  if (text.charAt(0) === '?'){\n    var num = parseInt(text.slice(1))\n    if (!isNaN(num)){\n      return {_param: num}\n    } else {\n      return text\n    }\n  } else {\n    return text\n  }\n}\n\n\n\nfunction assignParamIds(query){\n  var index = 0\n  return query.replace(/\\?/g, function(match){\n    return match + (index++)\n  })\n}\n\nfunction last (array) {\n  return array[array.length - 1]\n}\n","/*! matchMedia() polyfill - Test a CSS media type/query in JS. Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license */\n\nwindow.matchMedia || (window.matchMedia = function() {\n    \"use strict\";\n\n    // For browsers that support matchMedium api such as IE 9 and webkit\n    var styleMedia = (window.styleMedia || window.media);\n\n    // For those that don't support matchMedium\n    if (!styleMedia) {\n        var style       = document.createElement('style'),\n            script      = document.getElementsByTagName('script')[0],\n            info        = null;\n\n        style.type  = 'text/css';\n        style.id    = 'matchmediajs-test';\n\n        script.parentNode.insertBefore(style, script);\n\n        // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers\n        info = ('getComputedStyle' in window) && window.getComputedStyle(style, null) || style.currentStyle;\n\n        styleMedia = {\n            matchMedium: function(media) {\n                var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';\n\n                // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers\n                if (style.styleSheet) {\n                    style.styleSheet.cssText = text;\n                } else {\n                    style.textContent = text;\n                }\n\n                // Test if media query is true or false\n                return info.width === '1px';\n            }\n        };\n    }\n\n    return function(media) {\n        return {\n            matches: styleMedia.matchMedium(media || 'all'),\n            media: media || 'all'\n        };\n    };\n}());\n","/*! npm.im/object-fit-images 3.2.4 */\n'use strict';\n\nvar OFI = 'bfred-it:object-fit-images';\nvar propRegex = /(object-fit|object-position)\\s*:\\s*([-.\\w\\s%]+)/g;\nvar testImg = typeof Image === 'undefined' ? {style: {'object-position': 1}} : new Image();\nvar supportsObjectFit = 'object-fit' in testImg.style;\nvar supportsObjectPosition = 'object-position' in testImg.style;\nvar supportsOFI = 'background-size' in testImg.style;\nvar supportsCurrentSrc = typeof testImg.currentSrc === 'string';\nvar nativeGetAttribute = testImg.getAttribute;\nvar nativeSetAttribute = testImg.setAttribute;\nvar autoModeEnabled = false;\n\nfunction createPlaceholder(w, h) {\n\treturn (\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='\" + w + \"' height='\" + h + \"'%3E%3C/svg%3E\");\n}\n\nfunction polyfillCurrentSrc(el) {\n\tif (el.srcset && !supportsCurrentSrc && window.picturefill) {\n\t\tvar pf = window.picturefill._;\n\t\t// parse srcset with picturefill where currentSrc isn't available\n\t\tif (!el[pf.ns] || !el[pf.ns].evaled) {\n\t\t\t// force synchronous srcset parsing\n\t\t\tpf.fillImg(el, {reselect: true});\n\t\t}\n\n\t\tif (!el[pf.ns].curSrc) {\n\t\t\t// force picturefill to parse srcset\n\t\t\tel[pf.ns].supported = false;\n\t\t\tpf.fillImg(el, {reselect: true});\n\t\t}\n\n\t\t// retrieve parsed currentSrc, if any\n\t\tel.currentSrc = el[pf.ns].curSrc || el.src;\n\t}\n}\n\nfunction getStyle(el) {\n\tvar style = getComputedStyle(el).fontFamily;\n\tvar parsed;\n\tvar props = {};\n\twhile ((parsed = propRegex.exec(style)) !== null) {\n\t\tprops[parsed[1]] = parsed[2];\n\t}\n\treturn props;\n}\n\nfunction setPlaceholder(img, width, height) {\n\t// Default: fill width, no height\n\tvar placeholder = createPlaceholder(width || 1, height || 0);\n\n\t// Only set placeholder if it's different\n\tif (nativeGetAttribute.call(img, 'src') !== placeholder) {\n\t\tnativeSetAttribute.call(img, 'src', placeholder);\n\t}\n}\n\nfunction onImageReady(img, callback) {\n\t// naturalWidth is only available when the image headers are loaded,\n\t// this loop will poll it every 100ms.\n\tif (img.naturalWidth) {\n\t\tcallback(img);\n\t} else {\n\t\tsetTimeout(onImageReady, 100, img, callback);\n\t}\n}\n\nfunction fixOne(el) {\n\tvar style = getStyle(el);\n\tvar ofi = el[OFI];\n\tstyle['object-fit'] = style['object-fit'] || 'fill'; // default value\n\n\t// Avoid running where unnecessary, unless OFI had already done its deed\n\tif (!ofi.img) {\n\t\t// fill is the default behavior so no action is necessary\n\t\tif (style['object-fit'] === 'fill') {\n\t\t\treturn;\n\t\t}\n\n\t\t// Where object-fit is supported and object-position isn't (Safari < 10)\n\t\tif (\n\t\t\t!ofi.skipTest && // unless user wants to apply regardless of browser support\n\t\t\tsupportsObjectFit && // if browser already supports object-fit\n\t\t\t!style['object-position'] // unless object-position is used\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\t// keep a clone in memory while resetting the original to a blank\n\tif (!ofi.img) {\n\t\tofi.img = new Image(el.width, el.height);\n\t\tofi.img.srcset = nativeGetAttribute.call(el, \"data-ofi-srcset\") || el.srcset;\n\t\tofi.img.src = nativeGetAttribute.call(el, \"data-ofi-src\") || el.src;\n\n\t\t// preserve for any future cloneNode calls\n\t\t// https://github.com/bfred-it/object-fit-images/issues/53\n\t\tnativeSetAttribute.call(el, \"data-ofi-src\", el.src);\n\t\tif (el.srcset) {\n\t\t\tnativeSetAttribute.call(el, \"data-ofi-srcset\", el.srcset);\n\t\t}\n\n\t\tsetPlaceholder(el, el.naturalWidth || el.width, el.naturalHeight || el.height);\n\n\t\t// remove srcset because it overrides src\n\t\tif (el.srcset) {\n\t\t\tel.srcset = '';\n\t\t}\n\t\ttry {\n\t\t\tkeepSrcUsable(el);\n\t\t} catch (err) {\n\t\t\tif (window.console) {\n\t\t\t\tconsole.warn('https://bit.ly/ofi-old-browser');\n\t\t\t}\n\t\t}\n\t}\n\n\tpolyfillCurrentSrc(ofi.img);\n\n\tel.style.backgroundImage = \"url(\\\"\" + ((ofi.img.currentSrc || ofi.img.src).replace(/\"/g, '\\\\\"')) + \"\\\")\";\n\tel.style.backgroundPosition = style['object-position'] || 'center';\n\tel.style.backgroundRepeat = 'no-repeat';\n\tel.style.backgroundOrigin = 'content-box';\n\n\tif (/scale-down/.test(style['object-fit'])) {\n\t\tonImageReady(ofi.img, function () {\n\t\t\tif (ofi.img.naturalWidth > el.width || ofi.img.naturalHeight > el.height) {\n\t\t\t\tel.style.backgroundSize = 'contain';\n\t\t\t} else {\n\t\t\t\tel.style.backgroundSize = 'auto';\n\t\t\t}\n\t\t});\n\t} else {\n\t\tel.style.backgroundSize = style['object-fit'].replace('none', 'auto').replace('fill', '100% 100%');\n\t}\n\n\tonImageReady(ofi.img, function (img) {\n\t\tsetPlaceholder(el, img.naturalWidth, img.naturalHeight);\n\t});\n}\n\nfunction keepSrcUsable(el) {\n\tvar descriptors = {\n\t\tget: function get(prop) {\n\t\t\treturn el[OFI].img[prop ? prop : 'src'];\n\t\t},\n\t\tset: function set(value, prop) {\n\t\t\tel[OFI].img[prop ? prop : 'src'] = value;\n\t\t\tnativeSetAttribute.call(el, (\"data-ofi-\" + prop), value); // preserve for any future cloneNode\n\t\t\tfixOne(el);\n\t\t\treturn value;\n\t\t}\n\t};\n\tObject.defineProperty(el, 'src', descriptors);\n\tObject.defineProperty(el, 'currentSrc', {\n\t\tget: function () { return descriptors.get('currentSrc'); }\n\t});\n\tObject.defineProperty(el, 'srcset', {\n\t\tget: function () { return descriptors.get('srcset'); },\n\t\tset: function (ss) { return descriptors.set(ss, 'srcset'); }\n\t});\n}\n\nfunction hijackAttributes() {\n\tfunction getOfiImageMaybe(el, name) {\n\t\treturn el[OFI] && el[OFI].img && (name === 'src' || name === 'srcset') ? el[OFI].img : el;\n\t}\n\tif (!supportsObjectPosition) {\n\t\tHTMLImageElement.prototype.getAttribute = function (name) {\n\t\t\treturn nativeGetAttribute.call(getOfiImageMaybe(this, name), name);\n\t\t};\n\n\t\tHTMLImageElement.prototype.setAttribute = function (name, value) {\n\t\t\treturn nativeSetAttribute.call(getOfiImageMaybe(this, name), name, String(value));\n\t\t};\n\t}\n}\n\nfunction fix(imgs, opts) {\n\tvar startAutoMode = !autoModeEnabled && !imgs;\n\topts = opts || {};\n\timgs = imgs || 'img';\n\n\tif ((supportsObjectPosition && !opts.skipTest) || !supportsOFI) {\n\t\treturn false;\n\t}\n\n\t// use imgs as a selector or just select all images\n\tif (imgs === 'img') {\n\t\timgs = document.getElementsByTagName('img');\n\t} else if (typeof imgs === 'string') {\n\t\timgs = document.querySelectorAll(imgs);\n\t} else if (!('length' in imgs)) {\n\t\timgs = [imgs];\n\t}\n\n\t// apply fix to all\n\tfor (var i = 0; i < imgs.length; i++) {\n\t\timgs[i][OFI] = imgs[i][OFI] || {\n\t\t\tskipTest: opts.skipTest\n\t\t};\n\t\tfixOne(imgs[i]);\n\t}\n\n\tif (startAutoMode) {\n\t\tdocument.body.addEventListener('load', function (e) {\n\t\t\tif (e.target.tagName === 'IMG') {\n\t\t\t\tfix(e.target, {\n\t\t\t\t\tskipTest: opts.skipTest\n\t\t\t\t});\n\t\t\t}\n\t\t}, true);\n\t\tautoModeEnabled = true;\n\t\timgs = 'img'; // reset to a generic selector for watchMQ\n\t}\n\n\t// if requested, watch media queries for object-fit change\n\tif (opts.watchMQ) {\n\t\twindow.addEventListener('resize', fix.bind(null, imgs, {\n\t\t\tskipTest: opts.skipTest\n\t\t}));\n\t}\n}\n\nfix.supportsObjectFit = supportsObjectFit;\nfix.supportsObjectPosition = supportsObjectPosition;\n\nhijackAttributes();\n\nmodule.exports = fix;\n","/**\n * Object Fit Videos\n * Polyfill for object-fit and object-position CSS properties on video elements\n * Covers IE9, IE10, IE11, Edge, Safari <10\n *\n * Usage\n * In your CSS, add a special font-family tag for IE/Edge\n * video {\n *   object-fit: cover;\n *   font-family: 'object-fit: cover;';\n * }\n *\n * Before the closing body tag, or whenever the DOM is ready,\n * make the JavaScript call\n * objectFitVideos();\n *\n * All video elements with the special CSS property will be targeted\n *\n * @license  MIT (https://opensource.org/licenses/MIT)\n * @author   Todd Miller <todd.miller@tricomb2b.com>\n * @version  1.0.2\n * @changelog\n * 2016-08-19 - Adds object-position support.\n * 2016-08-19 - Add throttle function for more performant resize events\n * 2016-08-19 - Initial release with object-fit support, and\n *              object-position default 'center'\n * 2016-10-14 - No longer relies on window load event, instead requires a specific\n *              function call to initialize the videos for object fit and position.\n * 2016-11-28 - Support CommonJS environment, courtesy of @msorensson\n * 2016-12-05 - Refactors the throttling function to support IE\n * 2017-09-26 - Fix an issue with autplay not working on polyfilled videos\n *            - Adds the capability to specify elements to polyfill,\n *              instead of just checking every video element for the\n *              CSS property. Slight performance gain in most usecases,\n *              and a bigger gain in a few usecases.\n * 2017-10-24 - Add user agent check to enable polyfill for all Edge browsers.\n *              object-fit is supported on Edge >= 16, but currently just for images.\n */\nvar objectFitVideos = function (videos) {\n  'use strict';\n\n  var isEdge = navigator.userAgent.indexOf('Edge/') >= 0;\n\n  var testImg                = new Image(),\n      supportsObjectFit      = 'object-fit' in testImg.style && !isEdge,\n      supportsObjectPosition = 'object-position' in testImg.style && !isEdge,\n      propRegex              = /(object-fit|object-position)\\s*:\\s*([-\\w\\s%]+)/g;\n\n  if (!supportsObjectFit || !supportsObjectPosition) {\n    initialize(videos);\n    throttle('resize', 'optimizedResize');\n  }\n\n  /**\n   * Parse the style and look for the special font-family tag\n   * @param  {object} $el The element to parse\n   * @return {object}     The font-family properties we're interested in\n   */\n  function getStyle ($el) {\n    var style  = getComputedStyle($el).fontFamily,\n        parsed = null,\n        props  = {};\n\n      while ((parsed = propRegex.exec(style)) !== null) {\n        props[parsed[1]] = parsed[2];\n      }\n\n      if (props['object-position'])\n        return parsePosition(props);\n\n      return props;\n  }\n\n  /**\n   * Initialize all the relevant video elements and get them fitted\n   */\n  function initialize (videos) {\n    var index = -1;\n\n    if (!videos) {\n      // if no videos given, query all video elements\n      videos = document.querySelectorAll('video');\n    } else if (!('length' in videos)) {\n      // convert to an array for proper looping if an array or NodeList\n      // was not given\n      videos = [videos];\n    }\n\n    while (videos[++index]) {\n      var style = getStyle(videos[index]);\n\n      // only do work if the property is on the element\n      if (style['object-fit'] || style['object-position']) {\n        // set the default values\n        style['object-fit'] = style['object-fit'] || 'fill';\n        fitIt(videos[index], style);\n      }\n    }\n  }\n\n  /**\n   * Object Fit\n   * @param  {object} $el Element to fit\n   * @return {object}     The element's relevant properties\n   */\n  function fitIt ($el, style) {\n    // fill is the default behavior, no action is necessary\n    if (style['object-fit'] === 'fill')\n      return;\n\n    // convenience style properties on the source element\n    var setCss = $el.style,\n        getCss = window.getComputedStyle($el);\n\n    // create and insert a wrapper element\n    var $wrap = document.createElement('object-fit');\n    $wrap.appendChild($el.parentNode.replaceChild($wrap, $el));\n\n    // style the wrapper element to mostly match the source element\n    var wrapCss = {\n      height:    '100%',\n      width:     '100%',\n      boxSizing: 'content-box',\n      display:   'inline-block',\n      overflow:  'hidden'\n    };\n\n    'backgroundColor backgroundImage borderColor borderStyle borderWidth bottom fontSize lineHeight left opacity margin position right top visibility'.replace(/\\w+/g, function (key) {\n      wrapCss[key] = getCss[key];\n    });\n\n    for (var key in wrapCss)\n      $wrap.style[key] = wrapCss[key];\n\n    // give the source element some saner styles\n    setCss.border  = setCss.margin = setCss.padding = 0;\n    setCss.display = 'block';\n    setCss.opacity = 1;\n\n    // set up the event handlers\n    $el.addEventListener('loadedmetadata', doWork);\n    window.addEventListener('optimizedResize', doWork);\n\n    // we may have missed the loadedmetadata event, so if the video has loaded\n    // enough data, just drop the event listener and execute\n    if ($el.readyState >= 1) {\n      $el.removeEventListener('loadedmetadata', doWork);\n      doWork();\n    }\n\n    /**\n     * Do the actual sizing. Math.\n     * @methodOf fitIt\n     */\n    function doWork () {\n      // the actual size and ratio of the video\n      // we do this here, even though it doesn't change, because\n      // at this point we can be sure the metadata has loaded\n      var videoWidth  = $el.videoWidth,\n          videoHeight = $el.videoHeight,\n          videoRatio  = videoWidth / videoHeight;\n\n      var wrapWidth  = $wrap.clientWidth,\n          wrapHeight = $wrap.clientHeight,\n          wrapRatio  = wrapWidth / wrapHeight;\n\n      var newHeight = 0,\n          newWidth  = 0;\n      setCss.marginLeft = setCss.marginTop = 0;\n\n      // basically we do the opposite action for contain and cover,\n      // depending on whether the video aspect ratio is less than or\n      // greater than the wrapper's aspect ratio\n      if (videoRatio < wrapRatio ?\n          style['object-fit'] === 'contain' : style['object-fit'] === 'cover') {\n        newHeight = wrapHeight * videoRatio;\n        newWidth  = wrapWidth / videoRatio;\n\n        setCss.width  = Math.round(newHeight) + 'px';\n        setCss.height = wrapHeight + 'px';\n\n        if (style['object-position-x'] === 'left')\n          setCss.marginLeft = 0;\n        else if (style['object-position-x'] === 'right')\n          setCss.marginLeft = Math.round(wrapWidth - newHeight) + 'px';\n        else\n          setCss.marginLeft = Math.round((wrapWidth - newHeight) / 2) + 'px';\n      } else {\n        newWidth = wrapWidth / videoRatio;\n\n        setCss.width     = wrapWidth + 'px';\n        setCss.height    = Math.round(newWidth) + 'px';\n\n        if (style['object-position-y'] === 'top')\n          setCss.marginTop = 0;\n        else if (style['object-position-y'] === 'bottom')\n          setCss.marginTop = Math.round(wrapHeight - newWidth) + 'px';\n        else\n          setCss.marginTop = Math.round((wrapHeight - newWidth) / 2) + 'px';\n      }\n\n      // play the video if autoplay is set\n      if ($el.autoplay)\n        $el.play();\n    }\n  }\n\n  /**\n   * Split the object-position property into x and y position properties\n   * @param  {object} style Relevant element styles\n   * @return {object}       The style object with the added x and y props\n   */\n  function parsePosition (style) {\n    if (~style['object-position'].indexOf('left'))\n      style['object-position-x'] = 'left';\n    else if (~style['object-position'].indexOf('right'))\n      style['object-position-x'] = 'right';\n    else\n      style['object-position-x'] = 'center';\n\n    if (~style['object-position'].indexOf('top'))\n      style['object-position-y'] = 'top';\n    else if (~style['object-position'].indexOf('bottom'))\n      style['object-position-y'] = 'bottom';\n    else\n      style['object-position-y'] = 'center';\n\n    return style;\n  }\n\n  /**\n   * Throttle an event with RequestAnimationFrame API for better performance\n   * @param  {string} type The event to throttle\n   * @param  {string} name Custom event name to listen for\n   * @param  {object} obj  Optional object to attach the event to\n   */\n  function throttle (type, name, obj) {\n    obj = obj || window;\n    var running = false,\n        evt     = null;\n\n    // IE does not support the CustomEvent constructor\n    // so if that fails do it the old way\n    try {\n      evt = new CustomEvent(name);\n    } catch (e) {\n      evt = document.createEvent('Event');\n      evt.initEvent(name, true, true);\n    }\n\n    var func = function () {\n      if (running) return;\n\n      running = true;\n      requestAnimationFrame(function () {\n        obj.dispatchEvent(evt);\n        running = false;\n      });\n    };\n\n    obj.addEventListener(type, func);\n  }\n};\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined')\n  module.exports = objectFitVideos;\n","/*\n     _ _      _       _\n ___| (_) ___| | __  (_)___\n/ __| | |/ __| |/ /  | / __|\n\\__ \\ | | (__|   < _ | \\__ \\\n|___/_|_|\\___|_|\\_(_)/ |___/\n                   |__/\n\n Version: 1.8.1\n  Author: Ken Wheeler\n Website: http://kenwheeler.github.io\n    Docs: http://kenwheeler.github.io/slick\n    Repo: http://github.com/kenwheeler/slick\n  Issues: http://github.com/kenwheeler/slick/issues\n\n */\n/* global window, document, define, jQuery, setInterval, clearInterval */\n;(function(factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else if (typeof exports !== 'undefined') {\n        module.exports = factory(require('jquery'));\n    } else {\n        factory(jQuery);\n    }\n\n}(function($) {\n    'use strict';\n    var Slick = window.Slick || {};\n\n    Slick = (function() {\n\n        var instanceUid = 0;\n\n        function Slick(element, settings) {\n\n            var _ = this, dataSettings;\n\n            _.defaults = {\n                accessibility: true,\n                adaptiveHeight: false,\n                appendArrows: $(element),\n                appendDots: $(element),\n                arrows: true,\n                asNavFor: null,\n                prevArrow: '<button class=\"slick-prev\" aria-label=\"Previous\" type=\"button\">Previous</button>',\n                nextArrow: '<button class=\"slick-next\" aria-label=\"Next\" type=\"button\">Next</button>',\n                autoplay: false,\n                autoplaySpeed: 3000,\n                centerMode: false,\n                centerPadding: '50px',\n                cssEase: 'ease',\n                customPaging: function(slider, i) {\n                    return $('<button type=\"button\" />').text(i + 1);\n                },\n                dots: false,\n                dotsClass: 'slick-dots',\n                draggable: true,\n                easing: 'linear',\n                edgeFriction: 0.35,\n                fade: false,\n                focusOnSelect: false,\n                focusOnChange: false,\n                infinite: true,\n                initialSlide: 0,\n                lazyLoad: 'ondemand',\n                mobileFirst: false,\n                pauseOnHover: true,\n                pauseOnFocus: true,\n                pauseOnDotsHover: false,\n                respondTo: 'window',\n                responsive: null,\n                rows: 1,\n                rtl: false,\n                slide: '',\n                slidesPerRow: 1,\n                slidesToShow: 1,\n                slidesToScroll: 1,\n                speed: 500,\n                swipe: true,\n                swipeToSlide: false,\n                touchMove: true,\n                touchThreshold: 5,\n                useCSS: true,\n                useTransform: true,\n                variableWidth: false,\n                vertical: false,\n                verticalSwiping: false,\n                waitForAnimate: true,\n                zIndex: 1000\n            };\n\n            _.initials = {\n                animating: false,\n                dragging: false,\n                autoPlayTimer: null,\n                currentDirection: 0,\n                currentLeft: null,\n                currentSlide: 0,\n                direction: 1,\n                $dots: null,\n                listWidth: null,\n                listHeight: null,\n                loadIndex: 0,\n                $nextArrow: null,\n                $prevArrow: null,\n                scrolling: false,\n                slideCount: null,\n                slideWidth: null,\n                $slideTrack: null,\n                $slides: null,\n                sliding: false,\n                slideOffset: 0,\n                swipeLeft: null,\n                swiping: false,\n                $list: null,\n                touchObject: {},\n                transformsEnabled: false,\n                unslicked: false\n            };\n\n            $.extend(_, _.initials);\n\n            _.activeBreakpoint = null;\n            _.animType = null;\n            _.animProp = null;\n            _.breakpoints = [];\n            _.breakpointSettings = [];\n            _.cssTransitions = false;\n            _.focussed = false;\n            _.interrupted = false;\n            _.hidden = 'hidden';\n            _.paused = true;\n            _.positionProp = null;\n            _.respondTo = null;\n            _.rowCount = 1;\n            _.shouldClick = true;\n            _.$slider = $(element);\n            _.$slidesCache = null;\n            _.transformType = null;\n            _.transitionType = null;\n            _.visibilityChange = 'visibilitychange';\n            _.windowWidth = 0;\n            _.windowTimer = null;\n\n            dataSettings = $(element).data('slick') || {};\n\n            _.options = $.extend({}, _.defaults, settings, dataSettings);\n\n            _.currentSlide = _.options.initialSlide;\n\n            _.originalSettings = _.options;\n\n            if (typeof document.mozHidden !== 'undefined') {\n                _.hidden = 'mozHidden';\n                _.visibilityChange = 'mozvisibilitychange';\n            } else if (typeof document.webkitHidden !== 'undefined') {\n                _.hidden = 'webkitHidden';\n                _.visibilityChange = 'webkitvisibilitychange';\n            }\n\n            _.autoPlay = $.proxy(_.autoPlay, _);\n            _.autoPlayClear = $.proxy(_.autoPlayClear, _);\n            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);\n            _.changeSlide = $.proxy(_.changeSlide, _);\n            _.clickHandler = $.proxy(_.clickHandler, _);\n            _.selectHandler = $.proxy(_.selectHandler, _);\n            _.setPosition = $.proxy(_.setPosition, _);\n            _.swipeHandler = $.proxy(_.swipeHandler, _);\n            _.dragHandler = $.proxy(_.dragHandler, _);\n            _.keyHandler = $.proxy(_.keyHandler, _);\n\n            _.instanceUid = instanceUid++;\n\n            // A simple way to check for HTML strings\n            // Strict HTML recognition (must start with <)\n            // Extracted from jQuery v1.11 source\n            _.htmlExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*)$/;\n\n\n            _.registerBreakpoints();\n            _.init(true);\n\n        }\n\n        return Slick;\n\n    }());\n\n    Slick.prototype.activateADA = function() {\n        var _ = this;\n\n        _.$slideTrack.find('.slick-active').attr({\n            'aria-hidden': 'false'\n        }).find('a, input, button, select').attr({\n            'tabindex': '0'\n        });\n\n    };\n\n    Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {\n\n        var _ = this;\n\n        if (typeof(index) === 'boolean') {\n            addBefore = index;\n            index = null;\n        } else if (index < 0 || (index >= _.slideCount)) {\n            return false;\n        }\n\n        _.unload();\n\n        if (typeof(index) === 'number') {\n            if (index === 0 && _.$slides.length === 0) {\n                $(markup).appendTo(_.$slideTrack);\n            } else if (addBefore) {\n                $(markup).insertBefore(_.$slides.eq(index));\n            } else {\n                $(markup).insertAfter(_.$slides.eq(index));\n            }\n        } else {\n            if (addBefore === true) {\n                $(markup).prependTo(_.$slideTrack);\n            } else {\n                $(markup).appendTo(_.$slideTrack);\n            }\n        }\n\n        _.$slides = _.$slideTrack.children(this.options.slide);\n\n        _.$slideTrack.children(this.options.slide).detach();\n\n        _.$slideTrack.append(_.$slides);\n\n        _.$slides.each(function(index, element) {\n            $(element).attr('data-slick-index', index);\n        });\n\n        _.$slidesCache = _.$slides;\n\n        _.reinit();\n\n    };\n\n    Slick.prototype.animateHeight = function() {\n        var _ = this;\n        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {\n            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);\n            _.$list.animate({\n                height: targetHeight\n            }, _.options.speed);\n        }\n    };\n\n    Slick.prototype.animateSlide = function(targetLeft, callback) {\n\n        var animProps = {},\n            _ = this;\n\n        _.animateHeight();\n\n        if (_.options.rtl === true && _.options.vertical === false) {\n            targetLeft = -targetLeft;\n        }\n        if (_.transformsEnabled === false) {\n            if (_.options.vertical === false) {\n                _.$slideTrack.animate({\n                    left: targetLeft\n                }, _.options.speed, _.options.easing, callback);\n            } else {\n                _.$slideTrack.animate({\n                    top: targetLeft\n                }, _.options.speed, _.options.easing, callback);\n            }\n\n        } else {\n\n            if (_.cssTransitions === false) {\n                if (_.options.rtl === true) {\n                    _.currentLeft = -(_.currentLeft);\n                }\n                $({\n                    animStart: _.currentLeft\n                }).animate({\n                    animStart: targetLeft\n                }, {\n                    duration: _.options.speed,\n                    easing: _.options.easing,\n                    step: function(now) {\n                        now = Math.ceil(now);\n                        if (_.options.vertical === false) {\n                            animProps[_.animType] = 'translate(' +\n                                now + 'px, 0px)';\n                            _.$slideTrack.css(animProps);\n                        } else {\n                            animProps[_.animType] = 'translate(0px,' +\n                                now + 'px)';\n                            _.$slideTrack.css(animProps);\n                        }\n                    },\n                    complete: function() {\n                        if (callback) {\n                            callback.call();\n                        }\n                    }\n                });\n\n            } else {\n\n                _.applyTransition();\n                targetLeft = Math.ceil(targetLeft);\n\n                if (_.options.vertical === false) {\n                    animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';\n                } else {\n                    animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';\n                }\n                _.$slideTrack.css(animProps);\n\n                if (callback) {\n                    setTimeout(function() {\n\n                        _.disableTransition();\n\n                        callback.call();\n                    }, _.options.speed);\n                }\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.getNavTarget = function() {\n\n        var _ = this,\n            asNavFor = _.options.asNavFor;\n\n        if ( asNavFor && asNavFor !== null ) {\n            asNavFor = $(asNavFor).not(_.$slider);\n        }\n\n        return asNavFor;\n\n    };\n\n    Slick.prototype.asNavFor = function(index) {\n\n        var _ = this,\n            asNavFor = _.getNavTarget();\n\n        if ( asNavFor !== null && typeof asNavFor === 'object' ) {\n            asNavFor.each(function() {\n                var target = $(this).slick('getSlick');\n                if(!target.unslicked) {\n                    target.slideHandler(index, true);\n                }\n            });\n        }\n\n    };\n\n    Slick.prototype.applyTransition = function(slide) {\n\n        var _ = this,\n            transition = {};\n\n        if (_.options.fade === false) {\n            transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;\n        } else {\n            transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;\n        }\n\n        if (_.options.fade === false) {\n            _.$slideTrack.css(transition);\n        } else {\n            _.$slides.eq(slide).css(transition);\n        }\n\n    };\n\n    Slick.prototype.autoPlay = function() {\n\n        var _ = this;\n\n        _.autoPlayClear();\n\n        if ( _.slideCount > _.options.slidesToShow ) {\n            _.autoPlayTimer = setInterval( _.autoPlayIterator, _.options.autoplaySpeed );\n        }\n\n    };\n\n    Slick.prototype.autoPlayClear = function() {\n\n        var _ = this;\n\n        if (_.autoPlayTimer) {\n            clearInterval(_.autoPlayTimer);\n        }\n\n    };\n\n    Slick.prototype.autoPlayIterator = function() {\n\n        var _ = this,\n            slideTo = _.currentSlide + _.options.slidesToScroll;\n\n        if ( !_.paused && !_.interrupted && !_.focussed ) {\n\n            if ( _.options.infinite === false ) {\n\n                if ( _.direction === 1 && ( _.currentSlide + 1 ) === ( _.slideCount - 1 )) {\n                    _.direction = 0;\n                }\n\n                else if ( _.direction === 0 ) {\n\n                    slideTo = _.currentSlide - _.options.slidesToScroll;\n\n                    if ( _.currentSlide - 1 === 0 ) {\n                        _.direction = 1;\n                    }\n\n                }\n\n            }\n\n            _.slideHandler( slideTo );\n\n        }\n\n    };\n\n    Slick.prototype.buildArrows = function() {\n\n        var _ = this;\n\n        if (_.options.arrows === true ) {\n\n            _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');\n            _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');\n\n            if( _.slideCount > _.options.slidesToShow ) {\n\n                _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');\n                _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');\n\n                if (_.htmlExpr.test(_.options.prevArrow)) {\n                    _.$prevArrow.prependTo(_.options.appendArrows);\n                }\n\n                if (_.htmlExpr.test(_.options.nextArrow)) {\n                    _.$nextArrow.appendTo(_.options.appendArrows);\n                }\n\n                if (_.options.infinite !== true) {\n                    _.$prevArrow\n                        .addClass('slick-disabled')\n                        .attr('aria-disabled', 'true');\n                }\n\n            } else {\n\n                _.$prevArrow.add( _.$nextArrow )\n\n                    .addClass('slick-hidden')\n                    .attr({\n                        'aria-disabled': 'true',\n                        'tabindex': '-1'\n                    });\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.buildDots = function() {\n\n        var _ = this,\n            i, dot;\n\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$slider.addClass('slick-dotted');\n\n            dot = $('<ul />').addClass(_.options.dotsClass);\n\n            for (i = 0; i <= _.getDotCount(); i += 1) {\n                dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));\n            }\n\n            _.$dots = dot.appendTo(_.options.appendDots);\n\n            _.$dots.find('li').first().addClass('slick-active');\n\n        }\n\n    };\n\n    Slick.prototype.buildOut = function() {\n\n        var _ = this;\n\n        _.$slides =\n            _.$slider\n                .children( _.options.slide + ':not(.slick-cloned)')\n                .addClass('slick-slide');\n\n        _.slideCount = _.$slides.length;\n\n        _.$slides.each(function(index, element) {\n            $(element)\n                .attr('data-slick-index', index)\n                .data('originalStyling', $(element).attr('style') || '');\n        });\n\n        _.$slider.addClass('slick-slider');\n\n        _.$slideTrack = (_.slideCount === 0) ?\n            $('<div class=\"slick-track\"/>').appendTo(_.$slider) :\n            _.$slides.wrapAll('<div class=\"slick-track\"/>').parent();\n\n        _.$list = _.$slideTrack.wrap(\n            '<div class=\"slick-list\"/>').parent();\n        _.$slideTrack.css('opacity', 0);\n\n        if (_.options.centerMode === true || _.options.swipeToSlide === true) {\n            _.options.slidesToScroll = 1;\n        }\n\n        $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');\n\n        _.setupInfinite();\n\n        _.buildArrows();\n\n        _.buildDots();\n\n        _.updateDots();\n\n\n        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);\n\n        if (_.options.draggable === true) {\n            _.$list.addClass('draggable');\n        }\n\n    };\n\n    Slick.prototype.buildRows = function() {\n\n        var _ = this, a, b, c, newSlides, numOfSlides, originalSlides,slidesPerSection;\n\n        newSlides = document.createDocumentFragment();\n        originalSlides = _.$slider.children();\n\n        if(_.options.rows > 0) {\n\n            slidesPerSection = _.options.slidesPerRow * _.options.rows;\n            numOfSlides = Math.ceil(\n                originalSlides.length / slidesPerSection\n            );\n\n            for(a = 0; a < numOfSlides; a++){\n                var slide = document.createElement('div');\n                for(b = 0; b < _.options.rows; b++) {\n                    var row = document.createElement('div');\n                    for(c = 0; c < _.options.slidesPerRow; c++) {\n                        var target = (a * slidesPerSection + ((b * _.options.slidesPerRow) + c));\n                        if (originalSlides.get(target)) {\n                            row.appendChild(originalSlides.get(target));\n                        }\n                    }\n                    slide.appendChild(row);\n                }\n                newSlides.appendChild(slide);\n            }\n\n            _.$slider.empty().append(newSlides);\n            _.$slider.children().children().children()\n                .css({\n                    'width':(100 / _.options.slidesPerRow) + '%',\n                    'display': 'inline-block'\n                });\n\n        }\n\n    };\n\n    Slick.prototype.checkResponsive = function(initial, forceUpdate) {\n\n        var _ = this,\n            breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;\n        var sliderWidth = _.$slider.width();\n        var windowWidth = window.innerWidth || $(window).width();\n\n        if (_.respondTo === 'window') {\n            respondToWidth = windowWidth;\n        } else if (_.respondTo === 'slider') {\n            respondToWidth = sliderWidth;\n        } else if (_.respondTo === 'min') {\n            respondToWidth = Math.min(windowWidth, sliderWidth);\n        }\n\n        if ( _.options.responsive &&\n            _.options.responsive.length &&\n            _.options.responsive !== null) {\n\n            targetBreakpoint = null;\n\n            for (breakpoint in _.breakpoints) {\n                if (_.breakpoints.hasOwnProperty(breakpoint)) {\n                    if (_.originalSettings.mobileFirst === false) {\n                        if (respondToWidth < _.breakpoints[breakpoint]) {\n                            targetBreakpoint = _.breakpoints[breakpoint];\n                        }\n                    } else {\n                        if (respondToWidth > _.breakpoints[breakpoint]) {\n                            targetBreakpoint = _.breakpoints[breakpoint];\n                        }\n                    }\n                }\n            }\n\n            if (targetBreakpoint !== null) {\n                if (_.activeBreakpoint !== null) {\n                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {\n                        _.activeBreakpoint =\n                            targetBreakpoint;\n                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {\n                            _.unslick(targetBreakpoint);\n                        } else {\n                            _.options = $.extend({}, _.originalSettings,\n                                _.breakpointSettings[\n                                    targetBreakpoint]);\n                            if (initial === true) {\n                                _.currentSlide = _.options.initialSlide;\n                            }\n                            _.refresh(initial);\n                        }\n                        triggerBreakpoint = targetBreakpoint;\n                    }\n                } else {\n                    _.activeBreakpoint = targetBreakpoint;\n                    if (_.breakpointSettings[targetBreakpoint] === 'unslick') {\n                        _.unslick(targetBreakpoint);\n                    } else {\n                        _.options = $.extend({}, _.originalSettings,\n                            _.breakpointSettings[\n                                targetBreakpoint]);\n                        if (initial === true) {\n                            _.currentSlide = _.options.initialSlide;\n                        }\n                        _.refresh(initial);\n                    }\n                    triggerBreakpoint = targetBreakpoint;\n                }\n            } else {\n                if (_.activeBreakpoint !== null) {\n                    _.activeBreakpoint = null;\n                    _.options = _.originalSettings;\n                    if (initial === true) {\n                        _.currentSlide = _.options.initialSlide;\n                    }\n                    _.refresh(initial);\n                    triggerBreakpoint = targetBreakpoint;\n                }\n            }\n\n            // only trigger breakpoints during an actual break. not on initialize.\n            if( !initial && triggerBreakpoint !== false ) {\n                _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);\n            }\n        }\n\n    };\n\n    Slick.prototype.changeSlide = function(event, dontAnimate) {\n\n        var _ = this,\n            $target = $(event.currentTarget),\n            indexOffset, slideOffset, unevenOffset;\n\n        // If target is a link, prevent default action.\n        if($target.is('a')) {\n            event.preventDefault();\n        }\n\n        // If target is not the <li> element (ie: a child), find the <li>.\n        if(!$target.is('li')) {\n            $target = $target.closest('li');\n        }\n\n        unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);\n        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;\n\n        switch (event.data.message) {\n\n            case 'previous':\n                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;\n                if (_.slideCount > _.options.slidesToShow) {\n                    _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);\n                }\n                break;\n\n            case 'next':\n                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;\n                if (_.slideCount > _.options.slidesToShow) {\n                    _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);\n                }\n                break;\n\n            case 'index':\n                var index = event.data.index === 0 ? 0 :\n                    event.data.index || $target.index() * _.options.slidesToScroll;\n\n                _.slideHandler(_.checkNavigable(index), false, dontAnimate);\n                $target.children().trigger('focus');\n                break;\n\n            default:\n                return;\n        }\n\n    };\n\n    Slick.prototype.checkNavigable = function(index) {\n\n        var _ = this,\n            navigables, prevNavigable;\n\n        navigables = _.getNavigableIndexes();\n        prevNavigable = 0;\n        if (index > navigables[navigables.length - 1]) {\n            index = navigables[navigables.length - 1];\n        } else {\n            for (var n in navigables) {\n                if (index < navigables[n]) {\n                    index = prevNavigable;\n                    break;\n                }\n                prevNavigable = navigables[n];\n            }\n        }\n\n        return index;\n    };\n\n    Slick.prototype.cleanUpEvents = function() {\n\n        var _ = this;\n\n        if (_.options.dots && _.$dots !== null) {\n\n            $('li', _.$dots)\n                .off('click.slick', _.changeSlide)\n                .off('mouseenter.slick', $.proxy(_.interrupt, _, true))\n                .off('mouseleave.slick', $.proxy(_.interrupt, _, false));\n\n            if (_.options.accessibility === true) {\n                _.$dots.off('keydown.slick', _.keyHandler);\n            }\n        }\n\n        _.$slider.off('focus.slick blur.slick');\n\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n            _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);\n            _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);\n\n            if (_.options.accessibility === true) {\n                _.$prevArrow && _.$prevArrow.off('keydown.slick', _.keyHandler);\n                _.$nextArrow && _.$nextArrow.off('keydown.slick', _.keyHandler);\n            }\n        }\n\n        _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);\n        _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);\n        _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);\n        _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);\n\n        _.$list.off('click.slick', _.clickHandler);\n\n        $(document).off(_.visibilityChange, _.visibility);\n\n        _.cleanUpSlideEvents();\n\n        if (_.options.accessibility === true) {\n            _.$list.off('keydown.slick', _.keyHandler);\n        }\n\n        if (_.options.focusOnSelect === true) {\n            $(_.$slideTrack).children().off('click.slick', _.selectHandler);\n        }\n\n        $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);\n\n        $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);\n\n        $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);\n\n        $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);\n\n    };\n\n    Slick.prototype.cleanUpSlideEvents = function() {\n\n        var _ = this;\n\n        _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));\n        _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));\n\n    };\n\n    Slick.prototype.cleanUpRows = function() {\n\n        var _ = this, originalSlides;\n\n        if(_.options.rows > 0) {\n            originalSlides = _.$slides.children().children();\n            originalSlides.removeAttr('style');\n            _.$slider.empty().append(originalSlides);\n        }\n\n    };\n\n    Slick.prototype.clickHandler = function(event) {\n\n        var _ = this;\n\n        if (_.shouldClick === false) {\n            event.stopImmediatePropagation();\n            event.stopPropagation();\n            event.preventDefault();\n        }\n\n    };\n\n    Slick.prototype.destroy = function(refresh) {\n\n        var _ = this;\n\n        _.autoPlayClear();\n\n        _.touchObject = {};\n\n        _.cleanUpEvents();\n\n        $('.slick-cloned', _.$slider).detach();\n\n        if (_.$dots) {\n            _.$dots.remove();\n        }\n\n        if ( _.$prevArrow && _.$prevArrow.length ) {\n\n            _.$prevArrow\n                .removeClass('slick-disabled slick-arrow slick-hidden')\n                .removeAttr('aria-hidden aria-disabled tabindex')\n                .css('display','');\n\n            if ( _.htmlExpr.test( _.options.prevArrow )) {\n                _.$prevArrow.remove();\n            }\n        }\n\n        if ( _.$nextArrow && _.$nextArrow.length ) {\n\n            _.$nextArrow\n                .removeClass('slick-disabled slick-arrow slick-hidden')\n                .removeAttr('aria-hidden aria-disabled tabindex')\n                .css('display','');\n\n            if ( _.htmlExpr.test( _.options.nextArrow )) {\n                _.$nextArrow.remove();\n            }\n        }\n\n\n        if (_.$slides) {\n\n            _.$slides\n                .removeClass('slick-slide slick-active slick-center slick-visible slick-current')\n                .removeAttr('aria-hidden')\n                .removeAttr('data-slick-index')\n                .each(function(){\n                    $(this).attr('style', $(this).data('originalStyling'));\n                });\n\n            _.$slideTrack.children(this.options.slide).detach();\n\n            _.$slideTrack.detach();\n\n            _.$list.detach();\n\n            _.$slider.append(_.$slides);\n        }\n\n        _.cleanUpRows();\n\n        _.$slider.removeClass('slick-slider');\n        _.$slider.removeClass('slick-initialized');\n        _.$slider.removeClass('slick-dotted');\n\n        _.unslicked = true;\n\n        if(!refresh) {\n            _.$slider.trigger('destroy', [_]);\n        }\n\n    };\n\n    Slick.prototype.disableTransition = function(slide) {\n\n        var _ = this,\n            transition = {};\n\n        transition[_.transitionType] = '';\n\n        if (_.options.fade === false) {\n            _.$slideTrack.css(transition);\n        } else {\n            _.$slides.eq(slide).css(transition);\n        }\n\n    };\n\n    Slick.prototype.fadeSlide = function(slideIndex, callback) {\n\n        var _ = this;\n\n        if (_.cssTransitions === false) {\n\n            _.$slides.eq(slideIndex).css({\n                zIndex: _.options.zIndex\n            });\n\n            _.$slides.eq(slideIndex).animate({\n                opacity: 1\n            }, _.options.speed, _.options.easing, callback);\n\n        } else {\n\n            _.applyTransition(slideIndex);\n\n            _.$slides.eq(slideIndex).css({\n                opacity: 1,\n                zIndex: _.options.zIndex\n            });\n\n            if (callback) {\n                setTimeout(function() {\n\n                    _.disableTransition(slideIndex);\n\n                    callback.call();\n                }, _.options.speed);\n            }\n\n        }\n\n    };\n\n    Slick.prototype.fadeSlideOut = function(slideIndex) {\n\n        var _ = this;\n\n        if (_.cssTransitions === false) {\n\n            _.$slides.eq(slideIndex).animate({\n                opacity: 0,\n                zIndex: _.options.zIndex - 2\n            }, _.options.speed, _.options.easing);\n\n        } else {\n\n            _.applyTransition(slideIndex);\n\n            _.$slides.eq(slideIndex).css({\n                opacity: 0,\n                zIndex: _.options.zIndex - 2\n            });\n\n        }\n\n    };\n\n    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {\n\n        var _ = this;\n\n        if (filter !== null) {\n\n            _.$slidesCache = _.$slides;\n\n            _.unload();\n\n            _.$slideTrack.children(this.options.slide).detach();\n\n            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);\n\n            _.reinit();\n\n        }\n\n    };\n\n    Slick.prototype.focusHandler = function() {\n\n        var _ = this;\n\n        _.$slider\n            .off('focus.slick blur.slick')\n            .on('focus.slick blur.slick', '*', function(event) {\n\n            event.stopImmediatePropagation();\n            var $sf = $(this);\n\n            setTimeout(function() {\n\n                if( _.options.pauseOnFocus ) {\n                    _.focussed = $sf.is(':focus');\n                    _.autoPlay();\n                }\n\n            }, 0);\n\n        });\n    };\n\n    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {\n\n        var _ = this;\n        return _.currentSlide;\n\n    };\n\n    Slick.prototype.getDotCount = function() {\n\n        var _ = this;\n\n        var breakPoint = 0;\n        var counter = 0;\n        var pagerQty = 0;\n\n        if (_.options.infinite === true) {\n            if (_.slideCount <= _.options.slidesToShow) {\n                 ++pagerQty;\n            } else {\n                while (breakPoint < _.slideCount) {\n                    ++pagerQty;\n                    breakPoint = counter + _.options.slidesToScroll;\n                    counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\n                }\n            }\n        } else if (_.options.centerMode === true) {\n            pagerQty = _.slideCount;\n        } else if(!_.options.asNavFor) {\n            pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);\n        }else {\n            while (breakPoint < _.slideCount) {\n                ++pagerQty;\n                breakPoint = counter + _.options.slidesToScroll;\n                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\n            }\n        }\n\n        return pagerQty - 1;\n\n    };\n\n    Slick.prototype.getLeft = function(slideIndex) {\n\n        var _ = this,\n            targetLeft,\n            verticalHeight,\n            verticalOffset = 0,\n            targetSlide,\n            coef;\n\n        _.slideOffset = 0;\n        verticalHeight = _.$slides.first().outerHeight(true);\n\n        if (_.options.infinite === true) {\n            if (_.slideCount > _.options.slidesToShow) {\n                _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;\n                coef = -1\n\n                if (_.options.vertical === true && _.options.centerMode === true) {\n                    if (_.options.slidesToShow === 2) {\n                        coef = -1.5;\n                    } else if (_.options.slidesToShow === 1) {\n                        coef = -2\n                    }\n                }\n                verticalOffset = (verticalHeight * _.options.slidesToShow) * coef;\n            }\n            if (_.slideCount % _.options.slidesToScroll !== 0) {\n                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {\n                    if (slideIndex > _.slideCount) {\n                        _.slideOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth) * -1;\n                        verticalOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight) * -1;\n                    } else {\n                        _.slideOffset = ((_.slideCount % _.options.slidesToScroll) * _.slideWidth) * -1;\n                        verticalOffset = ((_.slideCount % _.options.slidesToScroll) * verticalHeight) * -1;\n                    }\n                }\n            }\n        } else {\n            if (slideIndex + _.options.slidesToShow > _.slideCount) {\n                _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * _.slideWidth;\n                verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * verticalHeight;\n            }\n        }\n\n        if (_.slideCount <= _.options.slidesToShow) {\n            _.slideOffset = 0;\n            verticalOffset = 0;\n        }\n\n        if (_.options.centerMode === true && _.slideCount <= _.options.slidesToShow) {\n            _.slideOffset = ((_.slideWidth * Math.floor(_.options.slidesToShow)) / 2) - ((_.slideWidth * _.slideCount) / 2);\n        } else if (_.options.centerMode === true && _.options.infinite === true) {\n            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;\n        } else if (_.options.centerMode === true) {\n            _.slideOffset = 0;\n            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);\n        }\n\n        if (_.options.vertical === false) {\n            targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;\n        } else {\n            targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;\n        }\n\n        if (_.options.variableWidth === true) {\n\n            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {\n                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);\n            } else {\n                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);\n            }\n\n            if (_.options.rtl === true) {\n                if (targetSlide[0]) {\n                    targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;\n                } else {\n                    targetLeft =  0;\n                }\n            } else {\n                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;\n            }\n\n            if (_.options.centerMode === true) {\n                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {\n                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);\n                } else {\n                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);\n                }\n\n                if (_.options.rtl === true) {\n                    if (targetSlide[0]) {\n                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;\n                    } else {\n                        targetLeft =  0;\n                    }\n                } else {\n                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;\n                }\n\n                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;\n            }\n        }\n\n        return targetLeft;\n\n    };\n\n    Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {\n\n        var _ = this;\n\n        return _.options[option];\n\n    };\n\n    Slick.prototype.getNavigableIndexes = function() {\n\n        var _ = this,\n            breakPoint = 0,\n            counter = 0,\n            indexes = [],\n            max;\n\n        if (_.options.infinite === false) {\n            max = _.slideCount;\n        } else {\n            breakPoint = _.options.slidesToScroll * -1;\n            counter = _.options.slidesToScroll * -1;\n            max = _.slideCount * 2;\n        }\n\n        while (breakPoint < max) {\n            indexes.push(breakPoint);\n            breakPoint = counter + _.options.slidesToScroll;\n            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\n        }\n\n        return indexes;\n\n    };\n\n    Slick.prototype.getSlick = function() {\n\n        return this;\n\n    };\n\n    Slick.prototype.getSlideCount = function() {\n\n        var _ = this,\n            slidesTraversed, swipedSlide, centerOffset;\n\n        centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;\n\n        if (_.options.swipeToSlide === true) {\n            _.$slideTrack.find('.slick-slide').each(function(index, slide) {\n                if (slide.offsetLeft - centerOffset + ($(slide).outerWidth() / 2) > (_.swipeLeft * -1)) {\n                    swipedSlide = slide;\n                    return false;\n                }\n            });\n\n            slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;\n\n            return slidesTraversed;\n\n        } else {\n            return _.options.slidesToScroll;\n        }\n\n    };\n\n    Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {\n\n        var _ = this;\n\n        _.changeSlide({\n            data: {\n                message: 'index',\n                index: parseInt(slide)\n            }\n        }, dontAnimate);\n\n    };\n\n    Slick.prototype.init = function(creation) {\n\n        var _ = this;\n\n        if (!$(_.$slider).hasClass('slick-initialized')) {\n\n            $(_.$slider).addClass('slick-initialized');\n\n            _.buildRows();\n            _.buildOut();\n            _.setProps();\n            _.startLoad();\n            _.loadSlider();\n            _.initializeEvents();\n            _.updateArrows();\n            _.updateDots();\n            _.checkResponsive(true);\n            _.focusHandler();\n\n        }\n\n        if (creation) {\n            _.$slider.trigger('init', [_]);\n        }\n\n        if (_.options.accessibility === true) {\n            _.initADA();\n        }\n\n        if ( _.options.autoplay ) {\n\n            _.paused = false;\n            _.autoPlay();\n\n        }\n\n    };\n\n    Slick.prototype.initADA = function() {\n        var _ = this,\n                numDotGroups = Math.ceil(_.slideCount / _.options.slidesToShow),\n                tabControlIndexes = _.getNavigableIndexes().filter(function(val) {\n                    return (val >= 0) && (val < _.slideCount);\n                });\n\n        _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({\n            'aria-hidden': 'true',\n            'tabindex': '-1'\n        }).find('a, input, button, select').attr({\n            'tabindex': '-1'\n        });\n\n        if (_.$dots !== null) {\n            _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function(i) {\n                var slideControlIndex = tabControlIndexes.indexOf(i);\n\n                $(this).attr({\n                    'role': 'tabpanel',\n                    'id': 'slick-slide' + _.instanceUid + i,\n                    'tabindex': -1\n                });\n\n                if (slideControlIndex !== -1) {\n                   var ariaButtonControl = 'slick-slide-control' + _.instanceUid + slideControlIndex\n                   if ($('#' + ariaButtonControl).length) {\n                     $(this).attr({\n                         'aria-describedby': ariaButtonControl\n                     });\n                   }\n                }\n            });\n\n            _.$dots.attr('role', 'tablist').find('li').each(function(i) {\n                var mappedSlideIndex = tabControlIndexes[i];\n\n                $(this).attr({\n                    'role': 'presentation'\n                });\n\n                $(this).find('button').first().attr({\n                    'role': 'tab',\n                    'id': 'slick-slide-control' + _.instanceUid + i,\n                    'aria-controls': 'slick-slide' + _.instanceUid + mappedSlideIndex,\n                    'aria-label': (i + 1) + ' of ' + numDotGroups,\n                    'aria-selected': null,\n                    'tabindex': '-1'\n                });\n\n            }).eq(_.currentSlide).find('button').attr({\n                'aria-selected': 'true',\n                'tabindex': '0'\n            }).end();\n        }\n\n        for (var i=_.currentSlide, max=i+_.options.slidesToShow; i < max; i++) {\n          if (_.options.focusOnChange) {\n            _.$slides.eq(i).attr({'tabindex': '0'});\n          } else {\n            _.$slides.eq(i).removeAttr('tabindex');\n          }\n        }\n\n        _.activateADA();\n\n    };\n\n    Slick.prototype.initArrowEvents = function() {\n\n        var _ = this;\n\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n            _.$prevArrow\n               .off('click.slick')\n               .on('click.slick', {\n                    message: 'previous'\n               }, _.changeSlide);\n            _.$nextArrow\n               .off('click.slick')\n               .on('click.slick', {\n                    message: 'next'\n               }, _.changeSlide);\n\n            if (_.options.accessibility === true) {\n                _.$prevArrow.on('keydown.slick', _.keyHandler);\n                _.$nextArrow.on('keydown.slick', _.keyHandler);\n            }\n        }\n\n    };\n\n    Slick.prototype.initDotEvents = function() {\n\n        var _ = this;\n\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n            $('li', _.$dots).on('click.slick', {\n                message: 'index'\n            }, _.changeSlide);\n\n            if (_.options.accessibility === true) {\n                _.$dots.on('keydown.slick', _.keyHandler);\n            }\n        }\n\n        if (_.options.dots === true && _.options.pauseOnDotsHover === true && _.slideCount > _.options.slidesToShow) {\n\n            $('li', _.$dots)\n                .on('mouseenter.slick', $.proxy(_.interrupt, _, true))\n                .on('mouseleave.slick', $.proxy(_.interrupt, _, false));\n\n        }\n\n    };\n\n    Slick.prototype.initSlideEvents = function() {\n\n        var _ = this;\n\n        if ( _.options.pauseOnHover ) {\n\n            _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));\n            _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));\n\n        }\n\n    };\n\n    Slick.prototype.initializeEvents = function() {\n\n        var _ = this;\n\n        _.initArrowEvents();\n\n        _.initDotEvents();\n        _.initSlideEvents();\n\n        _.$list.on('touchstart.slick mousedown.slick', {\n            action: 'start'\n        }, _.swipeHandler);\n        _.$list.on('touchmove.slick mousemove.slick', {\n            action: 'move'\n        }, _.swipeHandler);\n        _.$list.on('touchend.slick mouseup.slick', {\n            action: 'end'\n        }, _.swipeHandler);\n        _.$list.on('touchcancel.slick mouseleave.slick', {\n            action: 'end'\n        }, _.swipeHandler);\n\n        _.$list.on('click.slick', _.clickHandler);\n\n        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));\n\n        if (_.options.accessibility === true) {\n            _.$list.on('keydown.slick', _.keyHandler);\n        }\n\n        if (_.options.focusOnSelect === true) {\n            $(_.$slideTrack).children().on('click.slick', _.selectHandler);\n        }\n\n        $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));\n\n        $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));\n\n        $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);\n\n        $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);\n        $(_.setPosition);\n\n    };\n\n    Slick.prototype.initUI = function() {\n\n        var _ = this;\n\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$prevArrow.show();\n            _.$nextArrow.show();\n\n        }\n\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$dots.show();\n\n        }\n\n    };\n\n    Slick.prototype.keyHandler = function(event) {\n\n        var _ = this;\n         //Dont slide if the cursor is inside the form fields and arrow keys are pressed\n        if(!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {\n            if (event.keyCode === 37 && _.options.accessibility === true) {\n                _.changeSlide({\n                    data: {\n                        message: _.options.rtl === true ? 'next' :  'previous'\n                    }\n                });\n            } else if (event.keyCode === 39 && _.options.accessibility === true) {\n                _.changeSlide({\n                    data: {\n                        message: _.options.rtl === true ? 'previous' : 'next'\n                    }\n                });\n            }\n        }\n\n    };\n\n    Slick.prototype.lazyLoad = function() {\n\n        var _ = this,\n            loadRange, cloneRange, rangeStart, rangeEnd;\n\n        function loadImages(imagesScope) {\n\n            $('img[data-lazy]', imagesScope).each(function() {\n\n                var image = $(this),\n                    imageSource = $(this).attr('data-lazy'),\n                    imageSrcSet = $(this).attr('data-srcset'),\n                    imageSizes  = $(this).attr('data-sizes') || _.$slider.attr('data-sizes'),\n                    imageToLoad = document.createElement('img');\n\n                imageToLoad.onload = function() {\n\n                    image\n                        .animate({ opacity: 0 }, 100, function() {\n\n                            if (imageSrcSet) {\n                                image\n                                    .attr('srcset', imageSrcSet );\n\n                                if (imageSizes) {\n                                    image\n                                        .attr('sizes', imageSizes );\n                                }\n                            }\n\n                            image\n                                .attr('src', imageSource)\n                                .animate({ opacity: 1 }, 200, function() {\n                                    image\n                                        .removeAttr('data-lazy data-srcset data-sizes')\n                                        .removeClass('slick-loading');\n                                });\n                            _.$slider.trigger('lazyLoaded', [_, image, imageSource]);\n                        });\n\n                };\n\n                imageToLoad.onerror = function() {\n\n                    image\n                        .removeAttr( 'data-lazy' )\n                        .removeClass( 'slick-loading' )\n                        .addClass( 'slick-lazyload-error' );\n\n                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);\n\n                };\n\n                imageToLoad.src = imageSource;\n\n            });\n\n        }\n\n        if (_.options.centerMode === true) {\n            if (_.options.infinite === true) {\n                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);\n                rangeEnd = rangeStart + _.options.slidesToShow + 2;\n            } else {\n                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));\n                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;\n            }\n        } else {\n            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;\n            rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);\n            if (_.options.fade === true) {\n                if (rangeStart > 0) rangeStart--;\n                if (rangeEnd <= _.slideCount) rangeEnd++;\n            }\n        }\n\n        loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);\n\n        if (_.options.lazyLoad === 'anticipated') {\n            var prevSlide = rangeStart - 1,\n                nextSlide = rangeEnd,\n                $slides = _.$slider.find('.slick-slide');\n\n            for (var i = 0; i < _.options.slidesToScroll; i++) {\n                if (prevSlide < 0) prevSlide = _.slideCount - 1;\n                loadRange = loadRange.add($slides.eq(prevSlide));\n                loadRange = loadRange.add($slides.eq(nextSlide));\n                prevSlide--;\n                nextSlide++;\n            }\n        }\n\n        loadImages(loadRange);\n\n        if (_.slideCount <= _.options.slidesToShow) {\n            cloneRange = _.$slider.find('.slick-slide');\n            loadImages(cloneRange);\n        } else\n        if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {\n            cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);\n            loadImages(cloneRange);\n        } else if (_.currentSlide === 0) {\n            cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);\n            loadImages(cloneRange);\n        }\n\n    };\n\n    Slick.prototype.loadSlider = function() {\n\n        var _ = this;\n\n        _.setPosition();\n\n        _.$slideTrack.css({\n            opacity: 1\n        });\n\n        _.$slider.removeClass('slick-loading');\n\n        _.initUI();\n\n        if (_.options.lazyLoad === 'progressive') {\n            _.progressiveLazyLoad();\n        }\n\n    };\n\n    Slick.prototype.next = Slick.prototype.slickNext = function() {\n\n        var _ = this;\n\n        _.changeSlide({\n            data: {\n                message: 'next'\n            }\n        });\n\n    };\n\n    Slick.prototype.orientationChange = function() {\n\n        var _ = this;\n\n        _.checkResponsive();\n        _.setPosition();\n\n    };\n\n    Slick.prototype.pause = Slick.prototype.slickPause = function() {\n\n        var _ = this;\n\n        _.autoPlayClear();\n        _.paused = true;\n\n    };\n\n    Slick.prototype.play = Slick.prototype.slickPlay = function() {\n\n        var _ = this;\n\n        _.autoPlay();\n        _.options.autoplay = true;\n        _.paused = false;\n        _.focussed = false;\n        _.interrupted = false;\n\n    };\n\n    Slick.prototype.postSlide = function(index) {\n\n        var _ = this;\n\n        if( !_.unslicked ) {\n\n            _.$slider.trigger('afterChange', [_, index]);\n\n            _.animating = false;\n\n            if (_.slideCount > _.options.slidesToShow) {\n                _.setPosition();\n            }\n\n            _.swipeLeft = null;\n\n            if ( _.options.autoplay ) {\n                _.autoPlay();\n            }\n\n            if (_.options.accessibility === true) {\n                _.initADA();\n\n                if (_.options.focusOnChange) {\n                    var $currentSlide = $(_.$slides.get(_.currentSlide));\n                    $currentSlide.attr('tabindex', 0).focus();\n                }\n            }\n\n        }\n\n    };\n\n    Slick.prototype.prev = Slick.prototype.slickPrev = function() {\n\n        var _ = this;\n\n        _.changeSlide({\n            data: {\n                message: 'previous'\n            }\n        });\n\n    };\n\n    Slick.prototype.preventDefault = function(event) {\n\n        event.preventDefault();\n\n    };\n\n    Slick.prototype.progressiveLazyLoad = function( tryCount ) {\n\n        tryCount = tryCount || 1;\n\n        var _ = this,\n            $imgsToLoad = $( 'img[data-lazy]', _.$slider ),\n            image,\n            imageSource,\n            imageSrcSet,\n            imageSizes,\n            imageToLoad;\n\n        if ( $imgsToLoad.length ) {\n\n            image = $imgsToLoad.first();\n            imageSource = image.attr('data-lazy');\n            imageSrcSet = image.attr('data-srcset');\n            imageSizes  = image.attr('data-sizes') || _.$slider.attr('data-sizes');\n            imageToLoad = document.createElement('img');\n\n            imageToLoad.onload = function() {\n\n                if (imageSrcSet) {\n                    image\n                        .attr('srcset', imageSrcSet );\n\n                    if (imageSizes) {\n                        image\n                            .attr('sizes', imageSizes );\n                    }\n                }\n\n                image\n                    .attr( 'src', imageSource )\n                    .removeAttr('data-lazy data-srcset data-sizes')\n                    .removeClass('slick-loading');\n\n                if ( _.options.adaptiveHeight === true ) {\n                    _.setPosition();\n                }\n\n                _.$slider.trigger('lazyLoaded', [ _, image, imageSource ]);\n                _.progressiveLazyLoad();\n\n            };\n\n            imageToLoad.onerror = function() {\n\n                if ( tryCount < 3 ) {\n\n                    /**\n                     * try to load the image 3 times,\n                     * leave a slight delay so we don't get\n                     * servers blocking the request.\n                     */\n                    setTimeout( function() {\n                        _.progressiveLazyLoad( tryCount + 1 );\n                    }, 500 );\n\n                } else {\n\n                    image\n                        .removeAttr( 'data-lazy' )\n                        .removeClass( 'slick-loading' )\n                        .addClass( 'slick-lazyload-error' );\n\n                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);\n\n                    _.progressiveLazyLoad();\n\n                }\n\n            };\n\n            imageToLoad.src = imageSource;\n\n        } else {\n\n            _.$slider.trigger('allImagesLoaded', [ _ ]);\n\n        }\n\n    };\n\n    Slick.prototype.refresh = function( initializing ) {\n\n        var _ = this, currentSlide, lastVisibleIndex;\n\n        lastVisibleIndex = _.slideCount - _.options.slidesToShow;\n\n        // in non-infinite sliders, we don't want to go past the\n        // last visible index.\n        if( !_.options.infinite && ( _.currentSlide > lastVisibleIndex )) {\n            _.currentSlide = lastVisibleIndex;\n        }\n\n        // if less slides than to show, go to start.\n        if ( _.slideCount <= _.options.slidesToShow ) {\n            _.currentSlide = 0;\n\n        }\n\n        currentSlide = _.currentSlide;\n\n        _.destroy(true);\n\n        $.extend(_, _.initials, { currentSlide: currentSlide });\n\n        _.init();\n\n        if( !initializing ) {\n\n            _.changeSlide({\n                data: {\n                    message: 'index',\n                    index: currentSlide\n                }\n            }, false);\n\n        }\n\n    };\n\n    Slick.prototype.registerBreakpoints = function() {\n\n        var _ = this, breakpoint, currentBreakpoint, l,\n            responsiveSettings = _.options.responsive || null;\n\n        if ( $.type(responsiveSettings) === 'array' && responsiveSettings.length ) {\n\n            _.respondTo = _.options.respondTo || 'window';\n\n            for ( breakpoint in responsiveSettings ) {\n\n                l = _.breakpoints.length-1;\n\n                if (responsiveSettings.hasOwnProperty(breakpoint)) {\n                    currentBreakpoint = responsiveSettings[breakpoint].breakpoint;\n\n                    // loop through the breakpoints and cut out any existing\n                    // ones with the same breakpoint number, we don't want dupes.\n                    while( l >= 0 ) {\n                        if( _.breakpoints[l] && _.breakpoints[l] === currentBreakpoint ) {\n                            _.breakpoints.splice(l,1);\n                        }\n                        l--;\n                    }\n\n                    _.breakpoints.push(currentBreakpoint);\n                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;\n\n                }\n\n            }\n\n            _.breakpoints.sort(function(a, b) {\n                return ( _.options.mobileFirst ) ? a-b : b-a;\n            });\n\n        }\n\n    };\n\n    Slick.prototype.reinit = function() {\n\n        var _ = this;\n\n        _.$slides =\n            _.$slideTrack\n                .children(_.options.slide)\n                .addClass('slick-slide');\n\n        _.slideCount = _.$slides.length;\n\n        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {\n            _.currentSlide = _.currentSlide - _.options.slidesToScroll;\n        }\n\n        if (_.slideCount <= _.options.slidesToShow) {\n            _.currentSlide = 0;\n        }\n\n        _.registerBreakpoints();\n\n        _.setProps();\n        _.setupInfinite();\n        _.buildArrows();\n        _.updateArrows();\n        _.initArrowEvents();\n        _.buildDots();\n        _.updateDots();\n        _.initDotEvents();\n        _.cleanUpSlideEvents();\n        _.initSlideEvents();\n\n        _.checkResponsive(false, true);\n\n        if (_.options.focusOnSelect === true) {\n            $(_.$slideTrack).children().on('click.slick', _.selectHandler);\n        }\n\n        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);\n\n        _.setPosition();\n        _.focusHandler();\n\n        _.paused = !_.options.autoplay;\n        _.autoPlay();\n\n        _.$slider.trigger('reInit', [_]);\n\n    };\n\n    Slick.prototype.resize = function() {\n\n        var _ = this;\n\n        if ($(window).width() !== _.windowWidth) {\n            clearTimeout(_.windowDelay);\n            _.windowDelay = window.setTimeout(function() {\n                _.windowWidth = $(window).width();\n                _.checkResponsive();\n                if( !_.unslicked ) { _.setPosition(); }\n            }, 50);\n        }\n    };\n\n    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {\n\n        var _ = this;\n\n        if (typeof(index) === 'boolean') {\n            removeBefore = index;\n            index = removeBefore === true ? 0 : _.slideCount - 1;\n        } else {\n            index = removeBefore === true ? --index : index;\n        }\n\n        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {\n            return false;\n        }\n\n        _.unload();\n\n        if (removeAll === true) {\n            _.$slideTrack.children().remove();\n        } else {\n            _.$slideTrack.children(this.options.slide).eq(index).remove();\n        }\n\n        _.$slides = _.$slideTrack.children(this.options.slide);\n\n        _.$slideTrack.children(this.options.slide).detach();\n\n        _.$slideTrack.append(_.$slides);\n\n        _.$slidesCache = _.$slides;\n\n        _.reinit();\n\n    };\n\n    Slick.prototype.setCSS = function(position) {\n\n        var _ = this,\n            positionProps = {},\n            x, y;\n\n        if (_.options.rtl === true) {\n            position = -position;\n        }\n        x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';\n        y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';\n\n        positionProps[_.positionProp] = position;\n\n        if (_.transformsEnabled === false) {\n            _.$slideTrack.css(positionProps);\n        } else {\n            positionProps = {};\n            if (_.cssTransitions === false) {\n                positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';\n                _.$slideTrack.css(positionProps);\n            } else {\n                positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';\n                _.$slideTrack.css(positionProps);\n            }\n        }\n\n    };\n\n    Slick.prototype.setDimensions = function() {\n\n        var _ = this;\n\n        if (_.options.vertical === false) {\n            if (_.options.centerMode === true) {\n                _.$list.css({\n                    padding: ('0px ' + _.options.centerPadding)\n                });\n            }\n        } else {\n            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);\n            if (_.options.centerMode === true) {\n                _.$list.css({\n                    padding: (_.options.centerPadding + ' 0px')\n                });\n            }\n        }\n\n        _.listWidth = _.$list.width();\n        _.listHeight = _.$list.height();\n\n\n        if (_.options.vertical === false && _.options.variableWidth === false) {\n            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);\n            _.$slideTrack.width(Math.ceil((_.slideWidth * _.$slideTrack.children('.slick-slide').length)));\n\n        } else if (_.options.variableWidth === true) {\n            _.$slideTrack.width(5000 * _.slideCount);\n        } else {\n            _.slideWidth = Math.ceil(_.listWidth);\n            _.$slideTrack.height(Math.ceil((_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length)));\n        }\n\n        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();\n        if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);\n\n    };\n\n    Slick.prototype.setFade = function() {\n\n        var _ = this,\n            targetLeft;\n\n        _.$slides.each(function(index, element) {\n            targetLeft = (_.slideWidth * index) * -1;\n            if (_.options.rtl === true) {\n                $(element).css({\n                    position: 'relative',\n                    right: targetLeft,\n                    top: 0,\n                    zIndex: _.options.zIndex - 2,\n                    opacity: 0\n                });\n            } else {\n                $(element).css({\n                    position: 'relative',\n                    left: targetLeft,\n                    top: 0,\n                    zIndex: _.options.zIndex - 2,\n                    opacity: 0\n                });\n            }\n        });\n\n        _.$slides.eq(_.currentSlide).css({\n            zIndex: _.options.zIndex - 1,\n            opacity: 1\n        });\n\n    };\n\n    Slick.prototype.setHeight = function() {\n\n        var _ = this;\n\n        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {\n            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);\n            _.$list.css('height', targetHeight);\n        }\n\n    };\n\n    Slick.prototype.setOption =\n    Slick.prototype.slickSetOption = function() {\n\n        /**\n         * accepts arguments in format of:\n         *\n         *  - for changing a single option's value:\n         *     .slick(\"setOption\", option, value, refresh )\n         *\n         *  - for changing a set of responsive options:\n         *     .slick(\"setOption\", 'responsive', [{}, ...], refresh )\n         *\n         *  - for updating multiple values at once (not responsive)\n         *     .slick(\"setOption\", { 'option': value, ... }, refresh )\n         */\n\n        var _ = this, l, item, option, value, refresh = false, type;\n\n        if( $.type( arguments[0] ) === 'object' ) {\n\n            option =  arguments[0];\n            refresh = arguments[1];\n            type = 'multiple';\n\n        } else if ( $.type( arguments[0] ) === 'string' ) {\n\n            option =  arguments[0];\n            value = arguments[1];\n            refresh = arguments[2];\n\n            if ( arguments[0] === 'responsive' && $.type( arguments[1] ) === 'array' ) {\n\n                type = 'responsive';\n\n            } else if ( typeof arguments[1] !== 'undefined' ) {\n\n                type = 'single';\n\n            }\n\n        }\n\n        if ( type === 'single' ) {\n\n            _.options[option] = value;\n\n\n        } else if ( type === 'multiple' ) {\n\n            $.each( option , function( opt, val ) {\n\n                _.options[opt] = val;\n\n            });\n\n\n        } else if ( type === 'responsive' ) {\n\n            for ( item in value ) {\n\n                if( $.type( _.options.responsive ) !== 'array' ) {\n\n                    _.options.responsive = [ value[item] ];\n\n                } else {\n\n                    l = _.options.responsive.length-1;\n\n                    // loop through the responsive object and splice out duplicates.\n                    while( l >= 0 ) {\n\n                        if( _.options.responsive[l].breakpoint === value[item].breakpoint ) {\n\n                            _.options.responsive.splice(l,1);\n\n                        }\n\n                        l--;\n\n                    }\n\n                    _.options.responsive.push( value[item] );\n\n                }\n\n            }\n\n        }\n\n        if ( refresh ) {\n\n            _.unload();\n            _.reinit();\n\n        }\n\n    };\n\n    Slick.prototype.setPosition = function() {\n\n        var _ = this;\n\n        _.setDimensions();\n\n        _.setHeight();\n\n        if (_.options.fade === false) {\n            _.setCSS(_.getLeft(_.currentSlide));\n        } else {\n            _.setFade();\n        }\n\n        _.$slider.trigger('setPosition', [_]);\n\n    };\n\n    Slick.prototype.setProps = function() {\n\n        var _ = this,\n            bodyStyle = document.body.style;\n\n        _.positionProp = _.options.vertical === true ? 'top' : 'left';\n\n        if (_.positionProp === 'top') {\n            _.$slider.addClass('slick-vertical');\n        } else {\n            _.$slider.removeClass('slick-vertical');\n        }\n\n        if (bodyStyle.WebkitTransition !== undefined ||\n            bodyStyle.MozTransition !== undefined ||\n            bodyStyle.msTransition !== undefined) {\n            if (_.options.useCSS === true) {\n                _.cssTransitions = true;\n            }\n        }\n\n        if ( _.options.fade ) {\n            if ( typeof _.options.zIndex === 'number' ) {\n                if( _.options.zIndex < 3 ) {\n                    _.options.zIndex = 3;\n                }\n            } else {\n                _.options.zIndex = _.defaults.zIndex;\n            }\n        }\n\n        if (bodyStyle.OTransform !== undefined) {\n            _.animType = 'OTransform';\n            _.transformType = '-o-transform';\n            _.transitionType = 'OTransition';\n            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;\n        }\n        if (bodyStyle.MozTransform !== undefined) {\n            _.animType = 'MozTransform';\n            _.transformType = '-moz-transform';\n            _.transitionType = 'MozTransition';\n            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;\n        }\n        if (bodyStyle.webkitTransform !== undefined) {\n            _.animType = 'webkitTransform';\n            _.transformType = '-webkit-transform';\n            _.transitionType = 'webkitTransition';\n            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;\n        }\n        if (bodyStyle.msTransform !== undefined) {\n            _.animType = 'msTransform';\n            _.transformType = '-ms-transform';\n            _.transitionType = 'msTransition';\n            if (bodyStyle.msTransform === undefined) _.animType = false;\n        }\n        if (bodyStyle.transform !== undefined && _.animType !== false) {\n            _.animType = 'transform';\n            _.transformType = 'transform';\n            _.transitionType = 'transition';\n        }\n        _.transformsEnabled = _.options.useTransform && (_.animType !== null && _.animType !== false);\n    };\n\n\n    Slick.prototype.setSlideClasses = function(index) {\n\n        var _ = this,\n            centerOffset, allSlides, indexOffset, remainder;\n\n        allSlides = _.$slider\n            .find('.slick-slide')\n            .removeClass('slick-active slick-center slick-current')\n            .attr('aria-hidden', 'true');\n\n        _.$slides\n            .eq(index)\n            .addClass('slick-current');\n\n        if (_.options.centerMode === true) {\n\n            var evenCoef = _.options.slidesToShow % 2 === 0 ? 1 : 0;\n\n            centerOffset = Math.floor(_.options.slidesToShow / 2);\n\n            if (_.options.infinite === true) {\n\n                if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) {\n                    _.$slides\n                        .slice(index - centerOffset + evenCoef, index + centerOffset + 1)\n                        .addClass('slick-active')\n                        .attr('aria-hidden', 'false');\n\n                } else {\n\n                    indexOffset = _.options.slidesToShow + index;\n                    allSlides\n                        .slice(indexOffset - centerOffset + 1 + evenCoef, indexOffset + centerOffset + 2)\n                        .addClass('slick-active')\n                        .attr('aria-hidden', 'false');\n\n                }\n\n                if (index === 0) {\n\n                    allSlides\n                        .eq(allSlides.length - 1 - _.options.slidesToShow)\n                        .addClass('slick-center');\n\n                } else if (index === _.slideCount - 1) {\n\n                    allSlides\n                        .eq(_.options.slidesToShow)\n                        .addClass('slick-center');\n\n                }\n\n            }\n\n            _.$slides\n                .eq(index)\n                .addClass('slick-center');\n\n        } else {\n\n            if (index >= 0 && index <= (_.slideCount - _.options.slidesToShow)) {\n\n                _.$slides\n                    .slice(index, index + _.options.slidesToShow)\n                    .addClass('slick-active')\n                    .attr('aria-hidden', 'false');\n\n            } else if (allSlides.length <= _.options.slidesToShow) {\n\n                allSlides\n                    .addClass('slick-active')\n                    .attr('aria-hidden', 'false');\n\n            } else {\n\n                remainder = _.slideCount % _.options.slidesToShow;\n                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;\n\n                if (_.options.slidesToShow == _.options.slidesToScroll && (_.slideCount - index) < _.options.slidesToShow) {\n\n                    allSlides\n                        .slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder)\n                        .addClass('slick-active')\n                        .attr('aria-hidden', 'false');\n\n                } else {\n\n                    allSlides\n                        .slice(indexOffset, indexOffset + _.options.slidesToShow)\n                        .addClass('slick-active')\n                        .attr('aria-hidden', 'false');\n\n                }\n\n            }\n\n        }\n\n        if (_.options.lazyLoad === 'ondemand' || _.options.lazyLoad === 'anticipated') {\n            _.lazyLoad();\n        }\n    };\n\n    Slick.prototype.setupInfinite = function() {\n\n        var _ = this,\n            i, slideIndex, infiniteCount;\n\n        if (_.options.fade === true) {\n            _.options.centerMode = false;\n        }\n\n        if (_.options.infinite === true && _.options.fade === false) {\n\n            slideIndex = null;\n\n            if (_.slideCount > _.options.slidesToShow) {\n\n                if (_.options.centerMode === true) {\n                    infiniteCount = _.options.slidesToShow + 1;\n                } else {\n                    infiniteCount = _.options.slidesToShow;\n                }\n\n                for (i = _.slideCount; i > (_.slideCount -\n                        infiniteCount); i -= 1) {\n                    slideIndex = i - 1;\n                    $(_.$slides[slideIndex]).clone(true).attr('id', '')\n                        .attr('data-slick-index', slideIndex - _.slideCount)\n                        .prependTo(_.$slideTrack).addClass('slick-cloned');\n                }\n                for (i = 0; i < infiniteCount  + _.slideCount; i += 1) {\n                    slideIndex = i;\n                    $(_.$slides[slideIndex]).clone(true).attr('id', '')\n                        .attr('data-slick-index', slideIndex + _.slideCount)\n                        .appendTo(_.$slideTrack).addClass('slick-cloned');\n                }\n                _.$slideTrack.find('.slick-cloned').find('[id]').each(function() {\n                    $(this).attr('id', '');\n                });\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.interrupt = function( toggle ) {\n\n        var _ = this;\n\n        if( !toggle ) {\n            _.autoPlay();\n        }\n        _.interrupted = toggle;\n\n    };\n\n    Slick.prototype.selectHandler = function(event) {\n\n        var _ = this;\n\n        var targetElement =\n            $(event.target).is('.slick-slide') ?\n                $(event.target) :\n                $(event.target).parents('.slick-slide');\n\n        var index = parseInt(targetElement.attr('data-slick-index'));\n\n        if (!index) index = 0;\n\n        if (_.slideCount <= _.options.slidesToShow) {\n\n            _.slideHandler(index, false, true);\n            return;\n\n        }\n\n        _.slideHandler(index);\n\n    };\n\n    Slick.prototype.slideHandler = function(index, sync, dontAnimate) {\n\n        var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null,\n            _ = this, navTarget;\n\n        sync = sync || false;\n\n        if (_.animating === true && _.options.waitForAnimate === true) {\n            return;\n        }\n\n        if (_.options.fade === true && _.currentSlide === index) {\n            return;\n        }\n\n        if (sync === false) {\n            _.asNavFor(index);\n        }\n\n        targetSlide = index;\n        targetLeft = _.getLeft(targetSlide);\n        slideLeft = _.getLeft(_.currentSlide);\n\n        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;\n\n        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {\n            if (_.options.fade === false) {\n                targetSlide = _.currentSlide;\n                if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {\n                    _.animateSlide(slideLeft, function() {\n                        _.postSlide(targetSlide);\n                    });\n                } else {\n                    _.postSlide(targetSlide);\n                }\n            }\n            return;\n        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > (_.slideCount - _.options.slidesToScroll))) {\n            if (_.options.fade === false) {\n                targetSlide = _.currentSlide;\n                if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {\n                    _.animateSlide(slideLeft, function() {\n                        _.postSlide(targetSlide);\n                    });\n                } else {\n                    _.postSlide(targetSlide);\n                }\n            }\n            return;\n        }\n\n        if ( _.options.autoplay ) {\n            clearInterval(_.autoPlayTimer);\n        }\n\n        if (targetSlide < 0) {\n            if (_.slideCount % _.options.slidesToScroll !== 0) {\n                animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);\n            } else {\n                animSlide = _.slideCount + targetSlide;\n            }\n        } else if (targetSlide >= _.slideCount) {\n            if (_.slideCount % _.options.slidesToScroll !== 0) {\n                animSlide = 0;\n            } else {\n                animSlide = targetSlide - _.slideCount;\n            }\n        } else {\n            animSlide = targetSlide;\n        }\n\n        _.animating = true;\n\n        _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);\n\n        oldSlide = _.currentSlide;\n        _.currentSlide = animSlide;\n\n        _.setSlideClasses(_.currentSlide);\n\n        if ( _.options.asNavFor ) {\n\n            navTarget = _.getNavTarget();\n            navTarget = navTarget.slick('getSlick');\n\n            if ( navTarget.slideCount <= navTarget.options.slidesToShow ) {\n                navTarget.setSlideClasses(_.currentSlide);\n            }\n\n        }\n\n        _.updateDots();\n        _.updateArrows();\n\n        if (_.options.fade === true) {\n            if (dontAnimate !== true) {\n\n                _.fadeSlideOut(oldSlide);\n\n                _.fadeSlide(animSlide, function() {\n                    _.postSlide(animSlide);\n                });\n\n            } else {\n                _.postSlide(animSlide);\n            }\n            _.animateHeight();\n            return;\n        }\n\n        if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {\n            _.animateSlide(targetLeft, function() {\n                _.postSlide(animSlide);\n            });\n        } else {\n            _.postSlide(animSlide);\n        }\n\n    };\n\n    Slick.prototype.startLoad = function() {\n\n        var _ = this;\n\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$prevArrow.hide();\n            _.$nextArrow.hide();\n\n        }\n\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$dots.hide();\n\n        }\n\n        _.$slider.addClass('slick-loading');\n\n    };\n\n    Slick.prototype.swipeDirection = function() {\n\n        var xDist, yDist, r, swipeAngle, _ = this;\n\n        xDist = _.touchObject.startX - _.touchObject.curX;\n        yDist = _.touchObject.startY - _.touchObject.curY;\n        r = Math.atan2(yDist, xDist);\n\n        swipeAngle = Math.round(r * 180 / Math.PI);\n        if (swipeAngle < 0) {\n            swipeAngle = 360 - Math.abs(swipeAngle);\n        }\n\n        if ((swipeAngle <= 45) && (swipeAngle >= 0)) {\n            return (_.options.rtl === false ? 'left' : 'right');\n        }\n        if ((swipeAngle <= 360) && (swipeAngle >= 315)) {\n            return (_.options.rtl === false ? 'left' : 'right');\n        }\n        if ((swipeAngle >= 135) && (swipeAngle <= 225)) {\n            return (_.options.rtl === false ? 'right' : 'left');\n        }\n        if (_.options.verticalSwiping === true) {\n            if ((swipeAngle >= 35) && (swipeAngle <= 135)) {\n                return 'down';\n            } else {\n                return 'up';\n            }\n        }\n\n        return 'vertical';\n\n    };\n\n    Slick.prototype.swipeEnd = function(event) {\n\n        var _ = this,\n            slideCount,\n            direction;\n\n        _.dragging = false;\n        _.swiping = false;\n\n        if (_.scrolling) {\n            _.scrolling = false;\n            return false;\n        }\n\n        _.interrupted = false;\n        _.shouldClick = ( _.touchObject.swipeLength > 10 ) ? false : true;\n\n        if ( _.touchObject.curX === undefined ) {\n            return false;\n        }\n\n        if ( _.touchObject.edgeHit === true ) {\n            _.$slider.trigger('edge', [_, _.swipeDirection() ]);\n        }\n\n        if ( _.touchObject.swipeLength >= _.touchObject.minSwipe ) {\n\n            direction = _.swipeDirection();\n\n            switch ( direction ) {\n\n                case 'left':\n                case 'down':\n\n                    slideCount =\n                        _.options.swipeToSlide ?\n                            _.checkNavigable( _.currentSlide + _.getSlideCount() ) :\n                            _.currentSlide + _.getSlideCount();\n\n                    _.currentDirection = 0;\n\n                    break;\n\n                case 'right':\n                case 'up':\n\n                    slideCount =\n                        _.options.swipeToSlide ?\n                            _.checkNavigable( _.currentSlide - _.getSlideCount() ) :\n                            _.currentSlide - _.getSlideCount();\n\n                    _.currentDirection = 1;\n\n                    break;\n\n                default:\n\n\n            }\n\n            if( direction != 'vertical' ) {\n\n                _.slideHandler( slideCount );\n                _.touchObject = {};\n                _.$slider.trigger('swipe', [_, direction ]);\n\n            }\n\n        } else {\n\n            if ( _.touchObject.startX !== _.touchObject.curX ) {\n\n                _.slideHandler( _.currentSlide );\n                _.touchObject = {};\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.swipeHandler = function(event) {\n\n        var _ = this;\n\n        if ((_.options.swipe === false) || ('ontouchend' in document && _.options.swipe === false)) {\n            return;\n        } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {\n            return;\n        }\n\n        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ?\n            event.originalEvent.touches.length : 1;\n\n        _.touchObject.minSwipe = _.listWidth / _.options\n            .touchThreshold;\n\n        if (_.options.verticalSwiping === true) {\n            _.touchObject.minSwipe = _.listHeight / _.options\n                .touchThreshold;\n        }\n\n        switch (event.data.action) {\n\n            case 'start':\n                _.swipeStart(event);\n                break;\n\n            case 'move':\n                _.swipeMove(event);\n                break;\n\n            case 'end':\n                _.swipeEnd(event);\n                break;\n\n        }\n\n    };\n\n    Slick.prototype.swipeMove = function(event) {\n\n        var _ = this,\n            edgeWasHit = false,\n            curLeft, swipeDirection, swipeLength, positionOffset, touches, verticalSwipeLength;\n\n        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;\n\n        if (!_.dragging || _.scrolling || touches && touches.length !== 1) {\n            return false;\n        }\n\n        curLeft = _.getLeft(_.currentSlide);\n\n        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;\n        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;\n\n        _.touchObject.swipeLength = Math.round(Math.sqrt(\n            Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));\n\n        verticalSwipeLength = Math.round(Math.sqrt(\n            Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));\n\n        if (!_.options.verticalSwiping && !_.swiping && verticalSwipeLength > 4) {\n            _.scrolling = true;\n            return false;\n        }\n\n        if (_.options.verticalSwiping === true) {\n            _.touchObject.swipeLength = verticalSwipeLength;\n        }\n\n        swipeDirection = _.swipeDirection();\n\n        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {\n            _.swiping = true;\n            event.preventDefault();\n        }\n\n        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);\n        if (_.options.verticalSwiping === true) {\n            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;\n        }\n\n\n        swipeLength = _.touchObject.swipeLength;\n\n        _.touchObject.edgeHit = false;\n\n        if (_.options.infinite === false) {\n            if ((_.currentSlide === 0 && swipeDirection === 'right') || (_.currentSlide >= _.getDotCount() && swipeDirection === 'left')) {\n                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;\n                _.touchObject.edgeHit = true;\n            }\n        }\n\n        if (_.options.vertical === false) {\n            _.swipeLeft = curLeft + swipeLength * positionOffset;\n        } else {\n            _.swipeLeft = curLeft + (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset;\n        }\n        if (_.options.verticalSwiping === true) {\n            _.swipeLeft = curLeft + swipeLength * positionOffset;\n        }\n\n        if (_.options.fade === true || _.options.touchMove === false) {\n            return false;\n        }\n\n        if (_.animating === true) {\n            _.swipeLeft = null;\n            return false;\n        }\n\n        _.setCSS(_.swipeLeft);\n\n    };\n\n    Slick.prototype.swipeStart = function(event) {\n\n        var _ = this,\n            touches;\n\n        _.interrupted = true;\n\n        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {\n            _.touchObject = {};\n            return false;\n        }\n\n        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {\n            touches = event.originalEvent.touches[0];\n        }\n\n        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;\n        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;\n\n        _.dragging = true;\n\n    };\n\n    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {\n\n        var _ = this;\n\n        if (_.$slidesCache !== null) {\n\n            _.unload();\n\n            _.$slideTrack.children(this.options.slide).detach();\n\n            _.$slidesCache.appendTo(_.$slideTrack);\n\n            _.reinit();\n\n        }\n\n    };\n\n    Slick.prototype.unload = function() {\n\n        var _ = this;\n\n        $('.slick-cloned', _.$slider).remove();\n\n        if (_.$dots) {\n            _.$dots.remove();\n        }\n\n        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {\n            _.$prevArrow.remove();\n        }\n\n        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {\n            _.$nextArrow.remove();\n        }\n\n        _.$slides\n            .removeClass('slick-slide slick-active slick-visible slick-current')\n            .attr('aria-hidden', 'true')\n            .css('width', '');\n\n    };\n\n    Slick.prototype.unslick = function(fromBreakpoint) {\n\n        var _ = this;\n        _.$slider.trigger('unslick', [_, fromBreakpoint]);\n        _.destroy();\n\n    };\n\n    Slick.prototype.updateArrows = function() {\n\n        var _ = this,\n            centerOffset;\n\n        centerOffset = Math.floor(_.options.slidesToShow / 2);\n\n        if ( _.options.arrows === true &&\n            _.slideCount > _.options.slidesToShow &&\n            !_.options.infinite ) {\n\n            _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n            _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n            if (_.currentSlide === 0) {\n\n                _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\n                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {\n\n                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\n                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {\n\n                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\n                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.updateDots = function() {\n\n        var _ = this;\n\n        if (_.$dots !== null) {\n\n            _.$dots\n                .find('li')\n                    .removeClass('slick-active')\n                    .end();\n\n            _.$dots\n                .find('li')\n                .eq(Math.floor(_.currentSlide / _.options.slidesToScroll))\n                .addClass('slick-active');\n\n        }\n\n    };\n\n    Slick.prototype.visibility = function() {\n\n        var _ = this;\n\n        if ( _.options.autoplay ) {\n\n            if ( document[_.hidden] ) {\n\n                _.interrupted = true;\n\n            } else {\n\n                _.interrupted = false;\n\n            }\n\n        }\n\n    };\n\n    $.fn.slick = function() {\n        var _ = this,\n            opt = arguments[0],\n            args = Array.prototype.slice.call(arguments, 1),\n            l = _.length,\n            i,\n            ret;\n        for (i = 0; i < l; i++) {\n            if (typeof opt == 'object' || typeof opt == 'undefined')\n                _[i].slick = new Slick(_[i], opt);\n            else\n                ret = _[i].slick[opt].apply(_[i].slick, args);\n            if (typeof ret != 'undefined') return ret;\n        }\n        return _;\n    };\n\n}));\n","/*! tablesorter (FORK) - updated 2018-08-27 (v2.31.0)*/\n/* Includes widgets ( storage,uitheme,columns,filter,stickyHeaders,resizable,saveSort ) */\n(function(factory){if (typeof define === 'function' && define.amd){define(['jquery'], factory);} else if (typeof module === 'object' && typeof module.exports === 'object'){module.exports = factory(require('jquery'));} else {factory(jQuery);}}(function(jQuery) {\n/*! TableSorter (FORK) v2.31.0 *//*\n* Client-side table sorting with ease!\n* @requires jQuery v1.2.6+\n*\n* Copyright (c) 2007 Christian Bach\n* fork maintained by Rob Garrison\n*\n* Examples and original docs at: http://tablesorter.com\n* Dual licensed under the MIT and GPL licenses:\n* http://www.opensource.org/licenses/mit-license.php\n* http://www.gnu.org/licenses/gpl.html\n*\n* @type jQuery\n* @name tablesorter (FORK)\n* @cat Plugins/Tablesorter\n* @author Christian Bach - christian.bach@polyester.se\n* @contributor Rob Garrison - https://github.com/Mottie/tablesorter\n* @docs (fork) - https://mottie.github.io/tablesorter/docs/\n*/\n/*jshint browser:true, jquery:true, unused:false, expr: true */\n;( function( $ ) {\n\t'use strict';\n\tvar ts = $.tablesorter = {\n\n\t\tversion : '2.31.0',\n\n\t\tparsers : [],\n\t\twidgets : [],\n\t\tdefaults : {\n\n\t\t\t// *** appearance\n\t\t\ttheme            : 'default',  // adds tablesorter-{theme} to the table for styling\n\t\t\twidthFixed       : false,      // adds colgroup to fix widths of columns\n\t\t\tshowProcessing   : false,      // show an indeterminate timer icon in the header when the table is sorted or filtered.\n\n\t\t\theaderTemplate   : '{content}',// header layout template (HTML ok); {content} = innerHTML, {icon} = <i/> // class from cssIcon\n\t\t\tonRenderTemplate : null,       // function( index, template ) { return template; }, // template is a string\n\t\t\tonRenderHeader   : null,       // function( index ) {}, // nothing to return\n\n\t\t\t// *** functionality\n\t\t\tcancelSelection  : true,       // prevent text selection in the header\n\t\t\ttabIndex         : true,       // add tabindex to header for keyboard accessibility\n\t\t\tdateFormat       : 'mmddyyyy', // other options: 'ddmmyyy' or 'yyyymmdd'\n\t\t\tsortMultiSortKey : 'shiftKey', // key used to select additional columns\n\t\t\tsortResetKey     : 'ctrlKey',  // key used to remove sorting on a column\n\t\t\tusNumberFormat   : true,       // false for German '1.234.567,89' or French '1 234 567,89'\n\t\t\tdelayInit        : false,      // if false, the parsed table contents will not update until the first sort\n\t\t\tserverSideSorting: false,      // if true, server-side sorting should be performed because client-side sorting will be disabled, but the ui and events will still be used.\n\t\t\tresort           : true,       // default setting to trigger a resort after an 'update', 'addRows', 'updateCell', etc has completed\n\n\t\t\t// *** sort options\n\t\t\theaders          : {},         // set sorter, string, empty, locked order, sortInitialOrder, filter, etc.\n\t\t\tignoreCase       : true,       // ignore case while sorting\n\t\t\tsortForce        : null,       // column(s) first sorted; always applied\n\t\t\tsortList         : [],         // Initial sort order; applied initially; updated when manually sorted\n\t\t\tsortAppend       : null,       // column(s) sorted last; always applied\n\t\t\tsortStable       : false,      // when sorting two rows with exactly the same content, the original sort order is maintained\n\n\t\t\tsortInitialOrder : 'asc',      // sort direction on first click\n\t\t\tsortLocaleCompare: false,      // replace equivalent character (accented characters)\n\t\t\tsortReset        : false,      // third click on the header will reset column to default - unsorted\n\t\t\tsortRestart      : false,      // restart sort to 'sortInitialOrder' when clicking on previously unsorted columns\n\n\t\t\temptyTo          : 'bottom',   // sort empty cell to bottom, top, none, zero, emptyMax, emptyMin\n\t\t\tstringTo         : 'max',      // sort strings in numerical column as max, min, top, bottom, zero\n\t\t\tduplicateSpan    : true,       // colspan cells in the tbody will have duplicated content in the cache for each spanned column\n\t\t\ttextExtraction   : 'basic',    // text extraction method/function - function( node, table, cellIndex ) {}\n\t\t\ttextAttribute    : 'data-text',// data-attribute that contains alternate cell text (used in default textExtraction function)\n\t\t\ttextSorter       : null,       // choose overall or specific column sorter function( a, b, direction, table, columnIndex ) [alt: ts.sortText]\n\t\t\tnumberSorter     : null,       // choose overall numeric sorter function( a, b, direction, maxColumnValue )\n\n\t\t\t// *** widget options\n\t\t\tinitWidgets      : true,       // apply widgets on tablesorter initialization\n\t\t\twidgetClass      : 'widget-{name}', // table class name template to match to include a widget\n\t\t\twidgets          : [],         // method to add widgets, e.g. widgets: ['zebra']\n\t\t\twidgetOptions    : {\n\t\t\t\tzebra : [ 'even', 'odd' ]  // zebra widget alternating row class names\n\t\t\t},\n\n\t\t\t// *** callbacks\n\t\t\tinitialized      : null,       // function( table ) {},\n\n\t\t\t// *** extra css class names\n\t\t\ttableClass       : '',\n\t\t\tcssAsc           : '',\n\t\t\tcssDesc          : '',\n\t\t\tcssNone          : '',\n\t\t\tcssHeader        : '',\n\t\t\tcssHeaderRow     : '',\n\t\t\tcssProcessing    : '', // processing icon applied to header during sort/filter\n\n\t\t\tcssChildRow      : 'tablesorter-childRow', // class name indiciating that a row is to be attached to its parent\n\t\t\tcssInfoBlock     : 'tablesorter-infoOnly', // don't sort tbody with this class name (only one class name allowed here!)\n\t\t\tcssNoSort        : 'tablesorter-noSort',   // class name added to element inside header; clicking on it won't cause a sort\n\t\t\tcssIgnoreRow     : 'tablesorter-ignoreRow',// header row to ignore; cells within this row will not be added to c.$headers\n\n\t\t\tcssIcon          : 'tablesorter-icon', // if this class does not exist, the {icon} will not be added from the headerTemplate\n\t\t\tcssIconNone      : '', // class name added to the icon when there is no column sort\n\t\t\tcssIconAsc       : '', // class name added to the icon when the column has an ascending sort\n\t\t\tcssIconDesc      : '', // class name added to the icon when the column has a descending sort\n\t\t\tcssIconDisabled  : '', // class name added to the icon when the column has a disabled sort\n\n\t\t\t// *** events\n\t\t\tpointerClick     : 'click',\n\t\t\tpointerDown      : 'mousedown',\n\t\t\tpointerUp        : 'mouseup',\n\n\t\t\t// *** selectors\n\t\t\tselectorHeaders  : '> thead th, > thead td',\n\t\t\tselectorSort     : 'th, td', // jQuery selector of content within selectorHeaders that is clickable to trigger a sort\n\t\t\tselectorRemove   : '.remove-me',\n\n\t\t\t// *** advanced\n\t\t\tdebug            : false,\n\n\t\t\t// *** Internal variables\n\t\t\theaderList: [],\n\t\t\tempties: {},\n\t\t\tstrings: {},\n\t\t\tparsers: [],\n\n\t\t\t// *** parser options for validator; values must be falsy!\n\t\t\tglobalize: 0,\n\t\t\timgAttr: 0\n\n\t\t\t// removed: widgetZebra: { css: ['even', 'odd'] }\n\n\t\t},\n\n\t\t// internal css classes - these will ALWAYS be added to\n\t\t// the table and MUST only contain one class name - fixes #381\n\t\tcss : {\n\t\t\ttable      : 'tablesorter',\n\t\t\tcssHasChild: 'tablesorter-hasChildRow',\n\t\t\tchildRow   : 'tablesorter-childRow',\n\t\t\tcolgroup   : 'tablesorter-colgroup',\n\t\t\theader     : 'tablesorter-header',\n\t\t\theaderRow  : 'tablesorter-headerRow',\n\t\t\theaderIn   : 'tablesorter-header-inner',\n\t\t\ticon       : 'tablesorter-icon',\n\t\t\tprocessing : 'tablesorter-processing',\n\t\t\tsortAsc    : 'tablesorter-headerAsc',\n\t\t\tsortDesc   : 'tablesorter-headerDesc',\n\t\t\tsortNone   : 'tablesorter-headerUnSorted'\n\t\t},\n\n\t\t// labels applied to sortable headers for accessibility (aria) support\n\t\tlanguage : {\n\t\t\tsortAsc      : 'Ascending sort applied, ',\n\t\t\tsortDesc     : 'Descending sort applied, ',\n\t\t\tsortNone     : 'No sort applied, ',\n\t\t\tsortDisabled : 'sorting is disabled',\n\t\t\tnextAsc      : 'activate to apply an ascending sort',\n\t\t\tnextDesc     : 'activate to apply a descending sort',\n\t\t\tnextNone     : 'activate to remove the sort'\n\t\t},\n\n\t\tregex : {\n\t\t\ttemplateContent : /\\{content\\}/g,\n\t\t\ttemplateIcon    : /\\{icon\\}/g,\n\t\t\ttemplateName    : /\\{name\\}/i,\n\t\t\tspaces          : /\\s+/g,\n\t\t\tnonWord         : /\\W/g,\n\t\t\tformElements    : /(input|select|button|textarea)/i,\n\n\t\t\t// *** sort functions ***\n\t\t\t// regex used in natural sort\n\t\t\t// chunk/tokenize numbers & letters\n\t\t\tchunk  : /(^([+\\-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?$|^0x[0-9a-f]+$|\\d+)/gi,\n\t\t\t// replace chunks @ ends\n\t\t\tchunks : /(^\\\\0|\\\\0$)/,\n\t\t\thex    : /^0x[0-9a-f]+$/i,\n\n\t\t\t// *** formatFloat ***\n\t\t\tcomma                : /,/g,\n\t\t\tdigitNonUS           : /[\\s|\\.]/g,\n\t\t\tdigitNegativeTest    : /^\\s*\\([.\\d]+\\)/,\n\t\t\tdigitNegativeReplace : /^\\s*\\(([.\\d]+)\\)/,\n\n\t\t\t// *** isDigit ***\n\t\t\tdigitTest    : /^[\\-+(]?\\d+[)]?$/,\n\t\t\tdigitReplace : /[,.'\"\\s]/g\n\n\t\t},\n\n\t\t// digit sort, text location\n\t\tstring : {\n\t\t\tmax      : 1,\n\t\t\tmin      : -1,\n\t\t\temptymin : 1,\n\t\t\temptymax : -1,\n\t\t\tzero     : 0,\n\t\t\tnone     : 0,\n\t\t\t'null'   : 0,\n\t\t\ttop      : true,\n\t\t\tbottom   : false\n\t\t},\n\n\t\tkeyCodes : {\n\t\t\tenter : 13\n\t\t},\n\n\t\t// placeholder date parser data (globalize)\n\t\tdates : {},\n\n\t\t// These methods can be applied on table.config instance\n\t\tinstanceMethods : {},\n\n\t\t/*\n\t\t▄█████ ██████ ██████ ██  ██ █████▄\n\t\t▀█▄    ██▄▄     ██   ██  ██ ██▄▄██\n\t\t   ▀█▄ ██▀▀     ██   ██  ██ ██▀▀▀\n\t\t█████▀ ██████   ██   ▀████▀ ██\n\t\t*/\n\n\t\tsetup : function( table, c ) {\n\t\t\t// if no thead or tbody, or tablesorter is already present, quit\n\t\t\tif ( !table || !table.tHead || table.tBodies.length === 0 || table.hasInitialized === true ) {\n\t\t\t\tif ( ts.debug(c, 'core') ) {\n\t\t\t\t\tif ( table.hasInitialized ) {\n\t\t\t\t\t\tconsole.warn( 'Stopping initialization. Tablesorter has already been initialized' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error( 'Stopping initialization! No table, thead or tbody', table );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar tmp = '',\n\t\t\t\t$table = $( table ),\n\t\t\t\tmeta = $.metadata;\n\t\t\t// initialization flag\n\t\t\ttable.hasInitialized = false;\n\t\t\t// table is being processed flag\n\t\t\ttable.isProcessing = true;\n\t\t\t// make sure to store the config object\n\t\t\ttable.config = c;\n\t\t\t// save the settings where they read\n\t\t\t$.data( table, 'tablesorter', c );\n\t\t\tif ( ts.debug(c, 'core') ) {\n\t\t\t\tconsole[ console.group ? 'group' : 'log' ]( 'Initializing tablesorter v' + ts.version );\n\t\t\t\t$.data( table, 'startoveralltimer', new Date() );\n\t\t\t}\n\n\t\t\t// removing this in version 3 (only supports jQuery 1.7+)\n\t\t\tc.supportsDataObject = ( function( version ) {\n\t\t\t\tversion[ 0 ] = parseInt( version[ 0 ], 10 );\n\t\t\t\treturn ( version[ 0 ] > 1 ) || ( version[ 0 ] === 1 && parseInt( version[ 1 ], 10 ) >= 4 );\n\t\t\t})( $.fn.jquery.split( '.' ) );\n\t\t\t// ensure case insensitivity\n\t\t\tc.emptyTo = c.emptyTo.toLowerCase();\n\t\t\tc.stringTo = c.stringTo.toLowerCase();\n\t\t\tc.last = { sortList : [], clickedIndex : -1 };\n\t\t\t// add table theme class only if there isn't already one there\n\t\t\tif ( !/tablesorter\\-/.test( $table.attr( 'class' ) ) ) {\n\t\t\t\ttmp = ( c.theme !== '' ? ' tablesorter-' + c.theme : '' );\n\t\t\t}\n\n\t\t\t// give the table a unique id, which will be used in namespace binding\n\t\t\tif ( !c.namespace ) {\n\t\t\t\tc.namespace = '.tablesorter' + Math.random().toString( 16 ).slice( 2 );\n\t\t\t} else {\n\t\t\t\t// make sure namespace starts with a period & doesn't have weird characters\n\t\t\t\tc.namespace = '.' + c.namespace.replace( ts.regex.nonWord, '' );\n\t\t\t}\n\n\t\t\tc.table = table;\n\t\t\tc.$table = $table\n\t\t\t\t// add namespace to table to allow bindings on extra elements to target\n\t\t\t\t// the parent table (e.g. parser-input-select)\n\t\t\t\t.addClass( ts.css.table + ' ' + c.tableClass + tmp + ' ' + c.namespace.slice(1) )\n\t\t\t\t.attr( 'role', 'grid' );\n\t\t\tc.$headers = $table.find( c.selectorHeaders );\n\n\t\t\tc.$table.children().children( 'tr' ).attr( 'role', 'row' );\n\t\t\tc.$tbodies = $table.children( 'tbody:not(.' + c.cssInfoBlock + ')' ).attr({\n\t\t\t\t'aria-live' : 'polite',\n\t\t\t\t'aria-relevant' : 'all'\n\t\t\t});\n\t\t\tif ( c.$table.children( 'caption' ).length ) {\n\t\t\t\ttmp = c.$table.children( 'caption' )[ 0 ];\n\t\t\t\tif ( !tmp.id ) { tmp.id = c.namespace.slice( 1 ) + 'caption'; }\n\t\t\t\tc.$table.attr( 'aria-labelledby', tmp.id );\n\t\t\t}\n\t\t\tc.widgetInit = {}; // keep a list of initialized widgets\n\t\t\t// change textExtraction via data-attribute\n\t\t\tc.textExtraction = c.$table.attr( 'data-text-extraction' ) || c.textExtraction || 'basic';\n\t\t\t// build headers\n\t\t\tts.buildHeaders( c );\n\t\t\t// fixate columns if the users supplies the fixedWidth option\n\t\t\t// do this after theme has been applied\n\t\t\tts.fixColumnWidth( table );\n\t\t\t// add widgets from class name\n\t\t\tts.addWidgetFromClass( table );\n\t\t\t// add widget options before parsing (e.g. grouping widget has parser settings)\n\t\t\tts.applyWidgetOptions( table );\n\t\t\t// try to auto detect column type, and store in tables config\n\t\t\tts.setupParsers( c );\n\t\t\t// start total row count at zero\n\t\t\tc.totalRows = 0;\n\t\t\t// only validate options while debugging. See #1528\n\t\t\tif (c.debug) {\n\t\t\t\tts.validateOptions( c );\n\t\t\t}\n\t\t\t// build the cache for the tbody cells\n\t\t\t// delayInit will delay building the cache until the user starts a sort\n\t\t\tif ( !c.delayInit ) { ts.buildCache( c ); }\n\t\t\t// bind all header events and methods\n\t\t\tts.bindEvents( table, c.$headers, true );\n\t\t\tts.bindMethods( c );\n\t\t\t// get sort list from jQuery data or metadata\n\t\t\t// in jQuery < 1.4, an error occurs when calling $table.data()\n\t\t\tif ( c.supportsDataObject && typeof $table.data().sortlist !== 'undefined' ) {\n\t\t\t\tc.sortList = $table.data().sortlist;\n\t\t\t} else if ( meta && ( $table.metadata() && $table.metadata().sortlist ) ) {\n\t\t\t\tc.sortList = $table.metadata().sortlist;\n\t\t\t}\n\t\t\t// apply widget init code\n\t\t\tts.applyWidget( table, true );\n\t\t\t// if user has supplied a sort list to constructor\n\t\t\tif ( c.sortList.length > 0 ) {\n\t\t\t\tts.sortOn( c, c.sortList, {}, !c.initWidgets );\n\t\t\t} else {\n\t\t\t\tts.setHeadersCss( c );\n\t\t\t\tif ( c.initWidgets ) {\n\t\t\t\t\t// apply widget format\n\t\t\t\t\tts.applyWidget( table, false );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// show processesing icon\n\t\t\tif ( c.showProcessing ) {\n\t\t\t\t$table\n\t\t\t\t.unbind( 'sortBegin' + c.namespace + ' sortEnd' + c.namespace )\n\t\t\t\t.bind( 'sortBegin' + c.namespace + ' sortEnd' + c.namespace, function( e ) {\n\t\t\t\t\tclearTimeout( c.timerProcessing );\n\t\t\t\t\tts.isProcessing( table );\n\t\t\t\t\tif ( e.type === 'sortBegin' ) {\n\t\t\t\t\t\tc.timerProcessing = setTimeout( function() {\n\t\t\t\t\t\t\tts.isProcessing( table, true );\n\t\t\t\t\t\t}, 500 );\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// initialized\n\t\t\ttable.hasInitialized = true;\n\t\t\ttable.isProcessing = false;\n\t\t\tif ( ts.debug(c, 'core') ) {\n\t\t\t\tconsole.log( 'Overall initialization time:' + ts.benchmark( $.data( table, 'startoveralltimer' ) ) );\n\t\t\t\tif ( ts.debug(c, 'core') && console.groupEnd ) { console.groupEnd(); }\n\t\t\t}\n\t\t\t$table.triggerHandler( 'tablesorter-initialized', table );\n\t\t\tif ( typeof c.initialized === 'function' ) {\n\t\t\t\tc.initialized( table );\n\t\t\t}\n\t\t},\n\n\t\tbindMethods : function( c ) {\n\t\t\tvar $table = c.$table,\n\t\t\t\tnamespace = c.namespace,\n\t\t\t\tevents = ( 'sortReset update updateRows updateAll updateHeaders addRows updateCell updateComplete ' +\n\t\t\t\t\t'sorton appendCache updateCache applyWidgetId applyWidgets refreshWidgets destroy mouseup ' +\n\t\t\t\t\t'mouseleave ' ).split( ' ' )\n\t\t\t\t\t.join( namespace + ' ' );\n\t\t\t// apply easy methods that trigger bound events\n\t\t\t$table\n\t\t\t.unbind( events.replace( ts.regex.spaces, ' ' ) )\n\t\t\t.bind( 'sortReset' + namespace, function( e, callback ) {\n\t\t\t\te.stopPropagation();\n\t\t\t\t// using this.config to ensure functions are getting a non-cached version of the config\n\t\t\t\tts.sortReset( this.config, function( table ) {\n\t\t\t\t\tif (table.isApplyingWidgets) {\n\t\t\t\t\t\t// multiple triggers in a row... filterReset, then sortReset - see #1361\n\t\t\t\t\t\t// wait to update widgets\n\t\t\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t\t\tts.applyWidget( table, '', callback );\n\t\t\t\t\t\t}, 100 );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tts.applyWidget( table, '', callback );\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t})\n\t\t\t.bind( 'updateAll' + namespace, function( e, resort, callback ) {\n\t\t\t\te.stopPropagation();\n\t\t\t\tts.updateAll( this.config, resort, callback );\n\t\t\t})\n\t\t\t.bind( 'update' + namespace + ' updateRows' + namespace, function( e, resort, callback ) {\n\t\t\t\te.stopPropagation();\n\t\t\t\tts.update( this.config, resort, callback );\n\t\t\t})\n\t\t\t.bind( 'updateHeaders' + namespace, function( e, callback ) {\n\t\t\t\te.stopPropagation();\n\t\t\t\tts.updateHeaders( this.config, callback );\n\t\t\t})\n\t\t\t.bind( 'updateCell' + namespace, function( e, cell, resort, callback ) {\n\t\t\t\te.stopPropagation();\n\t\t\t\tts.updateCell( this.config, cell, resort, callback );\n\t\t\t})\n\t\t\t.bind( 'addRows' + namespace, function( e, $row, resort, callback ) {\n\t\t\t\te.stopPropagation();\n\t\t\t\tts.addRows( this.config, $row, resort, callback );\n\t\t\t})\n\t\t\t.bind( 'updateComplete' + namespace, function() {\n\t\t\t\tthis.isUpdating = false;\n\t\t\t})\n\t\t\t.bind( 'sorton' + namespace, function( e, list, callback, init ) {\n\t\t\t\te.stopPropagation();\n\t\t\t\tts.sortOn( this.config, list, callback, init );\n\t\t\t})\n\t\t\t.bind( 'appendCache' + namespace, function( e, callback, init ) {\n\t\t\t\te.stopPropagation();\n\t\t\t\tts.appendCache( this.config, init );\n\t\t\t\tif ( $.isFunction( callback ) ) {\n\t\t\t\t\tcallback( this );\n\t\t\t\t}\n\t\t\t})\n\t\t\t// $tbodies variable is used by the tbody sorting widget\n\t\t\t.bind( 'updateCache' + namespace, function( e, callback, $tbodies ) {\n\t\t\t\te.stopPropagation();\n\t\t\t\tts.updateCache( this.config, callback, $tbodies );\n\t\t\t})\n\t\t\t.bind( 'applyWidgetId' + namespace, function( e, id ) {\n\t\t\t\te.stopPropagation();\n\t\t\t\tts.applyWidgetId( this, id );\n\t\t\t})\n\t\t\t.bind( 'applyWidgets' + namespace, function( e, callback ) {\n\t\t\t\te.stopPropagation();\n\t\t\t\t// apply widgets (false = not initializing)\n\t\t\t\tts.applyWidget( this, false, callback );\n\t\t\t})\n\t\t\t.bind( 'refreshWidgets' + namespace, function( e, all, dontapply ) {\n\t\t\t\te.stopPropagation();\n\t\t\t\tts.refreshWidgets( this, all, dontapply );\n\t\t\t})\n\t\t\t.bind( 'removeWidget' + namespace, function( e, name, refreshing ) {\n\t\t\t\te.stopPropagation();\n\t\t\t\tts.removeWidget( this, name, refreshing );\n\t\t\t})\n\t\t\t.bind( 'destroy' + namespace, function( e, removeClasses, callback ) {\n\t\t\t\te.stopPropagation();\n\t\t\t\tts.destroy( this, removeClasses, callback );\n\t\t\t})\n\t\t\t.bind( 'resetToLoadState' + namespace, function( e ) {\n\t\t\t\te.stopPropagation();\n\t\t\t\t// remove all widgets\n\t\t\t\tts.removeWidget( this, true, false );\n\t\t\t\tvar tmp = $.extend( true, {}, c.originalSettings );\n\t\t\t\t// restore original settings; this clears out current settings, but does not clear\n\t\t\t\t// values saved to storage.\n\t\t\t\tc = $.extend( true, {}, ts.defaults, tmp );\n\t\t\t\tc.originalSettings = tmp;\n\t\t\t\tthis.hasInitialized = false;\n\t\t\t\t// setup the entire table again\n\t\t\t\tts.setup( this, c );\n\t\t\t});\n\t\t},\n\n\t\tbindEvents : function( table, $headers, core ) {\n\t\t\ttable = $( table )[ 0 ];\n\t\t\tvar tmp,\n\t\t\t\tc = table.config,\n\t\t\t\tnamespace = c.namespace,\n\t\t\t\tdownTarget = null;\n\t\t\tif ( core !== true ) {\n\t\t\t\t$headers.addClass( namespace.slice( 1 ) + '_extra_headers' );\n\t\t\t\ttmp = ts.getClosest( $headers, 'table' );\n\t\t\t\tif ( tmp.length && tmp[ 0 ].nodeName === 'TABLE' && tmp[ 0 ] !== table ) {\n\t\t\t\t\t$( tmp[ 0 ] ).addClass( namespace.slice( 1 ) + '_extra_table' );\n\t\t\t\t}\n\t\t\t}\n\t\t\ttmp = ( c.pointerDown + ' ' + c.pointerUp + ' ' + c.pointerClick + ' sort keyup ' )\n\t\t\t\t.replace( ts.regex.spaces, ' ' )\n\t\t\t\t.split( ' ' )\n\t\t\t\t.join( namespace + ' ' );\n\t\t\t// apply event handling to headers and/or additional headers (stickyheaders, scroller, etc)\n\t\t\t$headers\n\t\t\t// http://stackoverflow.com/questions/5312849/jquery-find-self;\n\t\t\t.find( c.selectorSort )\n\t\t\t.add( $headers.filter( c.selectorSort ) )\n\t\t\t.unbind( tmp )\n\t\t\t.bind( tmp, function( e, external ) {\n\t\t\t\tvar $cell, cell, temp,\n\t\t\t\t\t$target = $( e.target ),\n\t\t\t\t\t// wrap event type in spaces, so the match doesn't trigger on inner words\n\t\t\t\t\ttype = ' ' + e.type + ' ';\n\t\t\t\t// only recognize left clicks\n\t\t\t\tif ( ( ( e.which || e.button ) !== 1 && !type.match( ' ' + c.pointerClick + ' | sort | keyup ' ) ) ||\n\t\t\t\t\t// allow pressing enter\n\t\t\t\t\t( type === ' keyup ' && e.which !== ts.keyCodes.enter ) ||\n\t\t\t\t\t// allow triggering a click event (e.which is undefined) & ignore physical clicks\n\t\t\t\t\t( type.match( ' ' + c.pointerClick + ' ' ) && typeof e.which !== 'undefined' ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// ignore mouseup if mousedown wasn't on the same target\n\t\t\t\tif ( type.match( ' ' + c.pointerUp + ' ' ) && downTarget !== e.target && external !== true ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// set target on mousedown\n\t\t\t\tif ( type.match( ' ' + c.pointerDown + ' ' ) ) {\n\t\t\t\t\tdownTarget = e.target;\n\t\t\t\t\t// preventDefault needed or jQuery v1.3.2 and older throws an\n\t\t\t\t\t// \"Uncaught TypeError: handler.apply is not a function\" error\n\t\t\t\t\ttemp = $target.jquery.split( '.' );\n\t\t\t\t\tif ( temp[ 0 ] === '1' && temp[ 1 ] < 4 ) { e.preventDefault(); }\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tdownTarget = null;\n\t\t\t\t$cell = ts.getClosest( $( this ), '.' + ts.css.header );\n\t\t\t\t// prevent sort being triggered on form elements\n\t\t\t\tif ( ts.regex.formElements.test( e.target.nodeName ) ||\n\t\t\t\t\t// nosort class name, or elements within a nosort container\n\t\t\t\t\t$target.hasClass( c.cssNoSort ) || $target.parents( '.' + c.cssNoSort ).length > 0 ||\n\t\t\t\t\t// disabled cell directly clicked\n\t\t\t\t\t$cell.hasClass( 'sorter-false' ) ||\n\t\t\t\t\t// elements within a button\n\t\t\t\t\t$target.parents( 'button' ).length > 0 ) {\n\t\t\t\t\treturn !c.cancelSelection;\n\t\t\t\t}\n\t\t\t\tif ( c.delayInit && ts.isEmptyObject( c.cache ) ) {\n\t\t\t\t\tts.buildCache( c );\n\t\t\t\t}\n\t\t\t\t// use column index from data-attribute or index of current row; fixes #1116\n\t\t\t\tc.last.clickedIndex = $cell.attr( 'data-column' ) || $cell.index();\n\t\t\t\tcell = c.$headerIndexed[ c.last.clickedIndex ][0];\n\t\t\t\tif ( cell && !cell.sortDisabled ) {\n\t\t\t\t\tts.initSort( c, cell, e );\n\t\t\t\t}\n\t\t\t});\n\t\t\tif ( c.cancelSelection ) {\n\t\t\t\t// cancel selection\n\t\t\t\t$headers\n\t\t\t\t\t.attr( 'unselectable', 'on' )\n\t\t\t\t\t.bind( 'selectstart', false )\n\t\t\t\t\t.css({\n\t\t\t\t\t\t'user-select' : 'none',\n\t\t\t\t\t\t'MozUserSelect' : 'none' // not needed for jQuery 1.8+\n\t\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\tbuildHeaders : function( c ) {\n\t\t\tvar $temp, icon, timer, indx;\n\t\t\tc.headerList = [];\n\t\t\tc.headerContent = [];\n\t\t\tc.sortVars = [];\n\t\t\tif ( ts.debug(c, 'core') ) {\n\t\t\t\ttimer = new Date();\n\t\t\t}\n\t\t\t// children tr in tfoot - see issue #196 & #547\n\t\t\t// don't pass table.config to computeColumnIndex here - widgets (math) pass it to \"quickly\" index tbody cells\n\t\t\tc.columns = ts.computeColumnIndex( c.$table.children( 'thead, tfoot' ).children( 'tr' ) );\n\t\t\t// add icon if cssIcon option exists\n\t\t\ticon = c.cssIcon ?\n\t\t\t\t'<i class=\"' + ( c.cssIcon === ts.css.icon ? ts.css.icon : c.cssIcon + ' ' + ts.css.icon ) + '\"></i>' :\n\t\t\t\t'';\n\t\t\t// redefine c.$headers here in case of an updateAll that replaces or adds an entire header cell - see #683\n\t\t\tc.$headers = $( $.map( c.$table.find( c.selectorHeaders ), function( elem, index ) {\n\t\t\t\tvar configHeaders, header, column, template, tmp,\n\t\t\t\t\t$elem = $( elem );\n\t\t\t\t// ignore cell (don't add it to c.$headers) if row has ignoreRow class\n\t\t\t\tif ( ts.getClosest( $elem, 'tr' ).hasClass( c.cssIgnoreRow ) ) { return; }\n\t\t\t\t// transfer data-column to element if not th/td - #1459\n\t\t\t\tif ( !/(th|td)/i.test( elem.nodeName ) ) {\n\t\t\t\t\ttmp = ts.getClosest( $elem, 'th, td' );\n\t\t\t\t\t$elem.attr( 'data-column', tmp.attr( 'data-column' ) );\n\t\t\t\t}\n\t\t\t\t// make sure to get header cell & not column indexed cell\n\t\t\t\tconfigHeaders = ts.getColumnData( c.table, c.headers, index, true );\n\t\t\t\t// save original header content\n\t\t\t\tc.headerContent[ index ] = $elem.html();\n\t\t\t\t// if headerTemplate is empty, don't reformat the header cell\n\t\t\t\tif ( c.headerTemplate !== '' && !$elem.find( '.' + ts.css.headerIn ).length ) {\n\t\t\t\t\t// set up header template\n\t\t\t\t\ttemplate = c.headerTemplate\n\t\t\t\t\t\t.replace( ts.regex.templateContent, $elem.html() )\n\t\t\t\t\t\t.replace( ts.regex.templateIcon, $elem.find( '.' + ts.css.icon ).length ? '' : icon );\n\t\t\t\t\tif ( c.onRenderTemplate ) {\n\t\t\t\t\t\theader = c.onRenderTemplate.apply( $elem, [ index, template ] );\n\t\t\t\t\t\t// only change t if something is returned\n\t\t\t\t\t\tif ( header && typeof header === 'string' ) {\n\t\t\t\t\t\t\ttemplate = header;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$elem.html( '<div class=\"' + ts.css.headerIn + '\">' + template + '</div>' ); // faster than wrapInner\n\t\t\t\t}\n\t\t\t\tif ( c.onRenderHeader ) {\n\t\t\t\t\tc.onRenderHeader.apply( $elem, [ index, c, c.$table ] );\n\t\t\t\t}\n\t\t\t\tcolumn = parseInt( $elem.attr( 'data-column' ), 10 );\n\t\t\t\telem.column = column;\n\t\t\t\ttmp = ts.getOrder( ts.getData( $elem, configHeaders, 'sortInitialOrder' ) || c.sortInitialOrder );\n\t\t\t\t// this may get updated numerous times if there are multiple rows\n\t\t\t\tc.sortVars[ column ] = {\n\t\t\t\t\tcount : -1, // set to -1 because clicking on the header automatically adds one\n\t\t\t\t\torder : tmp ?\n\t\t\t\t\t\t( c.sortReset ? [ 1, 0, 2 ] : [ 1, 0 ] ) : // desc, asc, unsorted\n\t\t\t\t\t\t( c.sortReset ? [ 0, 1, 2 ] : [ 0, 1 ] ),  // asc, desc, unsorted\n\t\t\t\t\tlockedOrder : false,\n\t\t\t\t\tsortedBy : ''\n\t\t\t\t};\n\t\t\t\ttmp = ts.getData( $elem, configHeaders, 'lockedOrder' ) || false;\n\t\t\t\tif ( typeof tmp !== 'undefined' && tmp !== false ) {\n\t\t\t\t\tc.sortVars[ column ].lockedOrder = true;\n\t\t\t\t\tc.sortVars[ column ].order = ts.getOrder( tmp ) ? [ 1, 1 ] : [ 0, 0 ];\n\t\t\t\t}\n\t\t\t\t// add cell to headerList\n\t\t\t\tc.headerList[ index ] = elem;\n\t\t\t\t$elem.addClass( ts.css.header + ' ' + c.cssHeader );\n\t\t\t\t// add to parent in case there are multiple rows\n\t\t\t\tts.getClosest( $elem, 'tr' )\n\t\t\t\t\t.addClass( ts.css.headerRow + ' ' + c.cssHeaderRow )\n\t\t\t\t\t.attr( 'role', 'row' );\n\t\t\t\t// allow keyboard cursor to focus on element\n\t\t\t\tif ( c.tabIndex ) {\n\t\t\t\t\t$elem.attr( 'tabindex', 0 );\n\t\t\t\t}\n\t\t\t\treturn elem;\n\t\t\t}) );\n\t\t\t// cache headers per column\n\t\t\tc.$headerIndexed = [];\n\t\t\tfor ( indx = 0; indx < c.columns; indx++ ) {\n\t\t\t\t// colspan in header making a column undefined\n\t\t\t\tif ( ts.isEmptyObject( c.sortVars[ indx ] ) ) {\n\t\t\t\t\tc.sortVars[ indx ] = {};\n\t\t\t\t}\n\t\t\t\t// Use c.$headers.parent() in case selectorHeaders doesn't point to the th/td\n\t\t\t\t$temp = c.$headers.filter( '[data-column=\"' + indx + '\"]' );\n\t\t\t\t// target sortable column cells, unless there are none, then use non-sortable cells\n\t\t\t\t// .last() added in jQuery 1.4; use .filter(':last') to maintain compatibility with jQuery v1.2.6\n\t\t\t\tc.$headerIndexed[ indx ] = $temp.length ?\n\t\t\t\t\t$temp.not( '.sorter-false' ).length ?\n\t\t\t\t\t\t$temp.not( '.sorter-false' ).filter( ':last' ) :\n\t\t\t\t\t\t$temp.filter( ':last' ) :\n\t\t\t\t\t$();\n\t\t\t}\n\t\t\tc.$table.find( c.selectorHeaders ).attr({\n\t\t\t\tscope: 'col',\n\t\t\t\trole : 'columnheader'\n\t\t\t});\n\t\t\t// enable/disable sorting\n\t\t\tts.updateHeader( c );\n\t\t\tif ( ts.debug(c, 'core') ) {\n\t\t\t\tconsole.log( 'Built headers:' + ts.benchmark( timer ) );\n\t\t\t\tconsole.log( c.$headers );\n\t\t\t}\n\t\t},\n\n\t\t// Use it to add a set of methods to table.config which will be available for all tables.\n\t\t// This should be done before table initialization\n\t\taddInstanceMethods : function( methods ) {\n\t\t\t$.extend( ts.instanceMethods, methods );\n\t\t},\n\n\t\t/*\n\t\t█████▄ ▄████▄ █████▄ ▄█████ ██████ █████▄ ▄█████\n\t\t██▄▄██ ██▄▄██ ██▄▄██ ▀█▄    ██▄▄   ██▄▄██ ▀█▄\n\t\t██▀▀▀  ██▀▀██ ██▀██     ▀█▄ ██▀▀   ██▀██     ▀█▄\n\t\t██     ██  ██ ██  ██ █████▀ ██████ ██  ██ █████▀\n\t\t*/\n\t\tsetupParsers : function( c, $tbodies ) {\n\t\t\tvar rows, list, span, max, colIndex, indx, header, configHeaders,\n\t\t\t\tnoParser, parser, extractor, time, tbody, len,\n\t\t\t\ttable = c.table,\n\t\t\t\ttbodyIndex = 0,\n\t\t\t\tdebug = ts.debug(c, 'core'),\n\t\t\t\tdebugOutput = {};\n\t\t\t// update table bodies in case we start with an empty table\n\t\t\tc.$tbodies = c.$table.children( 'tbody:not(.' + c.cssInfoBlock + ')' );\n\t\t\ttbody = typeof $tbodies === 'undefined' ? c.$tbodies : $tbodies;\n\t\t\tlen = tbody.length;\n\t\t\tif ( len === 0 ) {\n\t\t\t\treturn debug ? console.warn( 'Warning: *Empty table!* Not building a parser cache' ) : '';\n\t\t\t} else if ( debug ) {\n\t\t\t\ttime = new Date();\n\t\t\t\tconsole[ console.group ? 'group' : 'log' ]( 'Detecting parsers for each column' );\n\t\t\t}\n\t\t\tlist = {\n\t\t\t\textractors: [],\n\t\t\t\tparsers: []\n\t\t\t};\n\t\t\twhile ( tbodyIndex < len ) {\n\t\t\t\trows = tbody[ tbodyIndex ].rows;\n\t\t\t\tif ( rows.length ) {\n\t\t\t\t\tcolIndex = 0;\n\t\t\t\t\tmax = c.columns;\n\t\t\t\t\tfor ( indx = 0; indx < max; indx++ ) {\n\t\t\t\t\t\theader = c.$headerIndexed[ colIndex ];\n\t\t\t\t\t\tif ( header && header.length ) {\n\t\t\t\t\t\t\t// get column indexed table cell; adding true parameter fixes #1362 but\n\t\t\t\t\t\t\t// it would break backwards compatibility...\n\t\t\t\t\t\t\tconfigHeaders = ts.getColumnData( table, c.headers, colIndex ); // , true );\n\t\t\t\t\t\t\t// get column parser/extractor\n\t\t\t\t\t\t\textractor = ts.getParserById( ts.getData( header, configHeaders, 'extractor' ) );\n\t\t\t\t\t\t\tparser = ts.getParserById( ts.getData( header, configHeaders, 'sorter' ) );\n\t\t\t\t\t\t\tnoParser = ts.getData( header, configHeaders, 'parser' ) === 'false';\n\t\t\t\t\t\t\t// empty cells behaviour - keeping emptyToBottom for backwards compatibility\n\t\t\t\t\t\t\tc.empties[colIndex] = (\n\t\t\t\t\t\t\t\tts.getData( header, configHeaders, 'empty' ) ||\n\t\t\t\t\t\t\t\tc.emptyTo || ( c.emptyToBottom ? 'bottom' : 'top' ) ).toLowerCase();\n\t\t\t\t\t\t\t// text strings behaviour in numerical sorts\n\t\t\t\t\t\t\tc.strings[colIndex] = (\n\t\t\t\t\t\t\t\tts.getData( header, configHeaders, 'string' ) ||\n\t\t\t\t\t\t\t\tc.stringTo ||\n\t\t\t\t\t\t\t\t'max' ).toLowerCase();\n\t\t\t\t\t\t\tif ( noParser ) {\n\t\t\t\t\t\t\t\tparser = ts.getParserById( 'no-parser' );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( !extractor ) {\n\t\t\t\t\t\t\t\t// For now, maybe detect someday\n\t\t\t\t\t\t\t\textractor = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( !parser ) {\n\t\t\t\t\t\t\t\tparser = ts.detectParserForColumn( c, rows, -1, colIndex );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( debug ) {\n\t\t\t\t\t\t\t\tdebugOutput[ '(' + colIndex + ') ' + header.text() ] = {\n\t\t\t\t\t\t\t\t\tparser : parser.id,\n\t\t\t\t\t\t\t\t\textractor : extractor ? extractor.id : 'none',\n\t\t\t\t\t\t\t\t\tstring : c.strings[ colIndex ],\n\t\t\t\t\t\t\t\t\tempty  : c.empties[ colIndex ]\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlist.parsers[ colIndex ] = parser;\n\t\t\t\t\t\t\tlist.extractors[ colIndex ] = extractor;\n\t\t\t\t\t\t\tspan = header[ 0 ].colSpan - 1;\n\t\t\t\t\t\t\tif ( span > 0 ) {\n\t\t\t\t\t\t\t\tcolIndex += span;\n\t\t\t\t\t\t\t\tmax += span;\n\t\t\t\t\t\t\t\twhile ( span + 1 > 0 ) {\n\t\t\t\t\t\t\t\t\t// set colspan columns to use the same parsers & extractors\n\t\t\t\t\t\t\t\t\tlist.parsers[ colIndex - span ] = parser;\n\t\t\t\t\t\t\t\t\tlist.extractors[ colIndex - span ] = extractor;\n\t\t\t\t\t\t\t\t\tspan--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcolIndex++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttbodyIndex += ( list.parsers.length ) ? len : 1;\n\t\t\t}\n\t\t\tif ( debug ) {\n\t\t\t\tif ( !ts.isEmptyObject( debugOutput ) ) {\n\t\t\t\t\tconsole[ console.table ? 'table' : 'log' ]( debugOutput );\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn( '  No parsers detected!' );\n\t\t\t\t}\n\t\t\t\tconsole.log( 'Completed detecting parsers' + ts.benchmark( time ) );\n\t\t\t\tif ( console.groupEnd ) { console.groupEnd(); }\n\t\t\t}\n\t\t\tc.parsers = list.parsers;\n\t\t\tc.extractors = list.extractors;\n\t\t},\n\n\t\taddParser : function( parser ) {\n\t\t\tvar indx,\n\t\t\t\tlen = ts.parsers.length,\n\t\t\t\tadd = true;\n\t\t\tfor ( indx = 0; indx < len; indx++ ) {\n\t\t\t\tif ( ts.parsers[ indx ].id.toLowerCase() === parser.id.toLowerCase() ) {\n\t\t\t\t\tadd = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( add ) {\n\t\t\t\tts.parsers[ ts.parsers.length ] = parser;\n\t\t\t}\n\t\t},\n\n\t\tgetParserById : function( name ) {\n\t\t\t/*jshint eqeqeq:false */ // eslint-disable-next-line eqeqeq\n\t\t\tif ( name == 'false' ) { return false; }\n\t\t\tvar indx,\n\t\t\t\tlen = ts.parsers.length;\n\t\t\tfor ( indx = 0; indx < len; indx++ ) {\n\t\t\t\tif ( ts.parsers[ indx ].id.toLowerCase() === ( name.toString() ).toLowerCase() ) {\n\t\t\t\t\treturn ts.parsers[ indx ];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\n\t\tdetectParserForColumn : function( c, rows, rowIndex, cellIndex ) {\n\t\t\tvar cur, $node, row,\n\t\t\t\tindx = ts.parsers.length,\n\t\t\t\tnode = false,\n\t\t\t\tnodeValue = '',\n\t\t\t\tdebug = ts.debug(c, 'core'),\n\t\t\t\tkeepLooking = true;\n\t\t\twhile ( nodeValue === '' && keepLooking ) {\n\t\t\t\trowIndex++;\n\t\t\t\trow = rows[ rowIndex ];\n\t\t\t\t// stop looking after 50 empty rows\n\t\t\t\tif ( row && rowIndex < 50 ) {\n\t\t\t\t\tif ( row.className.indexOf( ts.cssIgnoreRow ) < 0 ) {\n\t\t\t\t\t\tnode = rows[ rowIndex ].cells[ cellIndex ];\n\t\t\t\t\t\tnodeValue = ts.getElementText( c, node, cellIndex );\n\t\t\t\t\t\t$node = $( node );\n\t\t\t\t\t\tif ( debug ) {\n\t\t\t\t\t\t\tconsole.log( 'Checking if value was empty on row ' + rowIndex + ', column: ' +\n\t\t\t\t\t\t\t\tcellIndex + ': \"' + nodeValue + '\"' );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tkeepLooking = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile ( --indx >= 0 ) {\n\t\t\t\tcur = ts.parsers[ indx ];\n\t\t\t\t// ignore the default text parser because it will always be true\n\t\t\t\tif ( cur && cur.id !== 'text' && cur.is && cur.is( nodeValue, c.table, node, $node ) ) {\n\t\t\t\t\treturn cur;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// nothing found, return the generic parser (text)\n\t\t\treturn ts.getParserById( 'text' );\n\t\t},\n\n\t\tgetElementText : function( c, node, cellIndex ) {\n\t\t\tif ( !node ) { return ''; }\n\t\t\tvar tmp,\n\t\t\t\textract = c.textExtraction || '',\n\t\t\t\t// node could be a jquery object\n\t\t\t\t// http://jsperf.com/jquery-vs-instanceof-jquery/2\n\t\t\t\t$node = node.jquery ? node : $( node );\n\t\t\tif ( typeof extract === 'string' ) {\n\t\t\t\t// check data-attribute first when set to 'basic'; don't use node.innerText - it's really slow!\n\t\t\t\t// http://www.kellegous.com/j/2013/02/27/innertext-vs-textcontent/\n\t\t\t\tif ( extract === 'basic' && typeof ( tmp = $node.attr( c.textAttribute ) ) !== 'undefined' ) {\n\t\t\t\t\treturn $.trim( tmp );\n\t\t\t\t}\n\t\t\t\treturn $.trim( node.textContent || $node.text() );\n\t\t\t} else {\n\t\t\t\tif ( typeof extract === 'function' ) {\n\t\t\t\t\treturn $.trim( extract( $node[ 0 ], c.table, cellIndex ) );\n\t\t\t\t} else if ( typeof ( tmp = ts.getColumnData( c.table, extract, cellIndex ) ) === 'function' ) {\n\t\t\t\t\treturn $.trim( tmp( $node[ 0 ], c.table, cellIndex ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// fallback\n\t\t\treturn $.trim( $node[ 0 ].textContent || $node.text() );\n\t\t},\n\n\t\t// centralized function to extract/parse cell contents\n\t\tgetParsedText : function( c, cell, colIndex, txt ) {\n\t\t\tif ( typeof txt === 'undefined' ) {\n\t\t\t\ttxt = ts.getElementText( c, cell, colIndex );\n\t\t\t}\n\t\t\t// if no parser, make sure to return the txt\n\t\t\tvar val = '' + txt,\n\t\t\t\tparser = c.parsers[ colIndex ],\n\t\t\t\textractor = c.extractors[ colIndex ];\n\t\t\tif ( parser ) {\n\t\t\t\t// do extract before parsing, if there is one\n\t\t\t\tif ( extractor && typeof extractor.format === 'function' ) {\n\t\t\t\t\ttxt = extractor.format( txt, c.table, cell, colIndex );\n\t\t\t\t}\n\t\t\t\t// allow parsing if the string is empty, previously parsing would change it to zero,\n\t\t\t\t// in case the parser needs to extract data from the table cell attributes\n\t\t\t\tval = parser.id === 'no-parser' ? '' :\n\t\t\t\t\t// make sure txt is a string (extractor may have converted it)\n\t\t\t\t\tparser.format( '' + txt, c.table, cell, colIndex );\n\t\t\t\tif ( c.ignoreCase && typeof val === 'string' ) {\n\t\t\t\t\tval = val.toLowerCase();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn val;\n\t\t},\n\n\t\t/*\n\t\t▄████▄ ▄████▄ ▄████▄ ██  ██ ██████\n\t\t██  ▀▀ ██▄▄██ ██  ▀▀ ██▄▄██ ██▄▄\n\t\t██  ▄▄ ██▀▀██ ██  ▄▄ ██▀▀██ ██▀▀\n\t\t▀████▀ ██  ██ ▀████▀ ██  ██ ██████\n\t\t*/\n\t\tbuildCache : function( c, callback, $tbodies ) {\n\t\t\tvar cache, val, txt, rowIndex, colIndex, tbodyIndex, $tbody, $row,\n\t\t\t\tcols, $cells, cell, cacheTime, totalRows, rowData, prevRowData,\n\t\t\t\tcolMax, span, cacheIndex, hasParser, max, len, index,\n\t\t\t\ttable = c.table,\n\t\t\t\tparsers = c.parsers,\n\t\t\t\tdebug = ts.debug(c, 'core');\n\t\t\t// update tbody variable\n\t\t\tc.$tbodies = c.$table.children( 'tbody:not(.' + c.cssInfoBlock + ')' );\n\t\t\t$tbody = typeof $tbodies === 'undefined' ? c.$tbodies : $tbodies,\n\t\t\tc.cache = {};\n\t\t\tc.totalRows = 0;\n\t\t\t// if no parsers found, return - it's an empty table.\n\t\t\tif ( !parsers ) {\n\t\t\t\treturn debug ? console.warn( 'Warning: *Empty table!* Not building a cache' ) : '';\n\t\t\t}\n\t\t\tif ( debug ) {\n\t\t\t\tcacheTime = new Date();\n\t\t\t}\n\t\t\t// processing icon\n\t\t\tif ( c.showProcessing ) {\n\t\t\t\tts.isProcessing( table, true );\n\t\t\t}\n\t\t\tfor ( tbodyIndex = 0; tbodyIndex < $tbody.length; tbodyIndex++ ) {\n\t\t\t\tcolMax = []; // column max value per tbody\n\t\t\t\tcache = c.cache[ tbodyIndex ] = {\n\t\t\t\t\tnormalized: [] // array of normalized row data; last entry contains 'rowData' above\n\t\t\t\t\t// colMax: #   // added at the end\n\t\t\t\t};\n\n\t\t\t\ttotalRows = ( $tbody[ tbodyIndex ] && $tbody[ tbodyIndex ].rows.length ) || 0;\n\t\t\t\tfor ( rowIndex = 0; rowIndex < totalRows; ++rowIndex ) {\n\t\t\t\t\trowData = {\n\t\t\t\t\t\t// order: original row order #\n\t\t\t\t\t\t// $row : jQuery Object[]\n\t\t\t\t\t\tchild: [], // child row text (filter widget)\n\t\t\t\t\t\traw: []    // original row text\n\t\t\t\t\t};\n\t\t\t\t\t/** Add the table data to main data array */\n\t\t\t\t\t$row = $( $tbody[ tbodyIndex ].rows[ rowIndex ] );\n\t\t\t\t\tcols = [];\n\t\t\t\t\t// ignore \"remove-me\" rows\n\t\t\t\t\tif ( $row.hasClass( c.selectorRemove.slice(1) ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// if this is a child row, add it to the last row's children and continue to the next row\n\t\t\t\t\t// ignore child row class, if it is the first row\n\t\t\t\t\tif ( $row.hasClass( c.cssChildRow ) && rowIndex !== 0 ) {\n\t\t\t\t\t\tlen = cache.normalized.length - 1;\n\t\t\t\t\t\tprevRowData = cache.normalized[ len ][ c.columns ];\n\t\t\t\t\t\tprevRowData.$row = prevRowData.$row.add( $row );\n\t\t\t\t\t\t// add 'hasChild' class name to parent row\n\t\t\t\t\t\tif ( !$row.prev().hasClass( c.cssChildRow ) ) {\n\t\t\t\t\t\t\t$row.prev().addClass( ts.css.cssHasChild );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// save child row content (un-parsed!)\n\t\t\t\t\t\t$cells = $row.children( 'th, td' );\n\t\t\t\t\t\tlen = prevRowData.child.length;\n\t\t\t\t\t\tprevRowData.child[ len ] = [];\n\t\t\t\t\t\t// child row content does not account for colspans/rowspans; so indexing may be off\n\t\t\t\t\t\tcacheIndex = 0;\n\t\t\t\t\t\tmax = c.columns;\n\t\t\t\t\t\tfor ( colIndex = 0; colIndex < max; colIndex++ ) {\n\t\t\t\t\t\t\tcell = $cells[ colIndex ];\n\t\t\t\t\t\t\tif ( cell ) {\n\t\t\t\t\t\t\t\tprevRowData.child[ len ][ colIndex ] = ts.getParsedText( c, cell, colIndex );\n\t\t\t\t\t\t\t\tspan = $cells[ colIndex ].colSpan - 1;\n\t\t\t\t\t\t\t\tif ( span > 0 ) {\n\t\t\t\t\t\t\t\t\tcacheIndex += span;\n\t\t\t\t\t\t\t\t\tmax += span;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcacheIndex++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// go to the next for loop\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\trowData.$row = $row;\n\t\t\t\t\trowData.order = rowIndex; // add original row position to rowCache\n\t\t\t\t\tcacheIndex = 0;\n\t\t\t\t\tmax = c.columns;\n\t\t\t\t\tfor ( colIndex = 0; colIndex < max; ++colIndex ) {\n\t\t\t\t\t\tcell = $row[ 0 ].cells[ colIndex ];\n\t\t\t\t\t\tif ( cell && cacheIndex < c.columns ) {\n\t\t\t\t\t\t\thasParser = typeof parsers[ cacheIndex ] !== 'undefined';\n\t\t\t\t\t\t\tif ( !hasParser && debug ) {\n\t\t\t\t\t\t\t\tconsole.warn( 'No parser found for row: ' + rowIndex + ', column: ' + colIndex +\n\t\t\t\t\t\t\t\t\t'; cell containing: \"' + $(cell).text() + '\"; does it have a header?' );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tval = ts.getElementText( c, cell, cacheIndex );\n\t\t\t\t\t\t\trowData.raw[ cacheIndex ] = val; // save original row text\n\t\t\t\t\t\t\t// save raw column text even if there is no parser set\n\t\t\t\t\t\t\ttxt = ts.getParsedText( c, cell, cacheIndex, val );\n\t\t\t\t\t\t\tcols[ cacheIndex ] = txt;\n\t\t\t\t\t\t\tif ( hasParser && ( parsers[ cacheIndex ].type || '' ).toLowerCase() === 'numeric' ) {\n\t\t\t\t\t\t\t\t// determine column max value (ignore sign)\n\t\t\t\t\t\t\t\tcolMax[ cacheIndex ] = Math.max( Math.abs( txt ) || 0, colMax[ cacheIndex ] || 0 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// allow colSpan in tbody\n\t\t\t\t\t\t\tspan = cell.colSpan - 1;\n\t\t\t\t\t\t\tif ( span > 0 ) {\n\t\t\t\t\t\t\t\tindex = 0;\n\t\t\t\t\t\t\t\twhile ( index <= span ) {\n\t\t\t\t\t\t\t\t\t// duplicate text (or not) to spanned columns\n\t\t\t\t\t\t\t\t\t// instead of setting duplicate span to empty string, use textExtraction to try to get a value\n\t\t\t\t\t\t\t\t\t// see http://stackoverflow.com/q/36449711/145346\n\t\t\t\t\t\t\t\t\ttxt = c.duplicateSpan || index === 0 ?\n\t\t\t\t\t\t\t\t\t\tval :\n\t\t\t\t\t\t\t\t\t\ttypeof c.textExtraction !== 'string' ?\n\t\t\t\t\t\t\t\t\t\t\tts.getElementText( c, cell, cacheIndex + index ) || '' :\n\t\t\t\t\t\t\t\t\t\t\t'';\n\t\t\t\t\t\t\t\t\trowData.raw[ cacheIndex + index ] = txt;\n\t\t\t\t\t\t\t\t\tcols[ cacheIndex + index ] = txt;\n\t\t\t\t\t\t\t\t\tindex++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcacheIndex += span;\n\t\t\t\t\t\t\t\tmax += span;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcacheIndex++;\n\t\t\t\t\t}\n\t\t\t\t\t// ensure rowData is always in the same location (after the last column)\n\t\t\t\t\tcols[ c.columns ] = rowData;\n\t\t\t\t\tcache.normalized[ cache.normalized.length ] = cols;\n\t\t\t\t}\n\t\t\t\tcache.colMax = colMax;\n\t\t\t\t// total up rows, not including child rows\n\t\t\t\tc.totalRows += cache.normalized.length;\n\n\t\t\t}\n\t\t\tif ( c.showProcessing ) {\n\t\t\t\tts.isProcessing( table ); // remove processing icon\n\t\t\t}\n\t\t\tif ( debug ) {\n\t\t\t\tlen = Math.min( 5, c.cache[ 0 ].normalized.length );\n\t\t\t\tconsole[ console.group ? 'group' : 'log' ]( 'Building cache for ' + c.totalRows +\n\t\t\t\t\t' rows (showing ' + len + ' rows in log) and ' + c.columns + ' columns' +\n\t\t\t\t\tts.benchmark( cacheTime ) );\n\t\t\t\tval = {};\n\t\t\t\tfor ( colIndex = 0; colIndex < c.columns; colIndex++ ) {\n\t\t\t\t\tfor ( cacheIndex = 0; cacheIndex < len; cacheIndex++ ) {\n\t\t\t\t\t\tif ( !val[ 'row: ' + cacheIndex ] ) {\n\t\t\t\t\t\t\tval[ 'row: ' + cacheIndex ] = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tval[ 'row: ' + cacheIndex ][ c.$headerIndexed[ colIndex ].text() ] =\n\t\t\t\t\t\t\tc.cache[ 0 ].normalized[ cacheIndex ][ colIndex ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconsole[ console.table ? 'table' : 'log' ]( val );\n\t\t\t\tif ( console.groupEnd ) { console.groupEnd(); }\n\t\t\t}\n\t\t\tif ( $.isFunction( callback ) ) {\n\t\t\t\tcallback( table );\n\t\t\t}\n\t\t},\n\n\t\tgetColumnText : function( table, column, callback, rowFilter ) {\n\t\t\ttable = $( table )[0];\n\t\t\tvar tbodyIndex, rowIndex, cache, row, tbodyLen, rowLen, raw, parsed, $cell, result,\n\t\t\t\thasCallback = typeof callback === 'function',\n\t\t\t\tallColumns = column === 'all',\n\t\t\t\tdata = { raw : [], parsed: [], $cell: [] },\n\t\t\t\tc = table.config;\n\t\t\tif ( ts.isEmptyObject( c ) ) {\n\t\t\t\tif ( ts.debug(c, 'core') ) {\n\t\t\t\t\tconsole.warn( 'No cache found - aborting getColumnText function!' );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttbodyLen = c.$tbodies.length;\n\t\t\t\tfor ( tbodyIndex = 0; tbodyIndex < tbodyLen; tbodyIndex++ ) {\n\t\t\t\t\tcache = c.cache[ tbodyIndex ].normalized;\n\t\t\t\t\trowLen = cache.length;\n\t\t\t\t\tfor ( rowIndex = 0; rowIndex < rowLen; rowIndex++ ) {\n\t\t\t\t\t\trow = cache[ rowIndex ];\n\t\t\t\t\t\tif ( rowFilter && !row[ c.columns ].$row.is( rowFilter ) ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult = true;\n\t\t\t\t\t\tparsed = ( allColumns ) ? row.slice( 0, c.columns ) : row[ column ];\n\t\t\t\t\t\trow = row[ c.columns ];\n\t\t\t\t\t\traw = ( allColumns ) ? row.raw : row.raw[ column ];\n\t\t\t\t\t\t$cell = ( allColumns ) ? row.$row.children() : row.$row.children().eq( column );\n\t\t\t\t\t\tif ( hasCallback ) {\n\t\t\t\t\t\t\tresult = callback({\n\t\t\t\t\t\t\t\ttbodyIndex : tbodyIndex,\n\t\t\t\t\t\t\t\trowIndex : rowIndex,\n\t\t\t\t\t\t\t\tparsed : parsed,\n\t\t\t\t\t\t\t\traw : raw,\n\t\t\t\t\t\t\t\t$row : row.$row,\n\t\t\t\t\t\t\t\t$cell : $cell\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( result !== false ) {\n\t\t\t\t\t\t\tdata.parsed[ data.parsed.length ] = parsed;\n\t\t\t\t\t\t\tdata.raw[ data.raw.length ] = raw;\n\t\t\t\t\t\t\tdata.$cell[ data.$cell.length ] = $cell;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// return everything\n\t\t\t\treturn data;\n\t\t\t}\n\t\t},\n\n\t\t/*\n\t\t██  ██ █████▄ █████▄ ▄████▄ ██████ ██████\n\t\t██  ██ ██▄▄██ ██  ██ ██▄▄██   ██   ██▄▄\n\t\t██  ██ ██▀▀▀  ██  ██ ██▀▀██   ██   ██▀▀\n\t\t▀████▀ ██     █████▀ ██  ██   ██   ██████\n\t\t*/\n\t\tsetHeadersCss : function( c ) {\n\t\t\tvar indx, column,\n\t\t\t\tlist = c.sortList,\n\t\t\t\tlen = list.length,\n\t\t\t\tnone = ts.css.sortNone + ' ' + c.cssNone,\n\t\t\t\tcss = [ ts.css.sortAsc + ' ' + c.cssAsc, ts.css.sortDesc + ' ' + c.cssDesc ],\n\t\t\t\tcssIcon = [ c.cssIconAsc, c.cssIconDesc, c.cssIconNone ],\n\t\t\t\taria = [ 'ascending', 'descending' ],\n\t\t\t\tupdateColumnSort = function($el, index) {\n\t\t\t\t\t$el\n\t\t\t\t\t\t.removeClass( none )\n\t\t\t\t\t\t.addClass( css[ index ] )\n\t\t\t\t\t\t.attr( 'aria-sort', aria[ index ] )\n\t\t\t\t\t\t.find( '.' + ts.css.icon )\n\t\t\t\t\t\t.removeClass( cssIcon[ 2 ] )\n\t\t\t\t\t\t.addClass( cssIcon[ index ] );\n\t\t\t\t},\n\t\t\t\t// find the footer\n\t\t\t\t$extras = c.$table\n\t\t\t\t\t.find( 'tfoot tr' )\n\t\t\t\t\t.children( 'td, th' )\n\t\t\t\t\t.add( $( c.namespace + '_extra_headers' ) )\n\t\t\t\t\t.removeClass( css.join( ' ' ) ),\n\t\t\t\t// remove all header information\n\t\t\t\t$sorted = c.$headers\n\t\t\t\t\t.add( $( 'thead ' + c.namespace + '_extra_headers' ) )\n\t\t\t\t\t.removeClass( css.join( ' ' ) )\n\t\t\t\t\t.addClass( none )\n\t\t\t\t\t.attr( 'aria-sort', 'none' )\n\t\t\t\t\t.find( '.' + ts.css.icon )\n\t\t\t\t\t.removeClass( cssIcon.join( ' ' ) )\n\t\t\t\t\t.end();\n\t\t\t// add css none to all sortable headers\n\t\t\t$sorted\n\t\t\t\t.not( '.sorter-false' )\n\t\t\t\t.find( '.' + ts.css.icon )\n\t\t\t\t.addClass( cssIcon[ 2 ] );\n\t\t\t// add disabled css icon class\n\t\t\tif ( c.cssIconDisabled ) {\n\t\t\t\t$sorted\n\t\t\t\t\t.filter( '.sorter-false' )\n\t\t\t\t\t.find( '.' + ts.css.icon )\n\t\t\t\t\t.addClass( c.cssIconDisabled );\n\t\t\t}\n\t\t\tfor ( indx = 0; indx < len; indx++ ) {\n\t\t\t\t// direction = 2 means reset!\n\t\t\t\tif ( list[ indx ][ 1 ] !== 2 ) {\n\t\t\t\t\t// multicolumn sorting updating - see #1005\n\t\t\t\t\t// .not(function() {}) needs jQuery 1.4\n\t\t\t\t\t// filter(function(i, el) {}) <- el is undefined in jQuery v1.2.6\n\t\t\t\t\t$sorted = c.$headers.filter( function( i ) {\n\t\t\t\t\t\t// only include headers that are in the sortList (this includes colspans)\n\t\t\t\t\t\tvar include = true,\n\t\t\t\t\t\t\t$el = c.$headers.eq( i ),\n\t\t\t\t\t\t\tcol = parseInt( $el.attr( 'data-column' ), 10 ),\n\t\t\t\t\t\t\tend = col + ts.getClosest( $el, 'th, td' )[0].colSpan;\n\t\t\t\t\t\tfor ( ; col < end; col++ ) {\n\t\t\t\t\t\t\tinclude = include ? include || ts.isValueInArray( col, c.sortList ) > -1 : false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn include;\n\t\t\t\t\t});\n\n\t\t\t\t\t// choose the :last in case there are nested columns\n\t\t\t\t\t$sorted = $sorted\n\t\t\t\t\t\t.not( '.sorter-false' )\n\t\t\t\t\t\t.filter( '[data-column=\"' + list[ indx ][ 0 ] + '\"]' + ( len === 1 ? ':last' : '' ) );\n\t\t\t\t\tif ( $sorted.length ) {\n\t\t\t\t\t\tfor ( column = 0; column < $sorted.length; column++ ) {\n\t\t\t\t\t\t\tif ( !$sorted[ column ].sortDisabled ) {\n\t\t\t\t\t\t\t\tupdateColumnSort( $sorted.eq( column ), list[ indx ][ 1 ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// add sorted class to footer & extra headers, if they exist\n\t\t\t\t\tif ( $extras.length ) {\n\t\t\t\t\t\tupdateColumnSort( $extras.filter( '[data-column=\"' + list[ indx ][ 0 ] + '\"]' ), list[ indx ][ 1 ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// add verbose aria labels\n\t\t\tlen = c.$headers.length;\n\t\t\tfor ( indx = 0; indx < len; indx++ ) {\n\t\t\t\tts.setColumnAriaLabel( c, c.$headers.eq( indx ) );\n\t\t\t}\n\t\t},\n\n\t\tgetClosest : function( $el, selector ) {\n\t\t\t// jQuery v1.2.6 doesn't have closest()\n\t\t\tif ( $.fn.closest ) {\n\t\t\t\treturn $el.closest( selector );\n\t\t\t}\n\t\t\treturn $el.is( selector ) ?\n\t\t\t\t$el :\n\t\t\t\t$el.parents( selector ).filter( ':first' );\n\t\t},\n\n\t\t// nextSort (optional), lets you disable next sort text\n\t\tsetColumnAriaLabel : function( c, $header, nextSort ) {\n\t\t\tif ( $header.length ) {\n\t\t\t\tvar column = parseInt( $header.attr( 'data-column' ), 10 ),\n\t\t\t\t\tvars = c.sortVars[ column ],\n\t\t\t\t\ttmp = $header.hasClass( ts.css.sortAsc ) ?\n\t\t\t\t\t\t'sortAsc' :\n\t\t\t\t\t\t$header.hasClass( ts.css.sortDesc ) ? 'sortDesc' : 'sortNone',\n\t\t\t\t\ttxt = $.trim( $header.text() ) + ': ' + ts.language[ tmp ];\n\t\t\t\tif ( $header.hasClass( 'sorter-false' ) || nextSort === false ) {\n\t\t\t\t\ttxt += ts.language.sortDisabled;\n\t\t\t\t} else {\n\t\t\t\t\ttmp = ( vars.count + 1 ) % vars.order.length;\n\t\t\t\t\tnextSort = vars.order[ tmp ];\n\t\t\t\t\t// if nextSort\n\t\t\t\t\ttxt += ts.language[ nextSort === 0 ? 'nextAsc' : nextSort === 1 ? 'nextDesc' : 'nextNone' ];\n\t\t\t\t}\n\t\t\t\t$header.attr( 'aria-label', txt );\n\t\t\t\tif (vars.sortedBy) {\n\t\t\t\t\t$header.attr( 'data-sortedBy', vars.sortedBy );\n\t\t\t\t} else {\n\t\t\t\t\t$header.removeAttr('data-sortedBy');\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tupdateHeader : function( c ) {\n\t\t\tvar index, isDisabled, $header, col,\n\t\t\t\ttable = c.table,\n\t\t\t\tlen = c.$headers.length;\n\t\t\tfor ( index = 0; index < len; index++ ) {\n\t\t\t\t$header = c.$headers.eq( index );\n\t\t\t\tcol = ts.getColumnData( table, c.headers, index, true );\n\t\t\t\t// add 'sorter-false' class if 'parser-false' is set\n\t\t\t\tisDisabled = ts.getData( $header, col, 'sorter' ) === 'false' || ts.getData( $header, col, 'parser' ) === 'false';\n\t\t\t\tts.setColumnSort( c, $header, isDisabled );\n\t\t\t}\n\t\t},\n\n\t\tsetColumnSort : function( c, $header, isDisabled ) {\n\t\t\tvar id = c.table.id;\n\t\t\t$header[ 0 ].sortDisabled = isDisabled;\n\t\t\t$header[ isDisabled ? 'addClass' : 'removeClass' ]( 'sorter-false' )\n\t\t\t\t.attr( 'aria-disabled', '' + isDisabled );\n\t\t\t// disable tab index on disabled cells\n\t\t\tif ( c.tabIndex ) {\n\t\t\t\tif ( isDisabled ) {\n\t\t\t\t\t$header.removeAttr( 'tabindex' );\n\t\t\t\t} else {\n\t\t\t\t\t$header.attr( 'tabindex', '0' );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// aria-controls - requires table ID\n\t\t\tif ( id ) {\n\t\t\t\tif ( isDisabled ) {\n\t\t\t\t\t$header.removeAttr( 'aria-controls' );\n\t\t\t\t} else {\n\t\t\t\t\t$header.attr( 'aria-controls', id );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tupdateHeaderSortCount : function( c, list ) {\n\t\t\tvar col, dir, group, indx, primary, temp, val, order,\n\t\t\t\tsortList = list || c.sortList,\n\t\t\t\tlen = sortList.length;\n\t\t\tc.sortList = [];\n\t\t\tfor ( indx = 0; indx < len; indx++ ) {\n\t\t\t\tval = sortList[ indx ];\n\t\t\t\t// ensure all sortList values are numeric - fixes #127\n\t\t\t\tcol = parseInt( val[ 0 ], 10 );\n\t\t\t\t// prevents error if sorton array is wrong\n\t\t\t\tif ( col < c.columns ) {\n\n\t\t\t\t\t// set order if not already defined - due to colspan header without associated header cell\n\t\t\t\t\t// adding this check prevents a javascript error\n\t\t\t\t\tif ( !c.sortVars[ col ].order ) {\n\t\t\t\t\t\tif ( ts.getOrder( c.sortInitialOrder ) ) {\n\t\t\t\t\t\t\torder = c.sortReset ? [ 1, 0, 2 ] : [ 1, 0 ];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\torder = c.sortReset ? [ 0, 1, 2 ] : [ 0, 1 ];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tc.sortVars[ col ].order = order;\n\t\t\t\t\t\tc.sortVars[ col ].count = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\torder = c.sortVars[ col ].order;\n\t\t\t\t\tdir = ( '' + val[ 1 ] ).match( /^(1|d|s|o|n)/ );\n\t\t\t\t\tdir = dir ? dir[ 0 ] : '';\n\t\t\t\t\t// 0/(a)sc (default), 1/(d)esc, (s)ame, (o)pposite, (n)ext\n\t\t\t\t\tswitch ( dir ) {\n\t\t\t\t\t\tcase '1' : case 'd' : // descending\n\t\t\t\t\t\t\tdir = 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 's' : // same direction (as primary column)\n\t\t\t\t\t\t\t// if primary sort is set to 's', make it ascending\n\t\t\t\t\t\t\tdir = primary || 0;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'o' :\n\t\t\t\t\t\t\ttemp = order[ ( primary || 0 ) % order.length ];\n\t\t\t\t\t\t\t// opposite of primary column; but resets if primary resets\n\t\t\t\t\t\t\tdir = temp === 0 ? 1 : temp === 1 ? 0 : 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'n' :\n\t\t\t\t\t\t\tdir = order[ ( ++c.sortVars[ col ].count ) % order.length ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault : // ascending\n\t\t\t\t\t\t\tdir = 0;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tprimary = indx === 0 ? dir : primary;\n\t\t\t\t\tgroup = [ col, parseInt( dir, 10 ) || 0 ];\n\t\t\t\t\tc.sortList[ c.sortList.length ] = group;\n\t\t\t\t\tdir = $.inArray( group[ 1 ], order ); // fixes issue #167\n\t\t\t\t\tc.sortVars[ col ].count = dir >= 0 ? dir : group[ 1 ] % order.length;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tupdateAll : function( c, resort, callback ) {\n\t\t\tvar table = c.table;\n\t\t\ttable.isUpdating = true;\n\t\t\tts.refreshWidgets( table, true, true );\n\t\t\tts.buildHeaders( c );\n\t\t\tts.bindEvents( table, c.$headers, true );\n\t\t\tts.bindMethods( c );\n\t\t\tts.commonUpdate( c, resort, callback );\n\t\t},\n\n\t\tupdate : function( c, resort, callback ) {\n\t\t\tvar table = c.table;\n\t\t\ttable.isUpdating = true;\n\t\t\t// update sorting (if enabled/disabled)\n\t\t\tts.updateHeader( c );\n\t\t\tts.commonUpdate( c, resort, callback );\n\t\t},\n\n\t\t// simple header update - see #989\n\t\tupdateHeaders : function( c, callback ) {\n\t\t\tc.table.isUpdating = true;\n\t\t\tts.buildHeaders( c );\n\t\t\tts.bindEvents( c.table, c.$headers, true );\n\t\t\tts.resortComplete( c, callback );\n\t\t},\n\n\t\tupdateCell : function( c, cell, resort, callback ) {\n\t\t\t// updateCell for child rows is a mess - we'll ignore them for now\n\t\t\t// eventually I'll break out the \"update\" row cache code to make everything consistent\n\t\t\tif ( $( cell ).closest( 'tr' ).hasClass( c.cssChildRow ) ) {\n\t\t\t\tconsole.warn('Tablesorter Warning! \"updateCell\" for child row content has been disabled, use \"update\" instead');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( ts.isEmptyObject( c.cache ) ) {\n\t\t\t\t// empty table, do an update instead - fixes #1099\n\t\t\t\tts.updateHeader( c );\n\t\t\t\tts.commonUpdate( c, resort, callback );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tc.table.isUpdating = true;\n\t\t\tc.$table.find( c.selectorRemove ).remove();\n\t\t\t// get position from the dom\n\t\t\tvar tmp, indx, row, icell, cache, len,\n\t\t\t\t$tbodies = c.$tbodies,\n\t\t\t\t$cell = $( cell ),\n\t\t\t\t// update cache - format: function( s, table, cell, cellIndex )\n\t\t\t\t// no closest in jQuery v1.2.6\n\t\t\t\ttbodyIndex = $tbodies.index( ts.getClosest( $cell, 'tbody' ) ),\n\t\t\t\ttbcache = c.cache[ tbodyIndex ],\n\t\t\t\t$row = ts.getClosest( $cell, 'tr' );\n\t\t\tcell = $cell[ 0 ]; // in case cell is a jQuery object\n\t\t\t// tbody may not exist if update is initialized while tbody is removed for processing\n\t\t\tif ( $tbodies.length && tbodyIndex >= 0 ) {\n\t\t\t\trow = $tbodies.eq( tbodyIndex ).find( 'tr' ).not( '.' + c.cssChildRow ).index( $row );\n\t\t\t\tcache = tbcache.normalized[ row ];\n\t\t\t\tlen = $row[ 0 ].cells.length;\n\t\t\t\tif ( len !== c.columns ) {\n\t\t\t\t\t// colspan in here somewhere!\n\t\t\t\t\ticell = 0;\n\t\t\t\t\ttmp = false;\n\t\t\t\t\tfor ( indx = 0; indx < len; indx++ ) {\n\t\t\t\t\t\tif ( !tmp && $row[ 0 ].cells[ indx ] !== cell ) {\n\t\t\t\t\t\t\ticell += $row[ 0 ].cells[ indx ].colSpan;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttmp = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ticell = $cell.index();\n\t\t\t\t}\n\t\t\t\ttmp = ts.getElementText( c, cell, icell ); // raw\n\t\t\t\tcache[ c.columns ].raw[ icell ] = tmp;\n\t\t\t\ttmp = ts.getParsedText( c, cell, icell, tmp );\n\t\t\t\tcache[ icell ] = tmp; // parsed\n\t\t\t\tif ( ( c.parsers[ icell ].type || '' ).toLowerCase() === 'numeric' ) {\n\t\t\t\t\t// update column max value (ignore sign)\n\t\t\t\t\ttbcache.colMax[ icell ] = Math.max( Math.abs( tmp ) || 0, tbcache.colMax[ icell ] || 0 );\n\t\t\t\t}\n\t\t\t\ttmp = resort !== 'undefined' ? resort : c.resort;\n\t\t\t\tif ( tmp !== false ) {\n\t\t\t\t\t// widgets will be reapplied\n\t\t\t\t\tts.checkResort( c, tmp, callback );\n\t\t\t\t} else {\n\t\t\t\t\t// don't reapply widgets is resort is false, just in case it causes\n\t\t\t\t\t// problems with element focus\n\t\t\t\t\tts.resortComplete( c, callback );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( ts.debug(c, 'core') ) {\n\t\t\t\t\tconsole.error( 'updateCell aborted, tbody missing or not within the indicated table' );\n\t\t\t\t}\n\t\t\t\tc.table.isUpdating = false;\n\t\t\t}\n\t\t},\n\n\t\taddRows : function( c, $row, resort, callback ) {\n\t\t\tvar txt, val, tbodyIndex, rowIndex, rows, cellIndex, len, order,\n\t\t\t\tcacheIndex, rowData, cells, cell, span,\n\t\t\t\t// allow passing a row string if only one non-info tbody exists in the table\n\t\t\t\tvalid = typeof $row === 'string' && c.$tbodies.length === 1 && /<tr/.test( $row || '' ),\n\t\t\t\ttable = c.table;\n\t\t\tif ( valid ) {\n\t\t\t\t$row = $( $row );\n\t\t\t\tc.$tbodies.append( $row );\n\t\t\t} else if (\n\t\t\t\t!$row ||\n\t\t\t\t// row is a jQuery object?\n\t\t\t\t!( $row instanceof $ ) ||\n\t\t\t\t// row contained in the table?\n\t\t\t\t( ts.getClosest( $row, 'table' )[ 0 ] !== c.table )\n\t\t\t) {\n\t\t\t\tif ( ts.debug(c, 'core') ) {\n\t\t\t\t\tconsole.error( 'addRows method requires (1) a jQuery selector reference to rows that have already ' +\n\t\t\t\t\t\t'been added to the table, or (2) row HTML string to be added to a table with only one tbody' );\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ttable.isUpdating = true;\n\t\t\tif ( ts.isEmptyObject( c.cache ) ) {\n\t\t\t\t// empty table, do an update instead - fixes #450\n\t\t\t\tts.updateHeader( c );\n\t\t\t\tts.commonUpdate( c, resort, callback );\n\t\t\t} else {\n\t\t\t\trows = $row.filter( 'tr' ).attr( 'role', 'row' ).length;\n\t\t\t\ttbodyIndex = c.$tbodies.index( $row.parents( 'tbody' ).filter( ':first' ) );\n\t\t\t\t// fixes adding rows to an empty table - see issue #179\n\t\t\t\tif ( !( c.parsers && c.parsers.length ) ) {\n\t\t\t\t\tts.setupParsers( c );\n\t\t\t\t}\n\t\t\t\t// add each row\n\t\t\t\tfor ( rowIndex = 0; rowIndex < rows; rowIndex++ ) {\n\t\t\t\t\tcacheIndex = 0;\n\t\t\t\t\tlen = $row[ rowIndex ].cells.length;\n\t\t\t\t\torder = c.cache[ tbodyIndex ].normalized.length;\n\t\t\t\t\tcells = [];\n\t\t\t\t\trowData = {\n\t\t\t\t\t\tchild : [],\n\t\t\t\t\t\traw : [],\n\t\t\t\t\t\t$row : $row.eq( rowIndex ),\n\t\t\t\t\t\torder : order\n\t\t\t\t\t};\n\t\t\t\t\t// add each cell\n\t\t\t\t\tfor ( cellIndex = 0; cellIndex < len; cellIndex++ ) {\n\t\t\t\t\t\tcell = $row[ rowIndex ].cells[ cellIndex ];\n\t\t\t\t\t\ttxt = ts.getElementText( c, cell, cacheIndex );\n\t\t\t\t\t\trowData.raw[ cacheIndex ] = txt;\n\t\t\t\t\t\tval = ts.getParsedText( c, cell, cacheIndex, txt );\n\t\t\t\t\t\tcells[ cacheIndex ] = val;\n\t\t\t\t\t\tif ( ( c.parsers[ cacheIndex ].type || '' ).toLowerCase() === 'numeric' ) {\n\t\t\t\t\t\t\t// update column max value (ignore sign)\n\t\t\t\t\t\t\tc.cache[ tbodyIndex ].colMax[ cacheIndex ] =\n\t\t\t\t\t\t\t\tMath.max( Math.abs( val ) || 0, c.cache[ tbodyIndex ].colMax[ cacheIndex ] || 0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tspan = cell.colSpan - 1;\n\t\t\t\t\t\tif ( span > 0 ) {\n\t\t\t\t\t\t\tcacheIndex += span;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcacheIndex++;\n\t\t\t\t\t}\n\t\t\t\t\t// add the row data to the end\n\t\t\t\t\tcells[ c.columns ] = rowData;\n\t\t\t\t\t// update cache\n\t\t\t\t\tc.cache[ tbodyIndex ].normalized[ order ] = cells;\n\t\t\t\t}\n\t\t\t\t// resort using current settings\n\t\t\t\tts.checkResort( c, resort, callback );\n\t\t\t}\n\t\t},\n\n\t\tupdateCache : function( c, callback, $tbodies ) {\n\t\t\t// rebuild parsers\n\t\t\tif ( !( c.parsers && c.parsers.length ) ) {\n\t\t\t\tts.setupParsers( c, $tbodies );\n\t\t\t}\n\t\t\t// rebuild the cache map\n\t\t\tts.buildCache( c, callback, $tbodies );\n\t\t},\n\n\t\t// init flag (true) used by pager plugin to prevent widget application\n\t\t// renamed from appendToTable\n\t\tappendCache : function( c, init ) {\n\t\t\tvar parsed, totalRows, $tbody, $curTbody, rowIndex, tbodyIndex, appendTime,\n\t\t\t\ttable = c.table,\n\t\t\t\t$tbodies = c.$tbodies,\n\t\t\t\trows = [],\n\t\t\t\tcache = c.cache;\n\t\t\t// empty table - fixes #206/#346\n\t\t\tif ( ts.isEmptyObject( cache ) ) {\n\t\t\t\t// run pager appender in case the table was just emptied\n\t\t\t\treturn c.appender ? c.appender( table, rows ) :\n\t\t\t\t\ttable.isUpdating ? c.$table.triggerHandler( 'updateComplete', table ) : ''; // Fixes #532\n\t\t\t}\n\t\t\tif ( ts.debug(c, 'core') ) {\n\t\t\t\tappendTime = new Date();\n\t\t\t}\n\t\t\tfor ( tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++ ) {\n\t\t\t\t$tbody = $tbodies.eq( tbodyIndex );\n\t\t\t\tif ( $tbody.length ) {\n\t\t\t\t\t// detach tbody for manipulation\n\t\t\t\t\t$curTbody = ts.processTbody( table, $tbody, true );\n\t\t\t\t\tparsed = cache[ tbodyIndex ].normalized;\n\t\t\t\t\ttotalRows = parsed.length;\n\t\t\t\t\tfor ( rowIndex = 0; rowIndex < totalRows; rowIndex++ ) {\n\t\t\t\t\t\trows[rows.length] = parsed[ rowIndex ][ c.columns ].$row;\n\t\t\t\t\t\t// removeRows used by the pager plugin; don't render if using ajax - fixes #411\n\t\t\t\t\t\tif ( !c.appender || ( c.pager && !c.pager.removeRows && !c.pager.ajax ) ) {\n\t\t\t\t\t\t\t$curTbody.append( parsed[ rowIndex ][ c.columns ].$row );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// restore tbody\n\t\t\t\t\tts.processTbody( table, $curTbody, false );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( c.appender ) {\n\t\t\t\tc.appender( table, rows );\n\t\t\t}\n\t\t\tif ( ts.debug(c, 'core') ) {\n\t\t\t\tconsole.log( 'Rebuilt table' + ts.benchmark( appendTime ) );\n\t\t\t}\n\t\t\t// apply table widgets; but not before ajax completes\n\t\t\tif ( !init && !c.appender ) {\n\t\t\t\tts.applyWidget( table );\n\t\t\t}\n\t\t\tif ( table.isUpdating ) {\n\t\t\t\tc.$table.triggerHandler( 'updateComplete', table );\n\t\t\t}\n\t\t},\n\n\t\tcommonUpdate : function( c, resort, callback ) {\n\t\t\t// remove rows/elements before update\n\t\t\tc.$table.find( c.selectorRemove ).remove();\n\t\t\t// rebuild parsers\n\t\t\tts.setupParsers( c );\n\t\t\t// rebuild the cache map\n\t\t\tts.buildCache( c );\n\t\t\tts.checkResort( c, resort, callback );\n\t\t},\n\n\t\t/*\n\t\t▄█████ ▄████▄ █████▄ ██████ ██ █████▄ ▄████▄\n\t\t▀█▄    ██  ██ ██▄▄██   ██   ██ ██  ██ ██ ▄▄▄\n\t\t   ▀█▄ ██  ██ ██▀██    ██   ██ ██  ██ ██ ▀██\n\t\t█████▀ ▀████▀ ██  ██   ██   ██ ██  ██ ▀████▀\n\t\t*/\n\t\tinitSort : function( c, cell, event ) {\n\t\t\tif ( c.table.isUpdating ) {\n\t\t\t\t// let any updates complete before initializing a sort\n\t\t\t\treturn setTimeout( function() {\n\t\t\t\t\tts.initSort( c, cell, event );\n\t\t\t\t}, 50 );\n\t\t\t}\n\n\t\t\tvar arry, indx, headerIndx, dir, temp, tmp, $header,\n\t\t\t\tnotMultiSort = !event[ c.sortMultiSortKey ],\n\t\t\t\ttable = c.table,\n\t\t\t\tlen = c.$headers.length,\n\t\t\t\tth = ts.getClosest( $( cell ), 'th, td' ),\n\t\t\t\tcol = parseInt( th.attr( 'data-column' ), 10 ),\n\t\t\t\tsortedBy = event.type === 'mouseup' ? 'user' : event.type,\n\t\t\t\torder = c.sortVars[ col ].order;\n\t\t\tth = th[0];\n\t\t\t// Only call sortStart if sorting is enabled\n\t\t\tc.$table.triggerHandler( 'sortStart', table );\n\t\t\t// get current column sort order\n\t\t\ttmp = ( c.sortVars[ col ].count + 1 ) % order.length;\n\t\t\tc.sortVars[ col ].count = event[ c.sortResetKey ] ? 2 : tmp;\n\t\t\t// reset all sorts on non-current column - issue #30\n\t\t\tif ( c.sortRestart ) {\n\t\t\t\tfor ( headerIndx = 0; headerIndx < len; headerIndx++ ) {\n\t\t\t\t\t$header = c.$headers.eq( headerIndx );\n\t\t\t\t\ttmp = parseInt( $header.attr( 'data-column' ), 10 );\n\t\t\t\t\t// only reset counts on columns that weren't just clicked on and if not included in a multisort\n\t\t\t\t\tif ( col !== tmp && ( notMultiSort || $header.hasClass( ts.css.sortNone ) ) ) {\n\t\t\t\t\t\tc.sortVars[ tmp ].count = -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// user only wants to sort on one column\n\t\t\tif ( notMultiSort ) {\n\t\t\t\t$.each( c.sortVars, function( i ) {\n\t\t\t\t\tc.sortVars[ i ].sortedBy = '';\n\t\t\t\t});\n\t\t\t\t// flush the sort list\n\t\t\t\tc.sortList = [];\n\t\t\t\tc.last.sortList = [];\n\t\t\t\tif ( c.sortForce !== null ) {\n\t\t\t\t\tarry = c.sortForce;\n\t\t\t\t\tfor ( indx = 0; indx < arry.length; indx++ ) {\n\t\t\t\t\t\tif ( arry[ indx ][ 0 ] !== col ) {\n\t\t\t\t\t\t\tc.sortList[ c.sortList.length ] = arry[ indx ];\n\t\t\t\t\t\t\tc.sortVars[ arry[ indx ][ 0 ] ].sortedBy = 'sortForce';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// add column to sort list\n\t\t\t\tdir = order[ c.sortVars[ col ].count ];\n\t\t\t\tif ( dir < 2 ) {\n\t\t\t\t\tc.sortList[ c.sortList.length ] = [ col, dir ];\n\t\t\t\t\tc.sortVars[ col ].sortedBy = sortedBy;\n\t\t\t\t\t// add other columns if header spans across multiple\n\t\t\t\t\tif ( th.colSpan > 1 ) {\n\t\t\t\t\t\tfor ( indx = 1; indx < th.colSpan; indx++ ) {\n\t\t\t\t\t\t\tc.sortList[ c.sortList.length ] = [ col + indx, dir ];\n\t\t\t\t\t\t\t// update count on columns in colSpan\n\t\t\t\t\t\t\tc.sortVars[ col + indx ].count = $.inArray( dir, order );\n\t\t\t\t\t\t\tc.sortVars[ col + indx ].sortedBy = sortedBy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// multi column sorting\n\t\t\t} else {\n\t\t\t\t// get rid of the sortAppend before adding more - fixes issue #115 & #523\n\t\t\t\tc.sortList = $.extend( [], c.last.sortList );\n\n\t\t\t\t// the user has clicked on an already sorted column\n\t\t\t\tif ( ts.isValueInArray( col, c.sortList ) >= 0 ) {\n\t\t\t\t\t// reverse the sorting direction\n\t\t\t\t\tc.sortVars[ col ].sortedBy = sortedBy;\n\t\t\t\t\tfor ( indx = 0; indx < c.sortList.length; indx++ ) {\n\t\t\t\t\t\ttmp = c.sortList[ indx ];\n\t\t\t\t\t\tif ( tmp[ 0 ] === col ) {\n\t\t\t\t\t\t\t// order.count seems to be incorrect when compared to cell.count\n\t\t\t\t\t\t\ttmp[ 1 ] = order[ c.sortVars[ col ].count ];\n\t\t\t\t\t\t\tif ( tmp[1] === 2 ) {\n\t\t\t\t\t\t\t\tc.sortList.splice( indx, 1 );\n\t\t\t\t\t\t\t\tc.sortVars[ col ].count = -1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// add column to sort list array\n\t\t\t\t\tdir = order[ c.sortVars[ col ].count ];\n\t\t\t\t\tc.sortVars[ col ].sortedBy = sortedBy;\n\t\t\t\t\tif ( dir < 2 ) {\n\t\t\t\t\t\tc.sortList[ c.sortList.length ] = [ col, dir ];\n\t\t\t\t\t\t// add other columns if header spans across multiple\n\t\t\t\t\t\tif ( th.colSpan > 1 ) {\n\t\t\t\t\t\t\tfor ( indx = 1; indx < th.colSpan; indx++ ) {\n\t\t\t\t\t\t\t\tc.sortList[ c.sortList.length ] = [ col + indx, dir ];\n\t\t\t\t\t\t\t\t// update count on columns in colSpan\n\t\t\t\t\t\t\t\tc.sortVars[ col + indx ].count = $.inArray( dir, order );\n\t\t\t\t\t\t\t\tc.sortVars[ col + indx ].sortedBy = sortedBy;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// save sort before applying sortAppend\n\t\t\tc.last.sortList = $.extend( [], c.sortList );\n\t\t\tif ( c.sortList.length && c.sortAppend ) {\n\t\t\t\tarry = $.isArray( c.sortAppend ) ? c.sortAppend : c.sortAppend[ c.sortList[ 0 ][ 0 ] ];\n\t\t\t\tif ( !ts.isEmptyObject( arry ) ) {\n\t\t\t\t\tfor ( indx = 0; indx < arry.length; indx++ ) {\n\t\t\t\t\t\tif ( arry[ indx ][ 0 ] !== col && ts.isValueInArray( arry[ indx ][ 0 ], c.sortList ) < 0 ) {\n\t\t\t\t\t\t\tdir = arry[ indx ][ 1 ];\n\t\t\t\t\t\t\ttemp = ( '' + dir ).match( /^(a|d|s|o|n)/ );\n\t\t\t\t\t\t\tif ( temp ) {\n\t\t\t\t\t\t\t\ttmp = c.sortList[ 0 ][ 1 ];\n\t\t\t\t\t\t\t\tswitch ( temp[ 0 ] ) {\n\t\t\t\t\t\t\t\t\tcase 'd' :\n\t\t\t\t\t\t\t\t\t\tdir = 1;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 's' :\n\t\t\t\t\t\t\t\t\t\tdir = tmp;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 'o' :\n\t\t\t\t\t\t\t\t\t\tdir = tmp === 0 ? 1 : 0;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 'n' :\n\t\t\t\t\t\t\t\t\t\tdir = ( tmp + 1 ) % order.length;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\tdir = 0;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tc.sortList[ c.sortList.length ] = [ arry[ indx ][ 0 ], dir ];\n\t\t\t\t\t\t\tc.sortVars[ arry[ indx ][ 0 ] ].sortedBy = 'sortAppend';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// sortBegin event triggered immediately before the sort\n\t\t\tc.$table.triggerHandler( 'sortBegin', table );\n\t\t\t// setTimeout needed so the processing icon shows up\n\t\t\tsetTimeout( function() {\n\t\t\t\t// set css for headers\n\t\t\t\tts.setHeadersCss( c );\n\t\t\t\tts.multisort( c );\n\t\t\t\tts.appendCache( c );\n\t\t\t\tc.$table.triggerHandler( 'sortBeforeEnd', table );\n\t\t\t\tc.$table.triggerHandler( 'sortEnd', table );\n\t\t\t}, 1 );\n\t\t},\n\n\t\t// sort multiple columns\n\t\tmultisort : function( c ) { /*jshint loopfunc:true */\n\t\t\tvar tbodyIndex, sortTime, colMax, rows, tmp,\n\t\t\t\ttable = c.table,\n\t\t\t\tsorter = [],\n\t\t\t\tdir = 0,\n\t\t\t\ttextSorter = c.textSorter || '',\n\t\t\t\tsortList = c.sortList,\n\t\t\t\tsortLen = sortList.length,\n\t\t\t\tlen = c.$tbodies.length;\n\t\t\tif ( c.serverSideSorting || ts.isEmptyObject( c.cache ) ) {\n\t\t\t\t// empty table - fixes #206/#346\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( ts.debug(c, 'core') ) { sortTime = new Date(); }\n\t\t\t// cache textSorter to optimize speed\n\t\t\tif ( typeof textSorter === 'object' ) {\n\t\t\t\tcolMax = c.columns;\n\t\t\t\twhile ( colMax-- ) {\n\t\t\t\t\ttmp = ts.getColumnData( table, textSorter, colMax );\n\t\t\t\t\tif ( typeof tmp === 'function' ) {\n\t\t\t\t\t\tsorter[ colMax ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor ( tbodyIndex = 0; tbodyIndex < len; tbodyIndex++ ) {\n\t\t\t\tcolMax = c.cache[ tbodyIndex ].colMax;\n\t\t\t\trows = c.cache[ tbodyIndex ].normalized;\n\n\t\t\t\trows.sort( function( a, b ) {\n\t\t\t\t\tvar sortIndex, num, col, order, sort, x, y;\n\t\t\t\t\t// rows is undefined here in IE, so don't use it!\n\t\t\t\t\tfor ( sortIndex = 0; sortIndex < sortLen; sortIndex++ ) {\n\t\t\t\t\t\tcol = sortList[ sortIndex ][ 0 ];\n\t\t\t\t\t\torder = sortList[ sortIndex ][ 1 ];\n\t\t\t\t\t\t// sort direction, true = asc, false = desc\n\t\t\t\t\t\tdir = order === 0;\n\n\t\t\t\t\t\tif ( c.sortStable && a[ col ] === b[ col ] && sortLen === 1 ) {\n\t\t\t\t\t\t\treturn a[ c.columns ].order - b[ c.columns ].order;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// fallback to natural sort since it is more robust\n\t\t\t\t\t\tnum = /n/i.test( ts.getSortType( c.parsers, col ) );\n\t\t\t\t\t\tif ( num && c.strings[ col ] ) {\n\t\t\t\t\t\t\t// sort strings in numerical columns\n\t\t\t\t\t\t\tif ( typeof ( ts.string[ c.strings[ col ] ] ) === 'boolean' ) {\n\t\t\t\t\t\t\t\tnum = ( dir ? 1 : -1 ) * ( ts.string[ c.strings[ col ] ] ? -1 : 1 );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnum = ( c.strings[ col ] ) ? ts.string[ c.strings[ col ] ] || 0 : 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// fall back to built-in numeric sort\n\t\t\t\t\t\t\t// var sort = $.tablesorter['sort' + s]( a[col], b[col], dir, colMax[col], table );\n\t\t\t\t\t\t\tsort = c.numberSorter ? c.numberSorter( a[ col ], b[ col ], dir, colMax[ col ], table ) :\n\t\t\t\t\t\t\t\tts[ 'sortNumeric' + ( dir ? 'Asc' : 'Desc' ) ]( a[ col ], b[ col ], num, colMax[ col ], col, c );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// set a & b depending on sort direction\n\t\t\t\t\t\t\tx = dir ? a : b;\n\t\t\t\t\t\t\ty = dir ? b : a;\n\t\t\t\t\t\t\t// text sort function\n\t\t\t\t\t\t\tif ( typeof textSorter === 'function' ) {\n\t\t\t\t\t\t\t\t// custom OVERALL text sorter\n\t\t\t\t\t\t\t\tsort = textSorter( x[ col ], y[ col ], dir, col, table );\n\t\t\t\t\t\t\t} else if ( typeof sorter[ col ] === 'function' ) {\n\t\t\t\t\t\t\t\t// custom text sorter for a SPECIFIC COLUMN\n\t\t\t\t\t\t\t\tsort = sorter[ col ]( x[ col ], y[ col ], dir, col, table );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// fall back to natural sort\n\t\t\t\t\t\t\t\tsort = ts[ 'sortNatural' + ( dir ? 'Asc' : 'Desc' ) ]( a[ col ] || '', b[ col ] || '', col, c );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( sort ) { return sort; }\n\t\t\t\t\t}\n\t\t\t\t\treturn a[ c.columns ].order - b[ c.columns ].order;\n\t\t\t\t});\n\t\t\t}\n\t\t\tif ( ts.debug(c, 'core') ) {\n\t\t\t\tconsole.log( 'Applying sort ' + sortList.toString() + ts.benchmark( sortTime ) );\n\t\t\t}\n\t\t},\n\n\t\tresortComplete : function( c, callback ) {\n\t\t\tif ( c.table.isUpdating ) {\n\t\t\t\tc.$table.triggerHandler( 'updateComplete', c.table );\n\t\t\t}\n\t\t\tif ( $.isFunction( callback ) ) {\n\t\t\t\tcallback( c.table );\n\t\t\t}\n\t\t},\n\n\t\tcheckResort : function( c, resort, callback ) {\n\t\t\tvar sortList = $.isArray( resort ) ? resort : c.sortList,\n\t\t\t\t// if no resort parameter is passed, fallback to config.resort (true by default)\n\t\t\t\tresrt = typeof resort === 'undefined' ? c.resort : resort;\n\t\t\t// don't try to resort if the table is still processing\n\t\t\t// this will catch spamming of the updateCell method\n\t\t\tif ( resrt !== false && !c.serverSideSorting && !c.table.isProcessing ) {\n\t\t\t\tif ( sortList.length ) {\n\t\t\t\t\tts.sortOn( c, sortList, function() {\n\t\t\t\t\t\tts.resortComplete( c, callback );\n\t\t\t\t\t}, true );\n\t\t\t\t} else {\n\t\t\t\t\tts.sortReset( c, function() {\n\t\t\t\t\t\tts.resortComplete( c, callback );\n\t\t\t\t\t\tts.applyWidget( c.table, false );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tts.resortComplete( c, callback );\n\t\t\t\tts.applyWidget( c.table, false );\n\t\t\t}\n\t\t},\n\n\t\tsortOn : function( c, list, callback, init ) {\n\t\t\tvar indx,\n\t\t\t\ttable = c.table;\n\t\t\tc.$table.triggerHandler( 'sortStart', table );\n\t\t\tfor (indx = 0; indx < c.columns; indx++) {\n\t\t\t\tc.sortVars[ indx ].sortedBy = ts.isValueInArray( indx, list ) > -1 ? 'sorton' : '';\n\t\t\t}\n\t\t\t// update header count index\n\t\t\tts.updateHeaderSortCount( c, list );\n\t\t\t// set css for headers\n\t\t\tts.setHeadersCss( c );\n\t\t\t// fixes #346\n\t\t\tif ( c.delayInit && ts.isEmptyObject( c.cache ) ) {\n\t\t\t\tts.buildCache( c );\n\t\t\t}\n\t\t\tc.$table.triggerHandler( 'sortBegin', table );\n\t\t\t// sort the table and append it to the dom\n\t\t\tts.multisort( c );\n\t\t\tts.appendCache( c, init );\n\t\t\tc.$table.triggerHandler( 'sortBeforeEnd', table );\n\t\t\tc.$table.triggerHandler( 'sortEnd', table );\n\t\t\tts.applyWidget( table );\n\t\t\tif ( $.isFunction( callback ) ) {\n\t\t\t\tcallback( table );\n\t\t\t}\n\t\t},\n\n\t\tsortReset : function( c, callback ) {\n\t\t\tc.sortList = [];\n\t\t\tvar indx;\n\t\t\tfor (indx = 0; indx < c.columns; indx++) {\n\t\t\t\tc.sortVars[ indx ].count = -1;\n\t\t\t\tc.sortVars[ indx ].sortedBy = '';\n\t\t\t}\n\t\t\tts.setHeadersCss( c );\n\t\t\tts.multisort( c );\n\t\t\tts.appendCache( c );\n\t\t\tif ( $.isFunction( callback ) ) {\n\t\t\t\tcallback( c.table );\n\t\t\t}\n\t\t},\n\n\t\tgetSortType : function( parsers, column ) {\n\t\t\treturn ( parsers && parsers[ column ] ) ? parsers[ column ].type || '' : '';\n\t\t},\n\n\t\tgetOrder : function( val ) {\n\t\t\t// look for 'd' in 'desc' order; return true\n\t\t\treturn ( /^d/i.test( val ) || val === 1 );\n\t\t},\n\n\t\t// Natural sort - https://github.com/overset/javascript-natural-sort (date sorting removed)\n\t\tsortNatural : function( a, b ) {\n\t\t\tif ( a === b ) { return 0; }\n\t\t\ta = ( a || '' ).toString();\n\t\t\tb = ( b || '' ).toString();\n\t\t\tvar aNum, bNum, aFloat, bFloat, indx, max,\n\t\t\t\tregex = ts.regex;\n\t\t\t// first try and sort Hex codes\n\t\t\tif ( regex.hex.test( b ) ) {\n\t\t\t\taNum = parseInt( a.match( regex.hex ), 16 );\n\t\t\t\tbNum = parseInt( b.match( regex.hex ), 16 );\n\t\t\t\tif ( aNum < bNum ) { return -1; }\n\t\t\t\tif ( aNum > bNum ) { return 1; }\n\t\t\t}\n\t\t\t// chunk/tokenize\n\t\t\taNum = a.replace( regex.chunk, '\\\\0$1\\\\0' ).replace( regex.chunks, '' ).split( '\\\\0' );\n\t\t\tbNum = b.replace( regex.chunk, '\\\\0$1\\\\0' ).replace( regex.chunks, '' ).split( '\\\\0' );\n\t\t\tmax = Math.max( aNum.length, bNum.length );\n\t\t\t// natural sorting through split numeric strings and default strings\n\t\t\tfor ( indx = 0; indx < max; indx++ ) {\n\t\t\t\t// find floats not starting with '0', string or 0 if not defined\n\t\t\t\taFloat = isNaN( aNum[ indx ] ) ? aNum[ indx ] || 0 : parseFloat( aNum[ indx ] ) || 0;\n\t\t\t\tbFloat = isNaN( bNum[ indx ] ) ? bNum[ indx ] || 0 : parseFloat( bNum[ indx ] ) || 0;\n\t\t\t\t// handle numeric vs string comparison - number < string - (Kyle Adams)\n\t\t\t\tif ( isNaN( aFloat ) !== isNaN( bFloat ) ) { return isNaN( aFloat ) ? 1 : -1; }\n\t\t\t\t// rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'\n\t\t\t\tif ( typeof aFloat !== typeof bFloat ) {\n\t\t\t\t\taFloat += '';\n\t\t\t\t\tbFloat += '';\n\t\t\t\t}\n\t\t\t\tif ( aFloat < bFloat ) { return -1; }\n\t\t\t\tif ( aFloat > bFloat ) { return 1; }\n\t\t\t}\n\t\t\treturn 0;\n\t\t},\n\n\t\tsortNaturalAsc : function( a, b, col, c ) {\n\t\t\tif ( a === b ) { return 0; }\n\t\t\tvar empty = ts.string[ ( c.empties[ col ] || c.emptyTo ) ];\n\t\t\tif ( a === '' && empty !== 0 ) { return typeof empty === 'boolean' ? ( empty ? -1 : 1 ) : -empty || -1; }\n\t\t\tif ( b === '' && empty !== 0 ) { return typeof empty === 'boolean' ? ( empty ? 1 : -1 ) : empty || 1; }\n\t\t\treturn ts.sortNatural( a, b );\n\t\t},\n\n\t\tsortNaturalDesc : function( a, b, col, c ) {\n\t\t\tif ( a === b ) { return 0; }\n\t\t\tvar empty = ts.string[ ( c.empties[ col ] || c.emptyTo ) ];\n\t\t\tif ( a === '' && empty !== 0 ) { return typeof empty === 'boolean' ? ( empty ? -1 : 1 ) : empty || 1; }\n\t\t\tif ( b === '' && empty !== 0 ) { return typeof empty === 'boolean' ? ( empty ? 1 : -1 ) : -empty || -1; }\n\t\t\treturn ts.sortNatural( b, a );\n\t\t},\n\n\t\t// basic alphabetical sort\n\t\tsortText : function( a, b ) {\n\t\t\treturn a > b ? 1 : ( a < b ? -1 : 0 );\n\t\t},\n\n\t\t// return text string value by adding up ascii value\n\t\t// so the text is somewhat sorted when using a digital sort\n\t\t// this is NOT an alphanumeric sort\n\t\tgetTextValue : function( val, num, max ) {\n\t\t\tif ( max ) {\n\t\t\t\t// make sure the text value is greater than the max numerical value (max)\n\t\t\t\tvar indx,\n\t\t\t\t\tlen = val ? val.length : 0,\n\t\t\t\t\tn = max + num;\n\t\t\t\tfor ( indx = 0; indx < len; indx++ ) {\n\t\t\t\t\tn += val.charCodeAt( indx );\n\t\t\t\t}\n\t\t\t\treturn num * n;\n\t\t\t}\n\t\t\treturn 0;\n\t\t},\n\n\t\tsortNumericAsc : function( a, b, num, max, col, c ) {\n\t\t\tif ( a === b ) { return 0; }\n\t\t\tvar empty = ts.string[ ( c.empties[ col ] || c.emptyTo ) ];\n\t\t\tif ( a === '' && empty !== 0 ) { return typeof empty === 'boolean' ? ( empty ? -1 : 1 ) : -empty || -1; }\n\t\t\tif ( b === '' && empty !== 0 ) { return typeof empty === 'boolean' ? ( empty ? 1 : -1 ) : empty || 1; }\n\t\t\tif ( isNaN( a ) ) { a = ts.getTextValue( a, num, max ); }\n\t\t\tif ( isNaN( b ) ) { b = ts.getTextValue( b, num, max ); }\n\t\t\treturn a - b;\n\t\t},\n\n\t\tsortNumericDesc : function( a, b, num, max, col, c ) {\n\t\t\tif ( a === b ) { return 0; }\n\t\t\tvar empty = ts.string[ ( c.empties[ col ] || c.emptyTo ) ];\n\t\t\tif ( a === '' && empty !== 0 ) { return typeof empty === 'boolean' ? ( empty ? -1 : 1 ) : empty || 1; }\n\t\t\tif ( b === '' && empty !== 0 ) { return typeof empty === 'boolean' ? ( empty ? 1 : -1 ) : -empty || -1; }\n\t\t\tif ( isNaN( a ) ) { a = ts.getTextValue( a, num, max ); }\n\t\t\tif ( isNaN( b ) ) { b = ts.getTextValue( b, num, max ); }\n\t\t\treturn b - a;\n\t\t},\n\n\t\tsortNumeric : function( a, b ) {\n\t\t\treturn a - b;\n\t\t},\n\n\t\t/*\n\t\t██ ██ ██ ██ █████▄ ▄████▄ ██████ ██████ ▄█████\n\t\t██ ██ ██ ██ ██  ██ ██ ▄▄▄ ██▄▄     ██   ▀█▄\n\t\t██ ██ ██ ██ ██  ██ ██ ▀██ ██▀▀     ██      ▀█▄\n\t\t███████▀ ██ █████▀ ▀████▀ ██████   ██   █████▀\n\t\t*/\n\t\taddWidget : function( widget ) {\n\t\t\tif ( widget.id && !ts.isEmptyObject( ts.getWidgetById( widget.id ) ) ) {\n\t\t\t\tconsole.warn( '\"' + widget.id + '\" widget was loaded more than once!' );\n\t\t\t}\n\t\t\tts.widgets[ ts.widgets.length ] = widget;\n\t\t},\n\n\t\thasWidget : function( $table, name ) {\n\t\t\t$table = $( $table );\n\t\t\treturn $table.length && $table[ 0 ].config && $table[ 0 ].config.widgetInit[ name ] || false;\n\t\t},\n\n\t\tgetWidgetById : function( name ) {\n\t\t\tvar indx, widget,\n\t\t\t\tlen = ts.widgets.length;\n\t\t\tfor ( indx = 0; indx < len; indx++ ) {\n\t\t\t\twidget = ts.widgets[ indx ];\n\t\t\t\tif ( widget && widget.id && widget.id.toLowerCase() === name.toLowerCase() ) {\n\t\t\t\t\treturn widget;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tapplyWidgetOptions : function( table ) {\n\t\t\tvar indx, widget, wo,\n\t\t\t\tc = table.config,\n\t\t\t\tlen = c.widgets.length;\n\t\t\tif ( len ) {\n\t\t\t\tfor ( indx = 0; indx < len; indx++ ) {\n\t\t\t\t\twidget = ts.getWidgetById( c.widgets[ indx ] );\n\t\t\t\t\tif ( widget && widget.options ) {\n\t\t\t\t\t\two = $.extend( true, {}, widget.options );\n\t\t\t\t\t\tc.widgetOptions = $.extend( true, wo, c.widgetOptions );\n\t\t\t\t\t\t// add widgetOptions to defaults for option validator\n\t\t\t\t\t\t$.extend( true, ts.defaults.widgetOptions, widget.options );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\taddWidgetFromClass : function( table ) {\n\t\t\tvar len, indx,\n\t\t\t\tc = table.config,\n\t\t\t\t// look for widgets to apply from table class\n\t\t\t\t// don't match from 'ui-widget-content'; use \\S instead of \\w to include widgets\n\t\t\t\t// with dashes in the name, e.g. \"widget-test-2\" extracts out \"test-2\"\n\t\t\t\tregex = '^' + c.widgetClass.replace( ts.regex.templateName, '(\\\\S+)+' ) + '$',\n\t\t\t\twidgetClass = new RegExp( regex, 'g' ),\n\t\t\t\t// split up table class (widget id's can include dashes) - stop using match\n\t\t\t\t// otherwise only one widget gets extracted, see #1109\n\t\t\t\twidgets = ( table.className || '' ).split( ts.regex.spaces );\n\t\t\tif ( widgets.length ) {\n\t\t\t\tlen = widgets.length;\n\t\t\t\tfor ( indx = 0; indx < len; indx++ ) {\n\t\t\t\t\tif ( widgets[ indx ].match( widgetClass ) ) {\n\t\t\t\t\t\tc.widgets[ c.widgets.length ] = widgets[ indx ].replace( widgetClass, '$1' );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tapplyWidgetId : function( table, id, init ) {\n\t\t\ttable = $(table)[0];\n\t\t\tvar applied, time, name,\n\t\t\t\tc = table.config,\n\t\t\t\two = c.widgetOptions,\n\t\t\t\tdebug = ts.debug(c, 'core'),\n\t\t\t\twidget = ts.getWidgetById( id );\n\t\t\tif ( widget ) {\n\t\t\t\tname = widget.id;\n\t\t\t\tapplied = false;\n\t\t\t\t// add widget name to option list so it gets reapplied after sorting, filtering, etc\n\t\t\t\tif ( $.inArray( name, c.widgets ) < 0 ) {\n\t\t\t\t\tc.widgets[ c.widgets.length ] = name;\n\t\t\t\t}\n\t\t\t\tif ( debug ) { time = new Date(); }\n\n\t\t\t\tif ( init || !( c.widgetInit[ name ] ) ) {\n\t\t\t\t\t// set init flag first to prevent calling init more than once (e.g. pager)\n\t\t\t\t\tc.widgetInit[ name ] = true;\n\t\t\t\t\tif ( table.hasInitialized ) {\n\t\t\t\t\t\t// don't reapply widget options on tablesorter init\n\t\t\t\t\t\tts.applyWidgetOptions( table );\n\t\t\t\t\t}\n\t\t\t\t\tif ( typeof widget.init === 'function' ) {\n\t\t\t\t\t\tapplied = true;\n\t\t\t\t\t\tif ( debug ) {\n\t\t\t\t\t\t\tconsole[ console.group ? 'group' : 'log' ]( 'Initializing ' + name + ' widget' );\n\t\t\t\t\t\t}\n\t\t\t\t\t\twidget.init( table, widget, c, wo );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( !init && typeof widget.format === 'function' ) {\n\t\t\t\t\tapplied = true;\n\t\t\t\t\tif ( debug ) {\n\t\t\t\t\t\tconsole[ console.group ? 'group' : 'log' ]( 'Updating ' + name + ' widget' );\n\t\t\t\t\t}\n\t\t\t\t\twidget.format( table, c, wo, false );\n\t\t\t\t}\n\t\t\t\tif ( debug ) {\n\t\t\t\t\tif ( applied ) {\n\t\t\t\t\t\tconsole.log( 'Completed ' + ( init ? 'initializing ' : 'applying ' ) + name + ' widget' + ts.benchmark( time ) );\n\t\t\t\t\t\tif ( console.groupEnd ) { console.groupEnd(); }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tapplyWidget : function( table, init, callback ) {\n\t\t\ttable = $( table )[ 0 ]; // in case this is called externally\n\t\t\tvar indx, len, names, widget, time,\n\t\t\t\tc = table.config,\n\t\t\t\tdebug = ts.debug(c, 'core'),\n\t\t\t\twidgets = [];\n\t\t\t// prevent numerous consecutive widget applications\n\t\t\tif ( init !== false && table.hasInitialized && ( table.isApplyingWidgets || table.isUpdating ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( debug ) { time = new Date(); }\n\t\t\tts.addWidgetFromClass( table );\n\t\t\t// prevent \"tablesorter-ready\" from firing multiple times in a row\n\t\t\tclearTimeout( c.timerReady );\n\t\t\tif ( c.widgets.length ) {\n\t\t\t\ttable.isApplyingWidgets = true;\n\t\t\t\t// ensure unique widget ids\n\t\t\t\tc.widgets = $.grep( c.widgets, function( val, index ) {\n\t\t\t\t\treturn $.inArray( val, c.widgets ) === index;\n\t\t\t\t});\n\t\t\t\tnames = c.widgets || [];\n\t\t\t\tlen = names.length;\n\t\t\t\t// build widget array & add priority as needed\n\t\t\t\tfor ( indx = 0; indx < len; indx++ ) {\n\t\t\t\t\twidget = ts.getWidgetById( names[ indx ] );\n\t\t\t\t\tif ( widget && widget.id ) {\n\t\t\t\t\t\t// set priority to 10 if not defined\n\t\t\t\t\t\tif ( !widget.priority ) { widget.priority = 10; }\n\t\t\t\t\t\twidgets[ indx ] = widget;\n\t\t\t\t\t} else if ( debug ) {\n\t\t\t\t\t\tconsole.warn( '\"' + names[ indx ] + '\" was enabled, but the widget code has not been loaded!' );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// sort widgets by priority\n\t\t\t\twidgets.sort( function( a, b ) {\n\t\t\t\t\treturn a.priority < b.priority ? -1 : a.priority === b.priority ? 0 : 1;\n\t\t\t\t});\n\t\t\t\t// add/update selected widgets\n\t\t\t\tlen = widgets.length;\n\t\t\t\tif ( debug ) {\n\t\t\t\t\tconsole[ console.group ? 'group' : 'log' ]( 'Start ' + ( init ? 'initializing' : 'applying' ) + ' widgets' );\n\t\t\t\t}\n\t\t\t\tfor ( indx = 0; indx < len; indx++ ) {\n\t\t\t\t\twidget = widgets[ indx ];\n\t\t\t\t\tif ( widget && widget.id ) {\n\t\t\t\t\t\tts.applyWidgetId( table, widget.id, init );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( debug && console.groupEnd ) { console.groupEnd(); }\n\t\t\t}\n\t\t\tc.timerReady = setTimeout( function() {\n\t\t\t\ttable.isApplyingWidgets = false;\n\t\t\t\t$.data( table, 'lastWidgetApplication', new Date() );\n\t\t\t\tc.$table.triggerHandler( 'tablesorter-ready' );\n\t\t\t\t// callback executed on init only\n\t\t\t\tif ( !init && typeof callback === 'function' ) {\n\t\t\t\t\tcallback( table );\n\t\t\t\t}\n\t\t\t\tif ( debug ) {\n\t\t\t\t\twidget = c.widgets.length;\n\t\t\t\t\tconsole.log( 'Completed ' +\n\t\t\t\t\t\t( init === true ? 'initializing ' : 'applying ' ) + widget +\n\t\t\t\t\t\t' widget' + ( widget !== 1 ? 's' : '' ) + ts.benchmark( time ) );\n\t\t\t\t}\n\t\t\t}, 10 );\n\t\t},\n\n\t\tremoveWidget : function( table, name, refreshing ) {\n\t\t\ttable = $( table )[ 0 ];\n\t\t\tvar index, widget, indx, len,\n\t\t\t\tc = table.config;\n\t\t\t// if name === true, add all widgets from $.tablesorter.widgets\n\t\t\tif ( name === true ) {\n\t\t\t\tname = [];\n\t\t\t\tlen = ts.widgets.length;\n\t\t\t\tfor ( indx = 0; indx < len; indx++ ) {\n\t\t\t\t\twidget = ts.widgets[ indx ];\n\t\t\t\t\tif ( widget && widget.id ) {\n\t\t\t\t\t\tname[ name.length ] = widget.id;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// name can be either an array of widgets names,\n\t\t\t\t// or a space/comma separated list of widget names\n\t\t\t\tname = ( $.isArray( name ) ? name.join( ',' ) : name || '' ).toLowerCase().split( /[\\s,]+/ );\n\t\t\t}\n\t\t\tlen = name.length;\n\t\t\tfor ( index = 0; index < len; index++ ) {\n\t\t\t\twidget = ts.getWidgetById( name[ index ] );\n\t\t\t\tindx = $.inArray( name[ index ], c.widgets );\n\t\t\t\t// don't remove the widget from config.widget if refreshing\n\t\t\t\tif ( indx >= 0 && refreshing !== true ) {\n\t\t\t\t\tc.widgets.splice( indx, 1 );\n\t\t\t\t}\n\t\t\t\tif ( widget && widget.remove ) {\n\t\t\t\t\tif ( ts.debug(c, 'core') ) {\n\t\t\t\t\t\tconsole.log( ( refreshing ? 'Refreshing' : 'Removing' ) + ' \"' + name[ index ] + '\" widget' );\n\t\t\t\t\t}\n\t\t\t\t\twidget.remove( table, c, c.widgetOptions, refreshing );\n\t\t\t\t\tc.widgetInit[ name[ index ] ] = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tc.$table.triggerHandler( 'widgetRemoveEnd', table );\n\t\t},\n\n\t\trefreshWidgets : function( table, doAll, dontapply ) {\n\t\t\ttable = $( table )[ 0 ]; // see issue #243\n\t\t\tvar indx, widget,\n\t\t\t\tc = table.config,\n\t\t\t\tcurWidgets = c.widgets,\n\t\t\t\twidgets = ts.widgets,\n\t\t\t\tlen = widgets.length,\n\t\t\t\tlist = [],\n\t\t\t\tcallback = function( table ) {\n\t\t\t\t\t$( table ).triggerHandler( 'refreshComplete' );\n\t\t\t\t};\n\t\t\t// remove widgets not defined in config.widgets, unless doAll is true\n\t\t\tfor ( indx = 0; indx < len; indx++ ) {\n\t\t\t\twidget = widgets[ indx ];\n\t\t\t\tif ( widget && widget.id && ( doAll || $.inArray( widget.id, curWidgets ) < 0 ) ) {\n\t\t\t\t\tlist[ list.length ] = widget.id;\n\t\t\t\t}\n\t\t\t}\n\t\t\tts.removeWidget( table, list.join( ',' ), true );\n\t\t\tif ( dontapply !== true ) {\n\t\t\t\t// call widget init if\n\t\t\t\tts.applyWidget( table, doAll || false, callback );\n\t\t\t\tif ( doAll ) {\n\t\t\t\t\t// apply widget format\n\t\t\t\t\tts.applyWidget( table, false, callback );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcallback( table );\n\t\t\t}\n\t\t},\n\n\t\t/*\n\t\t██  ██ ██████ ██ ██     ██ ██████ ██ ██████ ▄█████\n\t\t██  ██   ██   ██ ██     ██   ██   ██ ██▄▄   ▀█▄\n\t\t██  ██   ██   ██ ██     ██   ██   ██ ██▀▀      ▀█▄\n\t\t▀████▀   ██   ██ ██████ ██   ██   ██ ██████ █████▀\n\t\t*/\n\t\tbenchmark : function( diff ) {\n\t\t\treturn ( ' (' + ( new Date().getTime() - diff.getTime() ) + ' ms)' );\n\t\t},\n\t\t// deprecated ts.log\n\t\tlog : function() {\n\t\t\tconsole.log( arguments );\n\t\t},\n\t\tdebug : function(c, name) {\n\t\t\treturn c && (\n\t\t\t\tc.debug === true ||\n\t\t\t\ttypeof c.debug === 'string' && c.debug.indexOf(name) > -1\n\t\t\t);\n\t\t},\n\n\t\t// $.isEmptyObject from jQuery v1.4\n\t\tisEmptyObject : function( obj ) {\n\t\t\t/*jshint forin: false */\n\t\t\tfor ( var name in obj ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\tisValueInArray : function( column, arry ) {\n\t\t\tvar indx,\n\t\t\t\tlen = arry && arry.length || 0;\n\t\t\tfor ( indx = 0; indx < len; indx++ ) {\n\t\t\t\tif ( arry[ indx ][ 0 ] === column ) {\n\t\t\t\t\treturn indx;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t},\n\n\t\tformatFloat : function( str, table ) {\n\t\t\tif ( typeof str !== 'string' || str === '' ) { return str; }\n\t\t\t// allow using formatFloat without a table; defaults to US number format\n\t\t\tvar num,\n\t\t\t\tusFormat = table && table.config ? table.config.usNumberFormat !== false :\n\t\t\t\t\ttypeof table !== 'undefined' ? table : true;\n\t\t\tif ( usFormat ) {\n\t\t\t\t// US Format - 1,234,567.89 -> 1234567.89\n\t\t\t\tstr = str.replace( ts.regex.comma, '' );\n\t\t\t} else {\n\t\t\t\t// German Format = 1.234.567,89 -> 1234567.89\n\t\t\t\t// French Format = 1 234 567,89 -> 1234567.89\n\t\t\t\tstr = str.replace( ts.regex.digitNonUS, '' ).replace( ts.regex.comma, '.' );\n\t\t\t}\n\t\t\tif ( ts.regex.digitNegativeTest.test( str ) ) {\n\t\t\t\t// make (#) into a negative number -> (10) = -10\n\t\t\t\tstr = str.replace( ts.regex.digitNegativeReplace, '-$1' );\n\t\t\t}\n\t\t\tnum = parseFloat( str );\n\t\t\t// return the text instead of zero\n\t\t\treturn isNaN( num ) ? $.trim( str ) : num;\n\t\t},\n\n\t\tisDigit : function( str ) {\n\t\t\t// replace all unwanted chars and match\n\t\t\treturn isNaN( str ) ?\n\t\t\t\tts.regex.digitTest.test( str.toString().replace( ts.regex.digitReplace, '' ) ) :\n\t\t\t\tstr !== '';\n\t\t},\n\n\t\t// computeTableHeaderCellIndexes from:\n\t\t// http://www.javascripttoolbox.com/lib/table/examples.php\n\t\t// http://www.javascripttoolbox.com/temp/table_cellindex.html\n\t\tcomputeColumnIndex : function( $rows, c ) {\n\t\t\tvar i, j, k, l, cell, cells, rowIndex, rowSpan, colSpan, firstAvailCol,\n\t\t\t\t// total columns has been calculated, use it to set the matrixrow\n\t\t\t\tcolumns = c && c.columns || 0,\n\t\t\t\tmatrix = [],\n\t\t\t\tmatrixrow = new Array( columns );\n\t\t\tfor ( i = 0; i < $rows.length; i++ ) {\n\t\t\t\tcells = $rows[ i ].cells;\n\t\t\t\tfor ( j = 0; j < cells.length; j++ ) {\n\t\t\t\t\tcell = cells[ j ];\n\t\t\t\t\trowIndex = i;\n\t\t\t\t\trowSpan = cell.rowSpan || 1;\n\t\t\t\t\tcolSpan = cell.colSpan || 1;\n\t\t\t\t\tif ( typeof matrix[ rowIndex ] === 'undefined' ) {\n\t\t\t\t\t\tmatrix[ rowIndex ] = [];\n\t\t\t\t\t}\n\t\t\t\t\t// Find first available column in the first row\n\t\t\t\t\tfor ( k = 0; k < matrix[ rowIndex ].length + 1; k++ ) {\n\t\t\t\t\t\tif ( typeof matrix[ rowIndex ][ k ] === 'undefined' ) {\n\t\t\t\t\t\t\tfirstAvailCol = k;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// jscs:disable disallowEmptyBlocks\n\t\t\t\t\tif ( columns && cell.cellIndex === firstAvailCol ) {\n\t\t\t\t\t\t// don't to anything\n\t\t\t\t\t} else if ( cell.setAttribute ) {\n\t\t\t\t\t\t// jscs:enable disallowEmptyBlocks\n\t\t\t\t\t\t// add data-column (setAttribute = IE8+)\n\t\t\t\t\t\tcell.setAttribute( 'data-column', firstAvailCol );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// remove once we drop support for IE7 - 1/12/2016\n\t\t\t\t\t\t$( cell ).attr( 'data-column', firstAvailCol );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = rowIndex; k < rowIndex + rowSpan; k++ ) {\n\t\t\t\t\t\tif ( typeof matrix[ k ] === 'undefined' ) {\n\t\t\t\t\t\t\tmatrix[ k ] = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatrixrow = matrix[ k ];\n\t\t\t\t\t\tfor ( l = firstAvailCol; l < firstAvailCol + colSpan; l++ ) {\n\t\t\t\t\t\t\tmatrixrow[ l ] = 'x';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tts.checkColumnCount($rows, matrix, matrixrow.length);\n\t\t\treturn matrixrow.length;\n\t\t},\n\n\t\tcheckColumnCount : function($rows, matrix, columns) {\n\t\t\t// this DOES NOT report any tbody column issues, except for the math and\n\t\t\t// and column selector widgets\n\t\t\tvar i, len,\n\t\t\t\tvalid = true,\n\t\t\t\tcells = [];\n\t\t\tfor ( i = 0; i < matrix.length; i++ ) {\n\t\t\t\t// some matrix entries are undefined when testing the footer because\n\t\t\t\t// it is using the rowIndex property\n\t\t\t\tif ( matrix[i] ) {\n\t\t\t\t\tlen = matrix[i].length;\n\t\t\t\t\tif ( matrix[i].length !== columns ) {\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( !valid ) {\n\t\t\t\t$rows.each( function( indx, el ) {\n\t\t\t\t\tvar cell = el.parentElement.nodeName;\n\t\t\t\t\tif ( cells.indexOf( cell ) < 0 ) {\n\t\t\t\t\t\tcells.push( cell );\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tconsole.error(\n\t\t\t\t\t'Invalid or incorrect number of columns in the ' +\n\t\t\t\t\tcells.join( ' or ' ) + '; expected ' + columns +\n\t\t\t\t\t', but found ' + len + ' columns'\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\n\t\t// automatically add a colgroup with col elements set to a percentage width\n\t\tfixColumnWidth : function( table ) {\n\t\t\ttable = $( table )[ 0 ];\n\t\t\tvar overallWidth, percent, $tbodies, len, index,\n\t\t\t\tc = table.config,\n\t\t\t\t$colgroup = c.$table.children( 'colgroup' );\n\t\t\t// remove plugin-added colgroup, in case we need to refresh the widths\n\t\t\tif ( $colgroup.length && $colgroup.hasClass( ts.css.colgroup ) ) {\n\t\t\t\t$colgroup.remove();\n\t\t\t}\n\t\t\tif ( c.widthFixed && c.$table.children( 'colgroup' ).length === 0 ) {\n\t\t\t\t$colgroup = $( '<colgroup class=\"' + ts.css.colgroup + '\">' );\n\t\t\t\toverallWidth = c.$table.width();\n\t\t\t\t// only add col for visible columns - fixes #371\n\t\t\t\t$tbodies = c.$tbodies.find( 'tr:first' ).children( ':visible' );\n\t\t\t\tlen = $tbodies.length;\n\t\t\t\tfor ( index = 0; index < len; index++ ) {\n\t\t\t\t\tpercent = parseInt( ( $tbodies.eq( index ).width() / overallWidth ) * 1000, 10 ) / 10 + '%';\n\t\t\t\t\t$colgroup.append( $( '<col>' ).css( 'width', percent ) );\n\t\t\t\t}\n\t\t\t\tc.$table.prepend( $colgroup );\n\t\t\t}\n\t\t},\n\n\t\t// get sorter, string, empty, etc options for each column from\n\t\t// jQuery data, metadata, header option or header class name ('sorter-false')\n\t\t// priority = jQuery data > meta > headers option > header class name\n\t\tgetData : function( header, configHeader, key ) {\n\t\t\tvar meta, cl4ss,\n\t\t\t\tval = '',\n\t\t\t\t$header = $( header );\n\t\t\tif ( !$header.length ) { return ''; }\n\t\t\tmeta = $.metadata ? $header.metadata() : false;\n\t\t\tcl4ss = ' ' + ( $header.attr( 'class' ) || '' );\n\t\t\tif ( typeof $header.data( key ) !== 'undefined' ||\n\t\t\t\ttypeof $header.data( key.toLowerCase() ) !== 'undefined' ) {\n\t\t\t\t// 'data-lockedOrder' is assigned to 'lockedorder'; but 'data-locked-order' is assigned to 'lockedOrder'\n\t\t\t\t// 'data-sort-initial-order' is assigned to 'sortInitialOrder'\n\t\t\t\tval += $header.data( key ) || $header.data( key.toLowerCase() );\n\t\t\t} else if ( meta && typeof meta[ key ] !== 'undefined' ) {\n\t\t\t\tval += meta[ key ];\n\t\t\t} else if ( configHeader && typeof configHeader[ key ] !== 'undefined' ) {\n\t\t\t\tval += configHeader[ key ];\n\t\t\t} else if ( cl4ss !== ' ' && cl4ss.match( ' ' + key + '-' ) ) {\n\t\t\t\t// include sorter class name 'sorter-text', etc; now works with 'sorter-my-custom-parser'\n\t\t\t\tval = cl4ss.match( new RegExp( '\\\\s' + key + '-([\\\\w-]+)' ) )[ 1 ] || '';\n\t\t\t}\n\t\t\treturn $.trim( val );\n\t\t},\n\n\t\tgetColumnData : function( table, obj, indx, getCell, $headers ) {\n\t\t\tif ( typeof obj !== 'object' || obj === null ) {\n\t\t\t\treturn obj;\n\t\t\t}\n\t\t\ttable = $( table )[ 0 ];\n\t\t\tvar $header, key,\n\t\t\t\tc = table.config,\n\t\t\t\t$cells = ( $headers || c.$headers ),\n\t\t\t\t// c.$headerIndexed is not defined initially\n\t\t\t\t$cell = c.$headerIndexed && c.$headerIndexed[ indx ] ||\n\t\t\t\t\t$cells.find( '[data-column=\"' + indx + '\"]:last' );\n\t\t\tif ( typeof obj[ indx ] !== 'undefined' ) {\n\t\t\t\treturn getCell ? obj[ indx ] : obj[ $cells.index( $cell ) ];\n\t\t\t}\n\t\t\tfor ( key in obj ) {\n\t\t\t\tif ( typeof key === 'string' ) {\n\t\t\t\t\t$header = $cell\n\t\t\t\t\t\t// header cell with class/id\n\t\t\t\t\t\t.filter( key )\n\t\t\t\t\t\t// find elements within the header cell with cell/id\n\t\t\t\t\t\t.add( $cell.find( key ) );\n\t\t\t\t\tif ( $header.length ) {\n\t\t\t\t\t\treturn obj[ key ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t},\n\n\t\t// *** Process table ***\n\t\t// add processing indicator\n\t\tisProcessing : function( $table, toggle, $headers ) {\n\t\t\t$table = $( $table );\n\t\t\tvar c = $table[ 0 ].config,\n\t\t\t\t// default to all headers\n\t\t\t\t$header = $headers || $table.find( '.' + ts.css.header );\n\t\t\tif ( toggle ) {\n\t\t\t\t// don't use sortList if custom $headers used\n\t\t\t\tif ( typeof $headers !== 'undefined' && c.sortList.length > 0 ) {\n\t\t\t\t\t// get headers from the sortList\n\t\t\t\t\t$header = $header.filter( function() {\n\t\t\t\t\t\t// get data-column from attr to keep compatibility with jQuery 1.2.6\n\t\t\t\t\t\treturn this.sortDisabled ?\n\t\t\t\t\t\t\tfalse :\n\t\t\t\t\t\t\tts.isValueInArray( parseFloat( $( this ).attr( 'data-column' ) ), c.sortList ) >= 0;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t$table.add( $header ).addClass( ts.css.processing + ' ' + c.cssProcessing );\n\t\t\t} else {\n\t\t\t\t$table.add( $header ).removeClass( ts.css.processing + ' ' + c.cssProcessing );\n\t\t\t}\n\t\t},\n\n\t\t// detach tbody but save the position\n\t\t// don't use tbody because there are portions that look for a tbody index (updateCell)\n\t\tprocessTbody : function( table, $tb, getIt ) {\n\t\t\ttable = $( table )[ 0 ];\n\t\t\tif ( getIt ) {\n\t\t\t\ttable.isProcessing = true;\n\t\t\t\t$tb.before( '<colgroup class=\"tablesorter-savemyplace\"/>' );\n\t\t\t\treturn $.fn.detach ? $tb.detach() : $tb.remove();\n\t\t\t}\n\t\t\tvar holdr = $( table ).find( 'colgroup.tablesorter-savemyplace' );\n\t\t\t$tb.insertAfter( holdr );\n\t\t\tholdr.remove();\n\t\t\ttable.isProcessing = false;\n\t\t},\n\n\t\tclearTableBody : function( table ) {\n\t\t\t$( table )[ 0 ].config.$tbodies.children().detach();\n\t\t},\n\n\t\t// used when replacing accented characters during sorting\n\t\tcharacterEquivalents : {\n\t\t\t'a' : '\\u00e1\\u00e0\\u00e2\\u00e3\\u00e4\\u0105\\u00e5', // áàâãäąå\n\t\t\t'A' : '\\u00c1\\u00c0\\u00c2\\u00c3\\u00c4\\u0104\\u00c5', // ÁÀÂÃÄĄÅ\n\t\t\t'c' : '\\u00e7\\u0107\\u010d', // çćč\n\t\t\t'C' : '\\u00c7\\u0106\\u010c', // ÇĆČ\n\t\t\t'e' : '\\u00e9\\u00e8\\u00ea\\u00eb\\u011b\\u0119', // éèêëěę\n\t\t\t'E' : '\\u00c9\\u00c8\\u00ca\\u00cb\\u011a\\u0118', // ÉÈÊËĚĘ\n\t\t\t'i' : '\\u00ed\\u00ec\\u0130\\u00ee\\u00ef\\u0131', // íìİîïı\n\t\t\t'I' : '\\u00cd\\u00cc\\u0130\\u00ce\\u00cf', // ÍÌİÎÏ\n\t\t\t'o' : '\\u00f3\\u00f2\\u00f4\\u00f5\\u00f6\\u014d', // óòôõöō\n\t\t\t'O' : '\\u00d3\\u00d2\\u00d4\\u00d5\\u00d6\\u014c', // ÓÒÔÕÖŌ\n\t\t\t'ss': '\\u00df', // ß (s sharp)\n\t\t\t'SS': '\\u1e9e', // ẞ (Capital sharp s)\n\t\t\t'u' : '\\u00fa\\u00f9\\u00fb\\u00fc\\u016f', // úùûüů\n\t\t\t'U' : '\\u00da\\u00d9\\u00db\\u00dc\\u016e' // ÚÙÛÜŮ\n\t\t},\n\n\t\treplaceAccents : function( str ) {\n\t\t\tvar chr,\n\t\t\t\tacc = '[',\n\t\t\t\teq = ts.characterEquivalents;\n\t\t\tif ( !ts.characterRegex ) {\n\t\t\t\tts.characterRegexArray = {};\n\t\t\t\tfor ( chr in eq ) {\n\t\t\t\t\tif ( typeof chr === 'string' ) {\n\t\t\t\t\t\tacc += eq[ chr ];\n\t\t\t\t\t\tts.characterRegexArray[ chr ] = new RegExp( '[' + eq[ chr ] + ']', 'g' );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tts.characterRegex = new RegExp( acc + ']' );\n\t\t\t}\n\t\t\tif ( ts.characterRegex.test( str ) ) {\n\t\t\t\tfor ( chr in eq ) {\n\t\t\t\t\tif ( typeof chr === 'string' ) {\n\t\t\t\t\t\tstr = str.replace( ts.characterRegexArray[ chr ], chr );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn str;\n\t\t},\n\n\t\tvalidateOptions : function( c ) {\n\t\t\tvar setting, setting2, typ, timer,\n\t\t\t\t// ignore options containing an array\n\t\t\t\tignore = 'headers sortForce sortList sortAppend widgets'.split( ' ' ),\n\t\t\t\torig = c.originalSettings;\n\t\t\tif ( orig ) {\n\t\t\t\tif ( ts.debug(c, 'core') ) {\n\t\t\t\t\ttimer = new Date();\n\t\t\t\t}\n\t\t\t\tfor ( setting in orig ) {\n\t\t\t\t\ttyp = typeof ts.defaults[setting];\n\t\t\t\t\tif ( typ === 'undefined' ) {\n\t\t\t\t\t\tconsole.warn( 'Tablesorter Warning! \"table.config.' + setting + '\" option not recognized' );\n\t\t\t\t\t} else if ( typ === 'object' ) {\n\t\t\t\t\t\tfor ( setting2 in orig[setting] ) {\n\t\t\t\t\t\t\ttyp = ts.defaults[setting] && typeof ts.defaults[setting][setting2];\n\t\t\t\t\t\t\tif ( $.inArray( setting, ignore ) < 0 && typ === 'undefined' ) {\n\t\t\t\t\t\t\t\tconsole.warn( 'Tablesorter Warning! \"table.config.' + setting + '.' + setting2 + '\" option not recognized' );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( ts.debug(c, 'core') ) {\n\t\t\t\t\tconsole.log( 'validate options time:' + ts.benchmark( timer ) );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// restore headers\n\t\trestoreHeaders : function( table ) {\n\t\t\tvar index, $cell,\n\t\t\t\tc = $( table )[ 0 ].config,\n\t\t\t\t$headers = c.$table.find( c.selectorHeaders ),\n\t\t\t\tlen = $headers.length;\n\t\t\t// don't use c.$headers here in case header cells were swapped\n\t\t\tfor ( index = 0; index < len; index++ ) {\n\t\t\t\t$cell = $headers.eq( index );\n\t\t\t\t// only restore header cells if it is wrapped\n\t\t\t\t// because this is also used by the updateAll method\n\t\t\t\tif ( $cell.find( '.' + ts.css.headerIn ).length ) {\n\t\t\t\t\t$cell.html( c.headerContent[ index ] );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tdestroy : function( table, removeClasses, callback ) {\n\t\t\ttable = $( table )[ 0 ];\n\t\t\tif ( !table.hasInitialized ) { return; }\n\t\t\t// remove all widgets\n\t\t\tts.removeWidget( table, true, false );\n\t\t\tvar events,\n\t\t\t\t$t = $( table ),\n\t\t\t\tc = table.config,\n\t\t\t\t$h = $t.find( 'thead:first' ),\n\t\t\t\t$r = $h.find( 'tr.' + ts.css.headerRow ).removeClass( ts.css.headerRow + ' ' + c.cssHeaderRow ),\n\t\t\t\t$f = $t.find( 'tfoot:first > tr' ).children( 'th, td' );\n\t\t\tif ( removeClasses === false && $.inArray( 'uitheme', c.widgets ) >= 0 ) {\n\t\t\t\t// reapply uitheme classes, in case we want to maintain appearance\n\t\t\t\t$t.triggerHandler( 'applyWidgetId', [ 'uitheme' ] );\n\t\t\t\t$t.triggerHandler( 'applyWidgetId', [ 'zebra' ] );\n\t\t\t}\n\t\t\t// remove widget added rows, just in case\n\t\t\t$h.find( 'tr' ).not( $r ).remove();\n\t\t\t// disable tablesorter - not using .unbind( namespace ) because namespacing was\n\t\t\t// added in jQuery v1.4.3 - see http://api.jquery.com/event.namespace/\n\t\t\tevents = 'sortReset update updateRows updateAll updateHeaders updateCell addRows updateComplete sorton ' +\n\t\t\t\t'appendCache updateCache applyWidgetId applyWidgets refreshWidgets removeWidget destroy mouseup mouseleave ' +\n\t\t\t\t'keypress sortBegin sortEnd resetToLoadState '.split( ' ' )\n\t\t\t\t.join( c.namespace + ' ' );\n\t\t\t$t\n\t\t\t\t.removeData( 'tablesorter' )\n\t\t\t\t.unbind( events.replace( ts.regex.spaces, ' ' ) );\n\t\t\tc.$headers\n\t\t\t\t.add( $f )\n\t\t\t\t.removeClass( [ ts.css.header, c.cssHeader, c.cssAsc, c.cssDesc, ts.css.sortAsc, ts.css.sortDesc, ts.css.sortNone ].join( ' ' ) )\n\t\t\t\t.removeAttr( 'data-column' )\n\t\t\t\t.removeAttr( 'aria-label' )\n\t\t\t\t.attr( 'aria-disabled', 'true' );\n\t\t\t$r\n\t\t\t\t.find( c.selectorSort )\n\t\t\t\t.unbind( ( 'mousedown mouseup keypress '.split( ' ' ).join( c.namespace + ' ' ) ).replace( ts.regex.spaces, ' ' ) );\n\t\t\tts.restoreHeaders( table );\n\t\t\t$t.toggleClass( ts.css.table + ' ' + c.tableClass + ' tablesorter-' + c.theme, removeClasses === false );\n\t\t\t$t.removeClass(c.namespace.slice(1));\n\t\t\t// clear flag in case the plugin is initialized again\n\t\t\ttable.hasInitialized = false;\n\t\t\tdelete table.config.cache;\n\t\t\tif ( typeof callback === 'function' ) {\n\t\t\t\tcallback( table );\n\t\t\t}\n\t\t\tif ( ts.debug(c, 'core') ) {\n\t\t\t\tconsole.log( 'tablesorter has been removed' );\n\t\t\t}\n\t\t}\n\n\t};\n\n\t$.fn.tablesorter = function( settings ) {\n\t\treturn this.each( function() {\n\t\t\tvar table = this,\n\t\t\t// merge & extend config options\n\t\t\tc = $.extend( true, {}, ts.defaults, settings, ts.instanceMethods );\n\t\t\t// save initial settings\n\t\t\tc.originalSettings = settings;\n\t\t\t// create a table from data (build table widget)\n\t\t\tif ( !table.hasInitialized && ts.buildTable && this.nodeName !== 'TABLE' ) {\n\t\t\t\t// return the table (in case the original target is the table's container)\n\t\t\t\tts.buildTable( table, c );\n\t\t\t} else {\n\t\t\t\tts.setup( table, c );\n\t\t\t}\n\t\t});\n\t};\n\n\t// set up debug logs\n\tif ( !( window.console && window.console.log ) ) {\n\t\t// access $.tablesorter.logs for browsers that don't have a console...\n\t\tts.logs = [];\n\t\t/*jshint -W020 */\n\t\tconsole = {};\n\t\tconsole.log = console.warn = console.error = console.table = function() {\n\t\t\tvar arg = arguments.length > 1 ? arguments : arguments[0];\n\t\t\tts.logs[ ts.logs.length ] = { date: Date.now(), log: arg };\n\t\t};\n\t}\n\n\t// add default parsers\n\tts.addParser({\n\t\tid : 'no-parser',\n\t\tis : function() {\n\t\t\treturn false;\n\t\t},\n\t\tformat : function() {\n\t\t\treturn '';\n\t\t},\n\t\ttype : 'text'\n\t});\n\n\tts.addParser({\n\t\tid : 'text',\n\t\tis : function() {\n\t\t\treturn true;\n\t\t},\n\t\tformat : function( str, table ) {\n\t\t\tvar c = table.config;\n\t\t\tif ( str ) {\n\t\t\t\tstr = $.trim( c.ignoreCase ? str.toLocaleLowerCase() : str );\n\t\t\t\tstr = c.sortLocaleCompare ? ts.replaceAccents( str ) : str;\n\t\t\t}\n\t\t\treturn str;\n\t\t},\n\t\ttype : 'text'\n\t});\n\n\tts.regex.nondigit = /[^\\w,. \\-()]/g;\n\tts.addParser({\n\t\tid : 'digit',\n\t\tis : function( str ) {\n\t\t\treturn ts.isDigit( str );\n\t\t},\n\t\tformat : function( str, table ) {\n\t\t\tvar num = ts.formatFloat( ( str || '' ).replace( ts.regex.nondigit, '' ), table );\n\t\t\treturn str && typeof num === 'number' ? num :\n\t\t\t\tstr ? $.trim( str && table.config.ignoreCase ? str.toLocaleLowerCase() : str ) : str;\n\t\t},\n\t\ttype : 'numeric'\n\t});\n\n\tts.regex.currencyReplace = /[+\\-,. ]/g;\n\tts.regex.currencyTest = /^\\(?\\d+[\\u00a3$\\u20ac\\u00a4\\u00a5\\u00a2?.]|[\\u00a3$\\u20ac\\u00a4\\u00a5\\u00a2?.]\\d+\\)?$/;\n\tts.addParser({\n\t\tid : 'currency',\n\t\tis : function( str ) {\n\t\t\tstr = ( str || '' ).replace( ts.regex.currencyReplace, '' );\n\t\t\t// test for £$€¤¥¢\n\t\t\treturn ts.regex.currencyTest.test( str );\n\t\t},\n\t\tformat : function( str, table ) {\n\t\t\tvar num = ts.formatFloat( ( str || '' ).replace( ts.regex.nondigit, '' ), table );\n\t\t\treturn str && typeof num === 'number' ? num :\n\t\t\t\tstr ? $.trim( str && table.config.ignoreCase ? str.toLocaleLowerCase() : str ) : str;\n\t\t},\n\t\ttype : 'numeric'\n\t});\n\n\t// too many protocols to add them all https://en.wikipedia.org/wiki/URI_scheme\n\t// now, this regex can be updated before initialization\n\tts.regex.urlProtocolTest = /^(https?|ftp|file):\\/\\//;\n\tts.regex.urlProtocolReplace = /(https?|ftp|file):\\/\\/(www\\.)?/;\n\tts.addParser({\n\t\tid : 'url',\n\t\tis : function( str ) {\n\t\t\treturn ts.regex.urlProtocolTest.test( str );\n\t\t},\n\t\tformat : function( str ) {\n\t\t\treturn str ? $.trim( str.replace( ts.regex.urlProtocolReplace, '' ) ) : str;\n\t\t},\n\t\ttype : 'text'\n\t});\n\n\tts.regex.dash = /-/g;\n\tts.regex.isoDate = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}/;\n\tts.addParser({\n\t\tid : 'isoDate',\n\t\tis : function( str ) {\n\t\t\treturn ts.regex.isoDate.test( str );\n\t\t},\n\t\tformat : function( str ) {\n\t\t\tvar date = str ? new Date( str.replace( ts.regex.dash, '/' ) ) : str;\n\t\t\treturn date instanceof Date && isFinite( date ) ? date.getTime() : str;\n\t\t},\n\t\ttype : 'numeric'\n\t});\n\n\tts.regex.percent = /%/g;\n\tts.regex.percentTest = /(\\d\\s*?%|%\\s*?\\d)/;\n\tts.addParser({\n\t\tid : 'percent',\n\t\tis : function( str ) {\n\t\t\treturn ts.regex.percentTest.test( str ) && str.length < 15;\n\t\t},\n\t\tformat : function( str, table ) {\n\t\t\treturn str ? ts.formatFloat( str.replace( ts.regex.percent, '' ), table ) : str;\n\t\t},\n\t\ttype : 'numeric'\n\t});\n\n\t// added image parser to core v2.17.9\n\tts.addParser({\n\t\tid : 'image',\n\t\tis : function( str, table, node, $node ) {\n\t\t\treturn $node.find( 'img' ).length > 0;\n\t\t},\n\t\tformat : function( str, table, cell ) {\n\t\t\treturn $( cell ).find( 'img' ).attr( table.config.imgAttr || 'alt' ) || str;\n\t\t},\n\t\tparsed : true, // filter widget flag\n\t\ttype : 'text'\n\t});\n\n\tts.regex.dateReplace = /(\\S)([AP]M)$/i; // used by usLongDate & time parser\n\tts.regex.usLongDateTest1 = /^[A-Z]{3,10}\\.?\\s+\\d{1,2},?\\s+(\\d{4})(\\s+\\d{1,2}:\\d{2}(:\\d{2})?(\\s+[AP]M)?)?$/i;\n\tts.regex.usLongDateTest2 = /^\\d{1,2}\\s+[A-Z]{3,10}\\s+\\d{4}/i;\n\tts.addParser({\n\t\tid : 'usLongDate',\n\t\tis : function( str ) {\n\t\t\t// two digit years are not allowed cross-browser\n\t\t\t// Jan 01, 2013 12:34:56 PM or 01 Jan 2013\n\t\t\treturn ts.regex.usLongDateTest1.test( str ) || ts.regex.usLongDateTest2.test( str );\n\t\t},\n\t\tformat : function( str ) {\n\t\t\tvar date = str ? new Date( str.replace( ts.regex.dateReplace, '$1 $2' ) ) : str;\n\t\t\treturn date instanceof Date && isFinite( date ) ? date.getTime() : str;\n\t\t},\n\t\ttype : 'numeric'\n\t});\n\n\t// testing for ##-##-#### or ####-##-##, so it's not perfect; time can be included\n\tts.regex.shortDateTest = /(^\\d{1,2}[\\/\\s]\\d{1,2}[\\/\\s]\\d{4})|(^\\d{4}[\\/\\s]\\d{1,2}[\\/\\s]\\d{1,2})/;\n\t// escaped \"-\" because JSHint in Firefox was showing it as an error\n\tts.regex.shortDateReplace = /[\\-.,]/g;\n\t// XXY covers MDY & DMY formats\n\tts.regex.shortDateXXY = /(\\d{1,2})[\\/\\s](\\d{1,2})[\\/\\s](\\d{4})/;\n\tts.regex.shortDateYMD = /(\\d{4})[\\/\\s](\\d{1,2})[\\/\\s](\\d{1,2})/;\n\tts.convertFormat = function( dateString, format ) {\n\t\tdateString = ( dateString || '' )\n\t\t\t.replace( ts.regex.spaces, ' ' )\n\t\t\t.replace( ts.regex.shortDateReplace, '/' );\n\t\tif ( format === 'mmddyyyy' ) {\n\t\t\tdateString = dateString.replace( ts.regex.shortDateXXY, '$3/$1/$2' );\n\t\t} else if ( format === 'ddmmyyyy' ) {\n\t\t\tdateString = dateString.replace( ts.regex.shortDateXXY, '$3/$2/$1' );\n\t\t} else if ( format === 'yyyymmdd' ) {\n\t\t\tdateString = dateString.replace( ts.regex.shortDateYMD, '$1/$2/$3' );\n\t\t}\n\t\tvar date = new Date( dateString );\n\t\treturn date instanceof Date && isFinite( date ) ? date.getTime() : '';\n\t};\n\n\tts.addParser({\n\t\tid : 'shortDate', // 'mmddyyyy', 'ddmmyyyy' or 'yyyymmdd'\n\t\tis : function( str ) {\n\t\t\tstr = ( str || '' ).replace( ts.regex.spaces, ' ' ).replace( ts.regex.shortDateReplace, '/' );\n\t\t\treturn ts.regex.shortDateTest.test( str );\n\t\t},\n\t\tformat : function( str, table, cell, cellIndex ) {\n\t\t\tif ( str ) {\n\t\t\t\tvar c = table.config,\n\t\t\t\t\t$header = c.$headerIndexed[ cellIndex ],\n\t\t\t\t\tformat = $header.length && $header.data( 'dateFormat' ) ||\n\t\t\t\t\t\tts.getData( $header, ts.getColumnData( table, c.headers, cellIndex ), 'dateFormat' ) ||\n\t\t\t\t\t\tc.dateFormat;\n\t\t\t\t// save format because getData can be slow...\n\t\t\t\tif ( $header.length ) {\n\t\t\t\t\t$header.data( 'dateFormat', format );\n\t\t\t\t}\n\t\t\t\treturn ts.convertFormat( str, format ) || str;\n\t\t\t}\n\t\t\treturn str;\n\t\t},\n\t\ttype : 'numeric'\n\t});\n\n\t// match 24 hour time & 12 hours time + am/pm - see http://regexr.com/3c3tk\n\tts.regex.timeTest = /^(0?[1-9]|1[0-2]):([0-5]\\d)(\\s[AP]M)$|^((?:[01]\\d|[2][0-4]):[0-5]\\d)$/i;\n\tts.regex.timeMatch = /(0?[1-9]|1[0-2]):([0-5]\\d)(\\s[AP]M)|((?:[01]\\d|[2][0-4]):[0-5]\\d)/i;\n\tts.addParser({\n\t\tid : 'time',\n\t\tis : function( str ) {\n\t\t\treturn ts.regex.timeTest.test( str );\n\t\t},\n\t\tformat : function( str ) {\n\t\t\t// isolate time... ignore month, day and year\n\t\t\tvar temp,\n\t\t\t\ttimePart = ( str || '' ).match( ts.regex.timeMatch ),\n\t\t\t\torig = new Date( str ),\n\t\t\t\t// no time component? default to 00:00 by leaving it out, but only if str is defined\n\t\t\t\ttime = str && ( timePart !== null ? timePart[ 0 ] : '00:00 AM' ),\n\t\t\t\tdate = time ? new Date( '2000/01/01 ' + time.replace( ts.regex.dateReplace, '$1 $2' ) ) : time;\n\t\t\tif ( date instanceof Date && isFinite( date ) ) {\n\t\t\t\ttemp = orig instanceof Date && isFinite( orig ) ? orig.getTime() : 0;\n\t\t\t\t// if original string was a valid date, add it to the decimal so the column sorts in some kind of order\n\t\t\t\t// luckily new Date() ignores the decimals\n\t\t\t\treturn temp ? parseFloat( date.getTime() + '.' + orig.getTime() ) : date.getTime();\n\t\t\t}\n\t\t\treturn str;\n\t\t},\n\t\ttype : 'numeric'\n\t});\n\n\tts.addParser({\n\t\tid : 'metadata',\n\t\tis : function() {\n\t\t\treturn false;\n\t\t},\n\t\tformat : function( str, table, cell ) {\n\t\t\tvar c = table.config,\n\t\t\tp = ( !c.parserMetadataName ) ? 'sortValue' : c.parserMetadataName;\n\t\t\treturn $( cell ).metadata()[ p ];\n\t\t},\n\t\ttype : 'numeric'\n\t});\n\n\t/*\n\t\t██████ ██████ █████▄ █████▄ ▄████▄\n\t\t  ▄█▀  ██▄▄   ██▄▄██ ██▄▄██ ██▄▄██\n\t\t▄█▀    ██▀▀   ██▀▀██ ██▀▀█  ██▀▀██\n\t\t██████ ██████ █████▀ ██  ██ ██  ██\n\t\t*/\n\t// add default widgets\n\tts.addWidget({\n\t\tid : 'zebra',\n\t\tpriority : 90,\n\t\tformat : function( table, c, wo ) {\n\t\t\tvar $visibleRows, $row, count, isEven, tbodyIndex, rowIndex, len,\n\t\t\t\tchild = new RegExp( c.cssChildRow, 'i' ),\n\t\t\t\t$tbodies = c.$tbodies.add( $( c.namespace + '_extra_table' ).children( 'tbody:not(.' + c.cssInfoBlock + ')' ) );\n\t\t\tfor ( tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++ ) {\n\t\t\t\t// loop through the visible rows\n\t\t\t\tcount = 0;\n\t\t\t\t$visibleRows = $tbodies.eq( tbodyIndex ).children( 'tr:visible' ).not( c.selectorRemove );\n\t\t\t\tlen = $visibleRows.length;\n\t\t\t\tfor ( rowIndex = 0; rowIndex < len; rowIndex++ ) {\n\t\t\t\t\t$row = $visibleRows.eq( rowIndex );\n\t\t\t\t\t// style child rows the same way the parent row was styled\n\t\t\t\t\tif ( !child.test( $row[ 0 ].className ) ) { count++; }\n\t\t\t\t\tisEven = ( count % 2 === 0 );\n\t\t\t\t\t$row\n\t\t\t\t\t\t.removeClass( wo.zebra[ isEven ? 1 : 0 ] )\n\t\t\t\t\t\t.addClass( wo.zebra[ isEven ? 0 : 1 ] );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tremove : function( table, c, wo, refreshing ) {\n\t\t\tif ( refreshing ) { return; }\n\t\t\tvar tbodyIndex, $tbody,\n\t\t\t\t$tbodies = c.$tbodies,\n\t\t\t\ttoRemove = ( wo.zebra || [ 'even', 'odd' ] ).join( ' ' );\n\t\t\tfor ( tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++ ) {\n\t\t\t\t$tbody = ts.processTbody( table, $tbodies.eq( tbodyIndex ), true ); // remove tbody\n\t\t\t\t$tbody.children().removeClass( toRemove );\n\t\t\t\tts.processTbody( table, $tbody, false ); // restore tbody\n\t\t\t}\n\t\t}\n\t});\n\n})( jQuery );\n\n/*! Widget: storage - updated 2018-03-18 (v2.30.0) */\n/*global JSON:false */\n;(function ($, window, document) {\n\t'use strict';\n\n\tvar ts = $.tablesorter || {};\n\n\t// update defaults for validator; these values must be falsy!\n\t$.extend(true, ts.defaults, {\n\t\tfixedUrl: '',\n\t\twidgetOptions: {\n\t\t\tstorage_fixedUrl: '',\n\t\t\tstorage_group: '',\n\t\t\tstorage_page: '',\n\t\t\tstorage_storageType: '',\n\t\t\tstorage_tableId: '',\n\t\t\tstorage_useSessionStorage: ''\n\t\t}\n\t});\n\n\t// *** Store data in local storage, with a cookie fallback ***\n\t/* IE7 needs JSON library for JSON.stringify - (http://caniuse.com/#search=json)\n\t   if you need it, then include https://github.com/douglascrockford/JSON-js\n\n\t   $.parseJSON is not available is jQuery versions older than 1.4.1, using older\n\t   versions will only allow storing information for one page at a time\n\n\t   // *** Save data (JSON format only) ***\n\t   // val must be valid JSON... use http://jsonlint.com/ to ensure it is valid\n\t   var val = { \"mywidget\" : \"data1\" }; // valid JSON uses double quotes\n\t   // $.tablesorter.storage(table, key, val);\n\t   $.tablesorter.storage(table, 'tablesorter-mywidget', val);\n\n\t   // *** Get data: $.tablesorter.storage(table, key); ***\n\t   v = $.tablesorter.storage(table, 'tablesorter-mywidget');\n\t   // val may be empty, so also check for your data\n\t   val = (v && v.hasOwnProperty('mywidget')) ? v.mywidget : '';\n\t   alert(val); // 'data1' if saved, or '' if not\n\t*/\n\tts.storage = function(table, key, value, options) {\n\t\ttable = $(table)[0];\n\t\tvar cookieIndex, cookies, date,\n\t\t\thasStorage = false,\n\t\t\tvalues = {},\n\t\t\tc = table.config,\n\t\t\two = c && c.widgetOptions,\n\t\t\tdebug = ts.debug(c, 'storage'),\n\t\t\tstorageType = (\n\t\t\t\t( options && options.storageType ) || ( wo && wo.storage_storageType )\n\t\t\t).toString().charAt(0).toLowerCase(),\n\t\t\t// deprecating \"useSessionStorage\"; any storageType setting overrides it\n\t\t\tsession = storageType ? '' :\n\t\t\t\t( options && options.useSessionStorage ) || ( wo && wo.storage_useSessionStorage ),\n\t\t\t$table = $(table),\n\t\t\t// id from (1) options ID, (2) table 'data-table-group' attribute, (3) widgetOptions.storage_tableId,\n\t\t\t// (4) table ID, then (5) table index\n\t\t\tid = options && options.id ||\n\t\t\t\t$table.attr( options && options.group || wo && wo.storage_group || 'data-table-group') ||\n\t\t\t\two && wo.storage_tableId || table.id || $('.tablesorter').index( $table ),\n\t\t\t// url from (1) options url, (2) table 'data-table-page' attribute, (3) widgetOptions.storage_fixedUrl,\n\t\t\t// (4) table.config.fixedUrl (deprecated), then (5) window location path\n\t\t\turl = options && options.url ||\n\t\t\t\t$table.attr(options && options.page || wo && wo.storage_page || 'data-table-page') ||\n\t\t\t\two && wo.storage_fixedUrl || c && c.fixedUrl || window.location.pathname;\n\n\t\t// skip if using cookies\n\t\tif (storageType !== 'c') {\n\t\t\tstorageType = (storageType === 's' || session) ? 'sessionStorage' : 'localStorage';\n\t\t\t// https://gist.github.com/paulirish/5558557\n\t\t\tif (storageType in window) {\n\t\t\t\ttry {\n\t\t\t\t\twindow[storageType].setItem('_tmptest', 'temp');\n\t\t\t\t\thasStorage = true;\n\t\t\t\t\twindow[storageType].removeItem('_tmptest');\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.warn( storageType + ' is not supported in this browser' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (debug) {\n\t\t\tconsole.log('Storage >> Using', hasStorage ? storageType : 'cookies');\n\t\t}\n\t\t// *** get value ***\n\t\tif ($.parseJSON) {\n\t\t\tif (hasStorage) {\n\t\t\t\tvalues = $.parseJSON( window[storageType][key] || 'null' ) || {};\n\t\t\t} else {\n\t\t\t\t// old browser, using cookies\n\t\t\t\tcookies = document.cookie.split(/[;\\s|=]/);\n\t\t\t\t// add one to get from the key to the value\n\t\t\t\tcookieIndex = $.inArray(key, cookies) + 1;\n\t\t\t\tvalues = (cookieIndex !== 0) ? $.parseJSON(cookies[cookieIndex] || 'null') || {} : {};\n\t\t\t}\n\t\t}\n\t\t// allow value to be an empty string too\n\t\tif (typeof value !== 'undefined' && window.JSON && JSON.hasOwnProperty('stringify')) {\n\t\t\t// add unique identifiers = url pathname > table ID/index on page > data\n\t\t\tif (!values[url]) {\n\t\t\t\tvalues[url] = {};\n\t\t\t}\n\t\t\tvalues[url][id] = value;\n\t\t\t// *** set value ***\n\t\t\tif (hasStorage) {\n\t\t\t\twindow[storageType][key] = JSON.stringify(values);\n\t\t\t} else {\n\t\t\t\tdate = new Date();\n\t\t\t\tdate.setTime(date.getTime() + (31536e+6)); // 365 days\n\t\t\t\tdocument.cookie = key + '=' + (JSON.stringify(values)).replace(/\\\"/g, '\\\"') + '; expires=' + date.toGMTString() + '; path=/';\n\t\t\t}\n\t\t} else {\n\t\t\treturn values && values[url] ? values[url][id] : '';\n\t\t}\n\t};\n\n})(jQuery, window, document);\n\n/*! Widget: uitheme - updated 2018-03-18 (v2.30.0) */\n;(function ($) {\n\t'use strict';\n\tvar ts = $.tablesorter || {};\n\n\tts.themes = {\n\t\t'bootstrap' : {\n\t\t\ttable        : 'table table-bordered table-striped',\n\t\t\tcaption      : 'caption',\n\t\t\t// header class names\n\t\t\theader       : 'bootstrap-header', // give the header a gradient background (theme.bootstrap_2.css)\n\t\t\tsortNone     : '',\n\t\t\tsortAsc      : '',\n\t\t\tsortDesc     : '',\n\t\t\tactive       : '', // applied when column is sorted\n\t\t\thover        : '', // custom css required - a defined bootstrap style may not override other classes\n\t\t\t// icon class names\n\t\t\ticons        : '', // add 'bootstrap-icon-white' to make them white; this icon class is added to the <i> in the header\n\t\t\ticonSortNone : 'bootstrap-icon-unsorted', // class name added to icon when column is not sorted\n\t\t\ticonSortAsc  : 'glyphicon glyphicon-chevron-up', // class name added to icon when column has ascending sort\n\t\t\ticonSortDesc : 'glyphicon glyphicon-chevron-down', // class name added to icon when column has descending sort\n\t\t\tfilterRow    : '', // filter row class\n\t\t\tfooterRow    : '',\n\t\t\tfooterCells  : '',\n\t\t\teven         : '', // even row zebra striping\n\t\t\todd          : ''  // odd row zebra striping\n\t\t},\n\t\t'jui' : {\n\t\t\ttable        : 'ui-widget ui-widget-content ui-corner-all', // table classes\n\t\t\tcaption      : 'ui-widget-content',\n\t\t\t// header class names\n\t\t\theader       : 'ui-widget-header ui-corner-all ui-state-default', // header classes\n\t\t\tsortNone     : '',\n\t\t\tsortAsc      : '',\n\t\t\tsortDesc     : '',\n\t\t\tactive       : 'ui-state-active', // applied when column is sorted\n\t\t\thover        : 'ui-state-hover',  // hover class\n\t\t\t// icon class names\n\t\t\ticons        : 'ui-icon', // icon class added to the <i> in the header\n\t\t\ticonSortNone : 'ui-icon-carat-2-n-s ui-icon-caret-2-n-s', // class name added to icon when column is not sorted\n\t\t\ticonSortAsc  : 'ui-icon-carat-1-n ui-icon-caret-1-n', // class name added to icon when column has ascending sort\n\t\t\ticonSortDesc : 'ui-icon-carat-1-s ui-icon-caret-1-s', // class name added to icon when column has descending sort\n\t\t\tfilterRow    : '',\n\t\t\tfooterRow    : '',\n\t\t\tfooterCells  : '',\n\t\t\teven         : 'ui-widget-content', // even row zebra striping\n\t\t\todd          : 'ui-state-default'   // odd row zebra striping\n\t\t}\n\t};\n\n\t$.extend(ts.css, {\n\t\twrapper : 'tablesorter-wrapper' // ui theme & resizable\n\t});\n\n\tts.addWidget({\n\t\tid: 'uitheme',\n\t\tpriority: 10,\n\t\tformat: function(table, c, wo) {\n\t\t\tvar i, tmp, hdr, icon, time, $header, $icon, $tfoot, $h, oldtheme, oldremove, oldIconRmv, hasOldTheme,\n\t\t\t\tthemesAll = ts.themes,\n\t\t\t\t$table = c.$table.add( $( c.namespace + '_extra_table' ) ),\n\t\t\t\t$headers = c.$headers.add( $( c.namespace + '_extra_headers' ) ),\n\t\t\t\ttheme = c.theme || 'jui',\n\t\t\t\tthemes = themesAll[theme] || {},\n\t\t\t\tremove = $.trim( [ themes.sortNone, themes.sortDesc, themes.sortAsc, themes.active ].join( ' ' ) ),\n\t\t\t\ticonRmv = $.trim( [ themes.iconSortNone, themes.iconSortDesc, themes.iconSortAsc ].join( ' ' ) ),\n\t\t\t\tdebug = ts.debug(c, 'uitheme');\n\t\t\tif (debug) { time = new Date(); }\n\t\t\t// initialization code - run once\n\t\t\tif (!$table.hasClass('tablesorter-' + theme) || c.theme !== c.appliedTheme || !wo.uitheme_applied) {\n\t\t\t\two.uitheme_applied = true;\n\t\t\t\toldtheme = themesAll[c.appliedTheme] || {};\n\t\t\t\thasOldTheme = !$.isEmptyObject(oldtheme);\n\t\t\t\toldremove =  hasOldTheme ? [ oldtheme.sortNone, oldtheme.sortDesc, oldtheme.sortAsc, oldtheme.active ].join( ' ' ) : '';\n\t\t\t\toldIconRmv = hasOldTheme ? [ oldtheme.iconSortNone, oldtheme.iconSortDesc, oldtheme.iconSortAsc ].join( ' ' ) : '';\n\t\t\t\tif (hasOldTheme) {\n\t\t\t\t\two.zebra[0] = $.trim( ' ' + wo.zebra[0].replace(' ' + oldtheme.even, '') );\n\t\t\t\t\two.zebra[1] = $.trim( ' ' + wo.zebra[1].replace(' ' + oldtheme.odd, '') );\n\t\t\t\t\tc.$tbodies.children().removeClass( [ oldtheme.even, oldtheme.odd ].join(' ') );\n\t\t\t\t}\n\t\t\t\t// update zebra stripes\n\t\t\t\tif (themes.even) { wo.zebra[0] += ' ' + themes.even; }\n\t\t\t\tif (themes.odd) { wo.zebra[1] += ' ' + themes.odd; }\n\t\t\t\t// add caption style\n\t\t\t\t$table.children('caption')\n\t\t\t\t\t.removeClass(oldtheme.caption || '')\n\t\t\t\t\t.addClass(themes.caption);\n\t\t\t\t// add table/footer class names\n\t\t\t\t$tfoot = $table\n\t\t\t\t\t// remove other selected themes\n\t\t\t\t\t.removeClass( (c.appliedTheme ? 'tablesorter-' + (c.appliedTheme || '') : '') + ' ' + (oldtheme.table || '') )\n\t\t\t\t\t.addClass('tablesorter-' + theme + ' ' + (themes.table || '')) // add theme widget class name\n\t\t\t\t\t.children('tfoot');\n\t\t\t\tc.appliedTheme = c.theme;\n\n\t\t\t\tif ($tfoot.length) {\n\t\t\t\t\t$tfoot\n\t\t\t\t\t\t// if oldtheme.footerRow or oldtheme.footerCells are undefined, all class names are removed\n\t\t\t\t\t\t.children('tr').removeClass(oldtheme.footerRow || '').addClass(themes.footerRow)\n\t\t\t\t\t\t.children('th, td').removeClass(oldtheme.footerCells || '').addClass(themes.footerCells);\n\t\t\t\t}\n\t\t\t\t// update header classes\n\t\t\t\t$headers\n\t\t\t\t\t.removeClass( (hasOldTheme ? [ oldtheme.header, oldtheme.hover, oldremove ].join(' ') : '') || '' )\n\t\t\t\t\t.addClass(themes.header)\n\t\t\t\t\t.not('.sorter-false')\n\t\t\t\t\t.unbind('mouseenter.tsuitheme mouseleave.tsuitheme')\n\t\t\t\t\t.bind('mouseenter.tsuitheme mouseleave.tsuitheme', function(event) {\n\t\t\t\t\t\t// toggleClass with switch added in jQuery 1.3\n\t\t\t\t\t\t$(this)[ event.type === 'mouseenter' ? 'addClass' : 'removeClass' ](themes.hover || '');\n\t\t\t\t\t});\n\n\t\t\t\t$headers.each(function() {\n\t\t\t\t\tvar $this = $(this);\n\t\t\t\t\tif (!$this.find('.' + ts.css.wrapper).length) {\n\t\t\t\t\t\t// Firefox needs this inner div to position the icon & resizer correctly\n\t\t\t\t\t\t$this.wrapInner('<div class=\"' + ts.css.wrapper + '\" style=\"position:relative;height:100%;width:100%\"></div>');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (c.cssIcon) {\n\t\t\t\t\t// if c.cssIcon is '', then no <i> is added to the header\n\t\t\t\t\t$headers\n\t\t\t\t\t\t.find('.' + ts.css.icon)\n\t\t\t\t\t\t.removeClass(hasOldTheme ? [ oldtheme.icons, oldIconRmv ].join(' ') : '')\n\t\t\t\t\t\t.addClass(themes.icons || '');\n\t\t\t\t}\n\t\t\t\t// filter widget initializes after uitheme\n\t\t\t\tif (ts.hasWidget( c.table, 'filter' )) {\n\t\t\t\t\ttmp = function() {\n\t\t\t\t\t\t$table.children('thead').children('.' + ts.css.filterRow)\n\t\t\t\t\t\t\t.removeClass(hasOldTheme ? oldtheme.filterRow || '' : '')\n\t\t\t\t\t\t\t.addClass(themes.filterRow || '');\n\t\t\t\t\t};\n\t\t\t\t\tif (wo.filter_initialized) {\n\t\t\t\t\t\ttmp();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$table.one('filterInit', function() {\n\t\t\t\t\t\t\ttmp();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (i = 0; i < c.columns; i++) {\n\t\t\t\t$header = c.$headers\n\t\t\t\t\t.add($(c.namespace + '_extra_headers'))\n\t\t\t\t\t.not('.sorter-false')\n\t\t\t\t\t.filter('[data-column=\"' + i + '\"]');\n\t\t\t\t$icon = (ts.css.icon) ? $header.find('.' + ts.css.icon) : $();\n\t\t\t\t$h = $headers.not('.sorter-false').filter('[data-column=\"' + i + '\"]:last');\n\t\t\t\tif ($h.length) {\n\t\t\t\t\t$header.removeClass(remove);\n\t\t\t\t\t$icon.removeClass(iconRmv);\n\t\t\t\t\tif ($h[0].sortDisabled) {\n\t\t\t\t\t\t// no sort arrows for disabled columns!\n\t\t\t\t\t\t$icon.removeClass(themes.icons || '');\n\t\t\t\t\t} else {\n\t\t\t\t\t\thdr = themes.sortNone;\n\t\t\t\t\t\ticon = themes.iconSortNone;\n\t\t\t\t\t\tif ($h.hasClass(ts.css.sortAsc)) {\n\t\t\t\t\t\t\thdr = [ themes.sortAsc, themes.active ].join(' ');\n\t\t\t\t\t\t\ticon = themes.iconSortAsc;\n\t\t\t\t\t\t} else if ($h.hasClass(ts.css.sortDesc)) {\n\t\t\t\t\t\t\thdr = [ themes.sortDesc, themes.active ].join(' ');\n\t\t\t\t\t\t\ticon = themes.iconSortDesc;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$header.addClass(hdr);\n\t\t\t\t\t\t$icon.addClass(icon || '');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (debug) {\n\t\t\t\tconsole.log('uitheme >> Applied ' + theme + ' theme' + ts.benchmark(time));\n\t\t\t}\n\t\t},\n\t\tremove: function(table, c, wo, refreshing) {\n\t\t\tif (!wo.uitheme_applied) { return; }\n\t\t\tvar $table = c.$table,\n\t\t\t\ttheme = c.appliedTheme || 'jui',\n\t\t\t\tthemes = ts.themes[ theme ] || ts.themes.jui,\n\t\t\t\t$headers = $table.children('thead').children(),\n\t\t\t\tremove = themes.sortNone + ' ' + themes.sortDesc + ' ' + themes.sortAsc,\n\t\t\t\ticonRmv = themes.iconSortNone + ' ' + themes.iconSortDesc + ' ' + themes.iconSortAsc;\n\t\t\t$table.removeClass('tablesorter-' + theme + ' ' + themes.table);\n\t\t\two.uitheme_applied = false;\n\t\t\tif (refreshing) { return; }\n\t\t\t$table.find(ts.css.header).removeClass(themes.header);\n\t\t\t$headers\n\t\t\t\t.unbind('mouseenter.tsuitheme mouseleave.tsuitheme') // remove hover\n\t\t\t\t.removeClass(themes.hover + ' ' + remove + ' ' + themes.active)\n\t\t\t\t.filter('.' + ts.css.filterRow)\n\t\t\t\t.removeClass(themes.filterRow);\n\t\t\t$headers.find('.' + ts.css.icon).removeClass(themes.icons + ' ' + iconRmv);\n\t\t}\n\t});\n\n})(jQuery);\n\n/*! Widget: columns - updated 5/24/2017 (v2.28.11) */\n;(function ($) {\n\t'use strict';\n\tvar ts = $.tablesorter || {};\n\n\tts.addWidget({\n\t\tid: 'columns',\n\t\tpriority: 65,\n\t\toptions : {\n\t\t\tcolumns : [ 'primary', 'secondary', 'tertiary' ]\n\t\t},\n\t\tformat: function(table, c, wo) {\n\t\t\tvar $tbody, tbodyIndex, $rows, rows, $row, $cells, remove, indx,\n\t\t\t$table = c.$table,\n\t\t\t$tbodies = c.$tbodies,\n\t\t\tsortList = c.sortList,\n\t\t\tlen = sortList.length,\n\t\t\t// removed c.widgetColumns support\n\t\t\tcss = wo && wo.columns || [ 'primary', 'secondary', 'tertiary' ],\n\t\t\tlast = css.length - 1;\n\t\t\tremove = css.join(' ');\n\t\t\t// check if there is a sort (on initialization there may not be one)\n\t\t\tfor (tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++ ) {\n\t\t\t\t$tbody = ts.processTbody(table, $tbodies.eq(tbodyIndex), true); // detach tbody\n\t\t\t\t$rows = $tbody.children('tr');\n\t\t\t\t// loop through the visible rows\n\t\t\t\t$rows.each(function() {\n\t\t\t\t\t$row = $(this);\n\t\t\t\t\tif (this.style.display !== 'none') {\n\t\t\t\t\t\t// remove all columns class names\n\t\t\t\t\t\t$cells = $row.children().removeClass(remove);\n\t\t\t\t\t\t// add appropriate column class names\n\t\t\t\t\t\tif (sortList && sortList[0]) {\n\t\t\t\t\t\t\t// primary sort column class\n\t\t\t\t\t\t\t$cells.eq(sortList[0][0]).addClass(css[0]);\n\t\t\t\t\t\t\tif (len > 1) {\n\t\t\t\t\t\t\t\tfor (indx = 1; indx < len; indx++) {\n\t\t\t\t\t\t\t\t\t// secondary, tertiary, etc sort column classes\n\t\t\t\t\t\t\t\t\t$cells.eq(sortList[indx][0]).addClass( css[indx] || css[last] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tts.processTbody(table, $tbody, false);\n\t\t\t}\n\t\t\t// add classes to thead and tfoot\n\t\t\trows = wo.columns_thead !== false ? [ 'thead tr' ] : [];\n\t\t\tif (wo.columns_tfoot !== false) {\n\t\t\t\trows.push('tfoot tr');\n\t\t\t}\n\t\t\tif (rows.length) {\n\t\t\t\t$rows = $table.find( rows.join(',') ).children().removeClass(remove);\n\t\t\t\tif (len) {\n\t\t\t\t\tfor (indx = 0; indx < len; indx++) {\n\t\t\t\t\t\t// add primary. secondary, tertiary, etc sort column classes\n\t\t\t\t\t\t$rows.filter('[data-column=\"' + sortList[indx][0] + '\"]').addClass(css[indx] || css[last]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tremove: function(table, c, wo) {\n\t\t\tvar tbodyIndex, $tbody,\n\t\t\t\t$tbodies = c.$tbodies,\n\t\t\t\tremove = (wo.columns || [ 'primary', 'secondary', 'tertiary' ]).join(' ');\n\t\t\tc.$headers.removeClass(remove);\n\t\t\tc.$table.children('tfoot').children('tr').children('th, td').removeClass(remove);\n\t\t\tfor (tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++ ) {\n\t\t\t\t$tbody = ts.processTbody(table, $tbodies.eq(tbodyIndex), true); // remove tbody\n\t\t\t\t$tbody.children('tr').each(function() {\n\t\t\t\t\t$(this).children().removeClass(remove);\n\t\t\t\t});\n\t\t\t\tts.processTbody(table, $tbody, false); // restore tbody\n\t\t\t}\n\t\t}\n\t});\n\n})(jQuery);\n\n/*! Widget: filter - updated 2018-03-18 (v2.30.0) *//*\n * Requires tablesorter v2.8+ and jQuery 1.7+\n * by Rob Garrison\n */\n;( function ( $ ) {\n\t'use strict';\n\tvar tsf, tsfRegex,\n\t\tts = $.tablesorter || {},\n\t\ttscss = ts.css,\n\t\ttskeyCodes = ts.keyCodes;\n\n\t$.extend( tscss, {\n\t\tfilterRow      : 'tablesorter-filter-row',\n\t\tfilter         : 'tablesorter-filter',\n\t\tfilterDisabled : 'disabled',\n\t\tfilterRowHide  : 'hideme'\n\t});\n\n\t$.extend( tskeyCodes, {\n\t\tbackSpace : 8,\n\t\tescape : 27,\n\t\tspace : 32,\n\t\tleft : 37,\n\t\tdown : 40\n\t});\n\n\tts.addWidget({\n\t\tid: 'filter',\n\t\tpriority: 50,\n\t\toptions : {\n\t\t\tfilter_cellFilter    : '',    // css class name added to the filter cell ( string or array )\n\t\t\tfilter_childRows     : false, // if true, filter includes child row content in the search\n\t\t\tfilter_childByColumn : false, // ( filter_childRows must be true ) if true = search child rows by column; false = search all child row text grouped\n\t\t\tfilter_childWithSibs : true,  // if true, include matching child row siblings\n\t\t\tfilter_columnAnyMatch: true,  // if true, allows using '#:{query}' in AnyMatch searches ( column:query )\n\t\t\tfilter_columnFilters : true,  // if true, a filter will be added to the top of each table column\n\t\t\tfilter_cssFilter     : '',    // css class name added to the filter row & each input in the row ( tablesorter-filter is ALWAYS added )\n\t\t\tfilter_defaultAttrib : 'data-value', // data attribute in the header cell that contains the default filter value\n\t\t\tfilter_defaultFilter : {},    // add a default column filter type '~{query}' to make fuzzy searches default; '{q1} AND {q2}' to make all searches use a logical AND.\n\t\t\tfilter_excludeFilter : {},    // filters to exclude, per column\n\t\t\tfilter_external      : '',    // jQuery selector string ( or jQuery object ) of external filters\n\t\t\tfilter_filteredRow   : 'filtered', // class added to filtered rows; define in css with \"display:none\" to hide the filtered-out rows\n\t\t\tfilter_filterLabel   : 'Filter \"{{label}}\" column by...', // Aria-label added to filter input/select; see #1495\n\t\t\tfilter_formatter     : null,  // add custom filter elements to the filter row\n\t\t\tfilter_functions     : null,  // add custom filter functions using this option\n\t\t\tfilter_hideEmpty     : true,  // hide filter row when table is empty\n\t\t\tfilter_hideFilters   : false, // collapse filter row when mouse leaves the area\n\t\t\tfilter_ignoreCase    : true,  // if true, make all searches case-insensitive\n\t\t\tfilter_liveSearch    : true,  // if true, search column content while the user types ( with a delay )\n\t\t\tfilter_matchType     : { 'input': 'exact', 'select': 'exact' }, // global query settings ('exact' or 'match'); overridden by \"filter-match\" or \"filter-exact\" class\n\t\t\tfilter_onlyAvail     : 'filter-onlyAvail', // a header with a select dropdown & this class name will only show available ( visible ) options within the drop down\n\t\t\tfilter_placeholder   : { search : '', select : '' }, // default placeholder text ( overridden by any header 'data-placeholder' setting )\n\t\t\tfilter_reset         : null,  // jQuery selector string of an element used to reset the filters\n\t\t\tfilter_resetOnEsc    : true,  // Reset filter input when the user presses escape - normalized across browsers\n\t\t\tfilter_saveFilters   : false, // Use the $.tablesorter.storage utility to save the most recent filters\n\t\t\tfilter_searchDelay   : 300,   // typing delay in milliseconds before starting a search\n\t\t\tfilter_searchFiltered: true,  // allow searching through already filtered rows in special circumstances; will speed up searching in large tables if true\n\t\t\tfilter_selectSource  : null,  // include a function to return an array of values to be added to the column filter select\n\t\t\tfilter_selectSourceSeparator : '|', // filter_selectSource array text left of the separator is added to the option value, right into the option text\n\t\t\tfilter_serversideFiltering : false, // if true, must perform server-side filtering b/c client-side filtering is disabled, but the ui and events will still be used.\n\t\t\tfilter_startsWith    : false, // if true, filter start from the beginning of the cell contents\n\t\t\tfilter_useParsedData : false  // filter all data using parsed content\n\t\t},\n\t\tformat: function( table, c, wo ) {\n\t\t\tif ( !c.$table.hasClass( 'hasFilters' ) ) {\n\t\t\t\ttsf.init( table, c, wo );\n\t\t\t}\n\t\t},\n\t\tremove: function( table, c, wo, refreshing ) {\n\t\t\tvar tbodyIndex, $tbody,\n\t\t\t\t$table = c.$table,\n\t\t\t\t$tbodies = c.$tbodies,\n\t\t\t\tevents = (\n\t\t\t\t\t'addRows updateCell update updateRows updateComplete appendCache filterReset ' +\n\t\t\t\t\t'filterAndSortReset filterFomatterUpdate filterEnd search stickyHeadersInit '\n\t\t\t\t).split( ' ' ).join( c.namespace + 'filter ' );\n\t\t\t$table\n\t\t\t\t.removeClass( 'hasFilters' )\n\t\t\t\t// add filter namespace to all BUT search\n\t\t\t\t.unbind( events.replace( ts.regex.spaces, ' ' ) )\n\t\t\t\t// remove the filter row even if refreshing, because the column might have been moved\n\t\t\t\t.find( '.' + tscss.filterRow ).remove();\n\t\t\two.filter_initialized = false;\n\t\t\tif ( refreshing ) { return; }\n\t\t\tfor ( tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++ ) {\n\t\t\t\t$tbody = ts.processTbody( table, $tbodies.eq( tbodyIndex ), true ); // remove tbody\n\t\t\t\t$tbody.children().removeClass( wo.filter_filteredRow ).show();\n\t\t\t\tts.processTbody( table, $tbody, false ); // restore tbody\n\t\t\t}\n\t\t\tif ( wo.filter_reset ) {\n\t\t\t\t$( document ).undelegate( wo.filter_reset, 'click' + c.namespace + 'filter' );\n\t\t\t}\n\t\t}\n\t});\n\n\ttsf = ts.filter = {\n\n\t\t// regex used in filter 'check' functions - not for general use and not documented\n\t\tregex: {\n\t\t\tregex     : /^\\/((?:\\\\\\/|[^\\/])+)\\/([migyu]{0,5})?$/, // regex to test for regex\n\t\t\tchild     : /tablesorter-childRow/, // child row class name; this gets updated in the script\n\t\t\tfiltered  : /filtered/, // filtered (hidden) row class name; updated in the script\n\t\t\ttype      : /undefined|number/, // check type\n\t\t\texact     : /(^[\\\"\\'=]+)|([\\\"\\'=]+$)/g, // exact match (allow '==')\n\t\t\toperators : /[<>=]/g, // replace operators\n\t\t\tquery     : '(q|query)', // replace filter queries\n\t\t\twild01    : /\\?/g, // wild card match 0 or 1\n\t\t\twild0More : /\\*/g, // wild care match 0 or more\n\t\t\tquote     : /\\\"/g,\n\t\t\tisNeg1    : /(>=?\\s*-\\d)/,\n\t\t\tisNeg2    : /(<=?\\s*\\d)/\n\t\t},\n\t\t// function( c, data ) { }\n\t\t// c = table.config\n\t\t// data.$row = jQuery object of the row currently being processed\n\t\t// data.$cells = jQuery object of all cells within the current row\n\t\t// data.filters = array of filters for all columns ( some may be undefined )\n\t\t// data.filter = filter for the current column\n\t\t// data.iFilter = same as data.filter, except lowercase ( if wo.filter_ignoreCase is true )\n\t\t// data.exact = table cell text ( or parsed data if column parser enabled; may be a number & not a string )\n\t\t// data.iExact = same as data.exact, except lowercase ( if wo.filter_ignoreCase is true; may be a number & not a string )\n\t\t// data.cache = table cell text from cache, so it has been parsed ( & in all lower case if c.ignoreCase is true )\n\t\t// data.cacheArray = An array of parsed content from each table cell in the row being processed\n\t\t// data.index = column index; table = table element ( DOM )\n\t\t// data.parsed = array ( by column ) of boolean values ( from filter_useParsedData or 'filter-parsed' class )\n\t\ttypes: {\n\t\t\tor : function( c, data, vars ) {\n\t\t\t\t// look for \"|\", but not if it is inside of a regular expression\n\t\t\t\tif ( ( tsfRegex.orTest.test( data.iFilter ) || tsfRegex.orSplit.test( data.filter ) ) &&\n\t\t\t\t\t// this test for regex has potential to slow down the overall search\n\t\t\t\t\t!tsfRegex.regex.test( data.filter ) ) {\n\t\t\t\t\tvar indx, filterMatched, query, regex,\n\t\t\t\t\t\t// duplicate data but split filter\n\t\t\t\t\t\tdata2 = $.extend( {}, data ),\n\t\t\t\t\t\tfilter = data.filter.split( tsfRegex.orSplit ),\n\t\t\t\t\t\tiFilter = data.iFilter.split( tsfRegex.orSplit ),\n\t\t\t\t\t\tlen = filter.length;\n\t\t\t\t\tfor ( indx = 0; indx < len; indx++ ) {\n\t\t\t\t\t\tdata2.nestedFilters = true;\n\t\t\t\t\t\tdata2.filter = '' + ( tsf.parseFilter( c, filter[ indx ], data ) || '' );\n\t\t\t\t\t\tdata2.iFilter = '' + ( tsf.parseFilter( c, iFilter[ indx ], data ) || '' );\n\t\t\t\t\t\tquery = '(' + ( tsf.parseFilter( c, data2.filter, data ) || '' ) + ')';\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// use try/catch, because query may not be a valid regex if \"|\" is contained within a partial regex search,\n\t\t\t\t\t\t\t// e.g \"/(Alex|Aar\" -> Uncaught SyntaxError: Invalid regular expression: /(/(Alex)/: Unterminated group\n\t\t\t\t\t\t\tregex = new RegExp( data.isMatch ? query : '^' + query + '$', c.widgetOptions.filter_ignoreCase ? 'i' : '' );\n\t\t\t\t\t\t\t// filterMatched = data2.filter === '' && indx > 0 ? true\n\t\t\t\t\t\t\t// look for an exact match with the 'or' unless the 'filter-match' class is found\n\t\t\t\t\t\t\tfilterMatched = regex.test( data2.exact ) || tsf.processTypes( c, data2, vars );\n\t\t\t\t\t\t\tif ( filterMatched ) {\n\t\t\t\t\t\t\t\treturn filterMatched;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch ( error ) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// may be null from processing types\n\t\t\t\t\treturn filterMatched || false;\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t},\n\t\t\t// Look for an AND or && operator ( logical and )\n\t\t\tand : function( c, data, vars ) {\n\t\t\t\tif ( tsfRegex.andTest.test( data.filter ) ) {\n\t\t\t\t\tvar indx, filterMatched, result, query, regex,\n\t\t\t\t\t\t// duplicate data but split filter\n\t\t\t\t\t\tdata2 = $.extend( {}, data ),\n\t\t\t\t\t\tfilter = data.filter.split( tsfRegex.andSplit ),\n\t\t\t\t\t\tiFilter = data.iFilter.split( tsfRegex.andSplit ),\n\t\t\t\t\t\tlen = filter.length;\n\t\t\t\t\tfor ( indx = 0; indx < len; indx++ ) {\n\t\t\t\t\t\tdata2.nestedFilters = true;\n\t\t\t\t\t\tdata2.filter = '' + ( tsf.parseFilter( c, filter[ indx ], data ) || '' );\n\t\t\t\t\t\tdata2.iFilter = '' + ( tsf.parseFilter( c, iFilter[ indx ], data ) || '' );\n\t\t\t\t\t\tquery = ( '(' + ( tsf.parseFilter( c, data2.filter, data ) || '' ) + ')' )\n\t\t\t\t\t\t\t// replace wild cards since /(a*)/i will match anything\n\t\t\t\t\t\t\t.replace( tsfRegex.wild01, '\\\\S{1}' ).replace( tsfRegex.wild0More, '\\\\S*' );\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// use try/catch just in case RegExp is invalid\n\t\t\t\t\t\t\tregex = new RegExp( data.isMatch ? query : '^' + query + '$', c.widgetOptions.filter_ignoreCase ? 'i' : '' );\n\t\t\t\t\t\t\t// look for an exact match with the 'and' unless the 'filter-match' class is found\n\t\t\t\t\t\t\tresult = ( regex.test( data2.exact ) || tsf.processTypes( c, data2, vars ) );\n\t\t\t\t\t\t\tif ( indx === 0 ) {\n\t\t\t\t\t\t\t\tfilterMatched = result;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfilterMatched = filterMatched && result;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch ( error ) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// may be null from processing types\n\t\t\t\t\treturn filterMatched || false;\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t},\n\t\t\t// Look for regex\n\t\t\tregex: function( c, data ) {\n\t\t\t\tif ( tsfRegex.regex.test( data.filter ) ) {\n\t\t\t\t\tvar matches,\n\t\t\t\t\t\t// cache regex per column for optimal speed\n\t\t\t\t\t\tregex = data.filter_regexCache[ data.index ] || tsfRegex.regex.exec( data.filter ),\n\t\t\t\t\t\tisRegex = regex instanceof RegExp;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif ( !isRegex ) {\n\t\t\t\t\t\t\t// force case insensitive search if ignoreCase option set?\n\t\t\t\t\t\t\t// if ( c.ignoreCase && !regex[2] ) { regex[2] = 'i'; }\n\t\t\t\t\t\t\tdata.filter_regexCache[ data.index ] = regex = new RegExp( regex[1], regex[2] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatches = regex.test( data.exact );\n\t\t\t\t\t} catch ( error ) {\n\t\t\t\t\t\tmatches = false;\n\t\t\t\t\t}\n\t\t\t\t\treturn matches;\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t},\n\t\t\t// Look for operators >, >=, < or <=\n\t\t\toperators: function( c, data ) {\n\t\t\t\t// ignore empty strings... because '' < 10 is true\n\t\t\t\tif ( tsfRegex.operTest.test( data.iFilter ) && data.iExact !== '' ) {\n\t\t\t\t\tvar cachedValue, result, txt,\n\t\t\t\t\t\ttable = c.table,\n\t\t\t\t\t\tparsed = data.parsed[ data.index ],\n\t\t\t\t\t\tquery = ts.formatFloat( data.iFilter.replace( tsfRegex.operators, '' ), table ),\n\t\t\t\t\t\tparser = c.parsers[ data.index ] || {},\n\t\t\t\t\t\tsavedSearch = query;\n\t\t\t\t\t// parse filter value in case we're comparing numbers ( dates )\n\t\t\t\t\tif ( parsed || parser.type === 'numeric' ) {\n\t\t\t\t\t\ttxt = $.trim( '' + data.iFilter.replace( tsfRegex.operators, '' ) );\n\t\t\t\t\t\tresult = tsf.parseFilter( c, txt, data, true );\n\t\t\t\t\t\tquery = ( typeof result === 'number' && result !== '' && !isNaN( result ) ) ? result : query;\n\t\t\t\t\t}\n\t\t\t\t\t// iExact may be numeric - see issue #149;\n\t\t\t\t\t// check if cached is defined, because sometimes j goes out of range? ( numeric columns )\n\t\t\t\t\tif ( ( parsed || parser.type === 'numeric' ) && !isNaN( query ) &&\n\t\t\t\t\t\ttypeof data.cache !== 'undefined' ) {\n\t\t\t\t\t\tcachedValue = data.cache;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttxt = isNaN( data.iExact ) ? data.iExact.replace( ts.regex.nondigit, '' ) : data.iExact;\n\t\t\t\t\t\tcachedValue = ts.formatFloat( txt, table );\n\t\t\t\t\t}\n\t\t\t\t\tif ( tsfRegex.gtTest.test( data.iFilter ) ) {\n\t\t\t\t\t\tresult = tsfRegex.gteTest.test( data.iFilter ) ? cachedValue >= query : cachedValue > query;\n\t\t\t\t\t} else if ( tsfRegex.ltTest.test( data.iFilter ) ) {\n\t\t\t\t\t\tresult = tsfRegex.lteTest.test( data.iFilter ) ? cachedValue <= query : cachedValue < query;\n\t\t\t\t\t}\n\t\t\t\t\t// keep showing all rows if nothing follows the operator\n\t\t\t\t\tif ( !result && savedSearch === '' ) {\n\t\t\t\t\t\tresult = true;\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t},\n\t\t\t// Look for a not match\n\t\t\tnotMatch: function( c, data ) {\n\t\t\t\tif ( tsfRegex.notTest.test( data.iFilter ) ) {\n\t\t\t\t\tvar indx,\n\t\t\t\t\t\ttxt = data.iFilter.replace( '!', '' ),\n\t\t\t\t\t\tfilter = tsf.parseFilter( c, txt, data ) || '';\n\t\t\t\t\tif ( tsfRegex.exact.test( filter ) ) {\n\t\t\t\t\t\t// look for exact not matches - see #628\n\t\t\t\t\t\tfilter = filter.replace( tsfRegex.exact, '' );\n\t\t\t\t\t\treturn filter === '' ? true : $.trim( filter ) !== data.iExact;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tindx = data.iExact.search( $.trim( filter ) );\n\t\t\t\t\t\treturn filter === '' ? true :\n\t\t\t\t\t\t\t// return true if not found\n\t\t\t\t\t\t\tdata.anyMatch ? indx < 0 :\n\t\t\t\t\t\t\t// return false if found\n\t\t\t\t\t\t\t!( c.widgetOptions.filter_startsWith ? indx === 0 : indx >= 0 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t},\n\t\t\t// Look for quotes or equals to get an exact match; ignore type since iExact could be numeric\n\t\t\texact: function( c, data ) {\n\t\t\t\t/*jshint eqeqeq:false */\n\t\t\t\tif ( tsfRegex.exact.test( data.iFilter ) ) {\n\t\t\t\t\tvar txt = data.iFilter.replace( tsfRegex.exact, '' ),\n\t\t\t\t\t\tfilter = tsf.parseFilter( c, txt, data ) || '';\n\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\treturn data.anyMatch ? $.inArray( filter, data.rowArray ) >= 0 : filter == data.iExact;\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t},\n\t\t\t// Look for a range ( using ' to ' or ' - ' ) - see issue #166; thanks matzhu!\n\t\t\trange : function( c, data ) {\n\t\t\t\tif ( tsfRegex.toTest.test( data.iFilter ) ) {\n\t\t\t\t\tvar result, tmp, range1, range2,\n\t\t\t\t\t\ttable = c.table,\n\t\t\t\t\t\tindex = data.index,\n\t\t\t\t\t\tparsed = data.parsed[index],\n\t\t\t\t\t\t// make sure the dash is for a range and not indicating a negative number\n\t\t\t\t\t\tquery = data.iFilter.split( tsfRegex.toSplit );\n\n\t\t\t\t\ttmp = query[0].replace( ts.regex.nondigit, '' ) || '';\n\t\t\t\t\trange1 = ts.formatFloat( tsf.parseFilter( c, tmp, data ), table );\n\t\t\t\t\ttmp = query[1].replace( ts.regex.nondigit, '' ) || '';\n\t\t\t\t\trange2 = ts.formatFloat( tsf.parseFilter( c, tmp, data ), table );\n\t\t\t\t\t// parse filter value in case we're comparing numbers ( dates )\n\t\t\t\t\tif ( parsed || c.parsers[ index ].type === 'numeric' ) {\n\t\t\t\t\t\tresult = c.parsers[ index ].format( '' + query[0], table, c.$headers.eq( index ), index );\n\t\t\t\t\t\trange1 = ( result !== '' && !isNaN( result ) ) ? result : range1;\n\t\t\t\t\t\tresult = c.parsers[ index ].format( '' + query[1], table, c.$headers.eq( index ), index );\n\t\t\t\t\t\trange2 = ( result !== '' && !isNaN( result ) ) ? result : range2;\n\t\t\t\t\t}\n\t\t\t\t\tif ( ( parsed || c.parsers[ index ].type === 'numeric' ) && !isNaN( range1 ) && !isNaN( range2 ) ) {\n\t\t\t\t\t\tresult = data.cache;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttmp = isNaN( data.iExact ) ? data.iExact.replace( ts.regex.nondigit, '' ) : data.iExact;\n\t\t\t\t\t\tresult = ts.formatFloat( tmp, table );\n\t\t\t\t\t}\n\t\t\t\t\tif ( range1 > range2 ) {\n\t\t\t\t\t\ttmp = range1; range1 = range2; range2 = tmp; // swap\n\t\t\t\t\t}\n\t\t\t\t\treturn ( result >= range1 && result <= range2 ) || ( range1 === '' || range2 === '' );\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t},\n\t\t\t// Look for wild card: ? = single, * = multiple, or | = logical OR\n\t\t\twild : function( c, data ) {\n\t\t\t\tif ( tsfRegex.wildOrTest.test( data.iFilter ) ) {\n\t\t\t\t\tvar query = '' + ( tsf.parseFilter( c, data.iFilter, data ) || '' );\n\t\t\t\t\t// look for an exact match with the 'or' unless the 'filter-match' class is found\n\t\t\t\t\tif ( !tsfRegex.wildTest.test( query ) && data.nestedFilters ) {\n\t\t\t\t\t\tquery = data.isMatch ? query : '^(' + query + ')$';\n\t\t\t\t\t}\n\t\t\t\t\t// parsing the filter may not work properly when using wildcards =/\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn new RegExp(\n\t\t\t\t\t\t\tquery.replace( tsfRegex.wild01, '\\\\S{1}' ).replace( tsfRegex.wild0More, '\\\\S*' ),\n\t\t\t\t\t\t\tc.widgetOptions.filter_ignoreCase ? 'i' : ''\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.test( data.exact );\n\t\t\t\t\t} catch ( error ) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t},\n\t\t\t// fuzzy text search; modified from https://github.com/mattyork/fuzzy ( MIT license )\n\t\t\tfuzzy: function( c, data ) {\n\t\t\t\tif ( tsfRegex.fuzzyTest.test( data.iFilter ) ) {\n\t\t\t\t\tvar indx,\n\t\t\t\t\t\tpatternIndx = 0,\n\t\t\t\t\t\tlen = data.iExact.length,\n\t\t\t\t\t\ttxt = data.iFilter.slice( 1 ),\n\t\t\t\t\t\tpattern = tsf.parseFilter( c, txt, data ) || '';\n\t\t\t\t\tfor ( indx = 0; indx < len; indx++ ) {\n\t\t\t\t\t\tif ( data.iExact[ indx ] === pattern[ patternIndx ] ) {\n\t\t\t\t\t\t\tpatternIndx += 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn patternIndx === pattern.length;\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t},\n\t\tinit: function( table ) {\n\t\t\t// filter language options\n\t\t\tts.language = $.extend( true, {}, {\n\t\t\t\tto  : 'to',\n\t\t\t\tor  : 'or',\n\t\t\t\tand : 'and'\n\t\t\t}, ts.language );\n\n\t\t\tvar options, string, txt, $header, column, val, fxn, noSelect,\n\t\t\t\tc = table.config,\n\t\t\t\two = c.widgetOptions,\n\t\t\t\tprocessStr = function(prefix, str, suffix) {\n\t\t\t\t\tstr = str.trim();\n\t\t\t\t\t// don't include prefix/suffix if str is empty\n\t\t\t\t\treturn str === '' ? '' : (prefix || '') + str + (suffix || '');\n\t\t\t\t};\n\t\t\tc.$table.addClass( 'hasFilters' );\n\t\t\tc.lastSearch = [];\n\n\t\t\t// define timers so using clearTimeout won't cause an undefined error\n\t\t\two.filter_searchTimer = null;\n\t\t\two.filter_initTimer = null;\n\t\t\two.filter_formatterCount = 0;\n\t\t\two.filter_formatterInit = [];\n\t\t\two.filter_anyColumnSelector = '[data-column=\"all\"],[data-column=\"any\"]';\n\t\t\two.filter_multipleColumnSelector = '[data-column*=\"-\"],[data-column*=\",\"]';\n\n\t\t\tval = '\\\\{' + tsfRegex.query + '\\\\}';\n\t\t\t$.extend( tsfRegex, {\n\t\t\t\tchild : new RegExp( c.cssChildRow ),\n\t\t\t\tfiltered : new RegExp( wo.filter_filteredRow ),\n\t\t\t\talreadyFiltered : new RegExp( '(\\\\s+(-' + processStr('|', ts.language.or) + processStr('|', ts.language.to) + ')\\\\s+)', 'i' ),\n\t\t\t\ttoTest : new RegExp( '\\\\s+(-' + processStr('|', ts.language.to) + ')\\\\s+', 'i' ),\n\t\t\t\ttoSplit : new RegExp( '(?:\\\\s+(?:-' + processStr('|', ts.language.to) + ')\\\\s+)', 'gi' ),\n\t\t\t\tandTest : new RegExp( '\\\\s+(' + processStr('', ts.language.and, '|') + '&&)\\\\s+', 'i' ),\n\t\t\t\tandSplit : new RegExp( '(?:\\\\s+(?:' + processStr('', ts.language.and, '|') + '&&)\\\\s+)', 'gi' ),\n\t\t\t\torTest : new RegExp( '(\\\\|' + processStr('|\\\\s+', ts.language.or, '\\\\s+') + ')', 'i' ),\n\t\t\t\torSplit : new RegExp( '(?:\\\\|' + processStr('|\\\\s+(?:', ts.language.or, ')\\\\s+') + ')', 'gi' ),\n\t\t\t\tiQuery : new RegExp( val, 'i' ),\n\t\t\t\tigQuery : new RegExp( val, 'ig' ),\n\t\t\t\toperTest : /^[<>]=?/,\n\t\t\t\tgtTest  : />/,\n\t\t\t\tgteTest : />=/,\n\t\t\t\tltTest  : /</,\n\t\t\t\tlteTest : /<=/,\n\t\t\t\tnotTest : /^\\!/,\n\t\t\t\twildOrTest : /[\\?\\*\\|]/,\n\t\t\t\twildTest : /\\?\\*/,\n\t\t\t\tfuzzyTest : /^~/,\n\t\t\t\texactTest : /[=\\\"\\|!]/\n\t\t\t});\n\n\t\t\t// don't build filter row if columnFilters is false or all columns are set to 'filter-false'\n\t\t\t// see issue #156\n\t\t\tval = c.$headers.filter( '.filter-false, .parser-false' ).length;\n\t\t\tif ( wo.filter_columnFilters !== false && val !== c.$headers.length ) {\n\t\t\t\t// build filter row\n\t\t\t\ttsf.buildRow( table, c, wo );\n\t\t\t}\n\n\t\t\ttxt = 'addRows updateCell update updateRows updateComplete appendCache filterReset ' +\n\t\t\t\t'filterAndSortReset filterResetSaved filterEnd search '.split( ' ' ).join( c.namespace + 'filter ' );\n\t\t\tc.$table.bind( txt, function( event, filter ) {\n\t\t\t\tval = wo.filter_hideEmpty &&\n\t\t\t\t\t$.isEmptyObject( c.cache ) &&\n\t\t\t\t\t!( c.delayInit && event.type === 'appendCache' );\n\t\t\t\t// hide filter row using the 'filtered' class name\n\t\t\t\tc.$table.find( '.' + tscss.filterRow ).toggleClass( wo.filter_filteredRow, val ); // fixes #450\n\t\t\t\tif ( !/(search|filter)/.test( event.type ) ) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\ttsf.buildDefault( table, true );\n\t\t\t\t}\n\t\t\t\t// Add filterAndSortReset - see #1361\n\t\t\t\tif ( event.type === 'filterReset' || event.type === 'filterAndSortReset' ) {\n\t\t\t\t\tc.$table.find( '.' + tscss.filter ).add( wo.filter_$externalFilters ).val( '' );\n\t\t\t\t\tif ( event.type === 'filterAndSortReset' ) {\n\t\t\t\t\t\tts.sortReset( this.config, function() {\n\t\t\t\t\t\t\ttsf.searching( table, [] );\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttsf.searching( table, [] );\n\t\t\t\t\t}\n\t\t\t\t} else if ( event.type === 'filterResetSaved' ) {\n\t\t\t\t\tts.storage( table, 'tablesorter-filters', '' );\n\t\t\t\t} else if ( event.type === 'filterEnd' ) {\n\t\t\t\t\ttsf.buildDefault( table, true );\n\t\t\t\t} else {\n\t\t\t\t\t// send false argument to force a new search; otherwise if the filter hasn't changed,\n\t\t\t\t\t// it will return\n\t\t\t\t\tfilter = event.type === 'search' ? filter :\n\t\t\t\t\t\tevent.type === 'updateComplete' ? c.$table.data( 'lastSearch' ) : '';\n\t\t\t\t\tif ( /(update|add)/.test( event.type ) && event.type !== 'updateComplete' ) {\n\t\t\t\t\t\t// force a new search since content has changed\n\t\t\t\t\t\tc.lastCombinedFilter = null;\n\t\t\t\t\t\tc.lastSearch = [];\n\t\t\t\t\t\t// update filterFormatters after update (& small delay) - Fixes #1237\n\t\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\tc.$table.triggerHandler( 'filterFomatterUpdate' );\n\t\t\t\t\t\t}, 100);\n\t\t\t\t\t}\n\t\t\t\t\t// pass true ( skipFirst ) to prevent the tablesorter.setFilters function from skipping the first\n\t\t\t\t\t// input ensures all inputs are updated when a search is triggered on the table\n\t\t\t\t\t// $( 'table' ).trigger( 'search', [...] );\n\t\t\t\t\ttsf.searching( table, filter, true );\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\n\t\t\t// reset button/link\n\t\t\tif ( wo.filter_reset ) {\n\t\t\t\tif ( wo.filter_reset instanceof $ ) {\n\t\t\t\t\t// reset contains a jQuery object, bind to it\n\t\t\t\t\two.filter_reset.click( function() {\n\t\t\t\t\t\tc.$table.triggerHandler( 'filterReset' );\n\t\t\t\t\t});\n\t\t\t\t} else if ( $( wo.filter_reset ).length ) {\n\t\t\t\t\t// reset is a jQuery selector, use event delegation\n\t\t\t\t\t$( document )\n\t\t\t\t\t\t.undelegate( wo.filter_reset, 'click' + c.namespace + 'filter' )\n\t\t\t\t\t\t.delegate( wo.filter_reset, 'click' + c.namespace + 'filter', function() {\n\t\t\t\t\t\t\t// trigger a reset event, so other functions ( filter_formatter ) know when to reset\n\t\t\t\t\t\t\tc.$table.triggerHandler( 'filterReset' );\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( wo.filter_functions ) {\n\t\t\t\tfor ( column = 0; column < c.columns; column++ ) {\n\t\t\t\t\tfxn = ts.getColumnData( table, wo.filter_functions, column );\n\t\t\t\t\tif ( fxn ) {\n\t\t\t\t\t\t// remove 'filter-select' from header otherwise the options added here are replaced with\n\t\t\t\t\t\t// all options\n\t\t\t\t\t\t$header = c.$headerIndexed[ column ].removeClass( 'filter-select' );\n\t\t\t\t\t\t// don't build select if 'filter-false' or 'parser-false' set\n\t\t\t\t\t\tnoSelect = !( $header.hasClass( 'filter-false' ) || $header.hasClass( 'parser-false' ) );\n\t\t\t\t\t\toptions = '';\n\t\t\t\t\t\tif ( fxn === true && noSelect ) {\n\t\t\t\t\t\t\ttsf.buildSelect( table, column );\n\t\t\t\t\t\t} else if ( typeof fxn === 'object' && noSelect ) {\n\t\t\t\t\t\t\t// add custom drop down list\n\t\t\t\t\t\t\tfor ( string in fxn ) {\n\t\t\t\t\t\t\t\tif ( typeof string === 'string' ) {\n\t\t\t\t\t\t\t\t\toptions += options === '' ?\n\t\t\t\t\t\t\t\t\t\t'<option value=\"\">' +\n\t\t\t\t\t\t\t\t\t\t\t( $header.data( 'placeholder' ) ||\n\t\t\t\t\t\t\t\t\t\t\t\t$header.attr( 'data-placeholder' ) ||\n\t\t\t\t\t\t\t\t\t\t\t\two.filter_placeholder.select ||\n\t\t\t\t\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t\t\t\t\t\t) +\n\t\t\t\t\t\t\t\t\t\t'</option>' : '';\n\t\t\t\t\t\t\t\t\tval = string;\n\t\t\t\t\t\t\t\t\ttxt = string;\n\t\t\t\t\t\t\t\t\tif ( string.indexOf( wo.filter_selectSourceSeparator ) >= 0 ) {\n\t\t\t\t\t\t\t\t\t\tval = string.split( wo.filter_selectSourceSeparator );\n\t\t\t\t\t\t\t\t\t\ttxt = val[1];\n\t\t\t\t\t\t\t\t\t\tval = val[0];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\toptions += '<option ' +\n\t\t\t\t\t\t\t\t\t\t( txt === val ? '' : 'data-function-name=\"' + string + '\" ' ) +\n\t\t\t\t\t\t\t\t\t\t'value=\"' + val + '\">' + txt + '</option>';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tc.$table\n\t\t\t\t\t\t\t\t.find( 'thead' )\n\t\t\t\t\t\t\t\t.find( 'select.' + tscss.filter + '[data-column=\"' + column + '\"]' )\n\t\t\t\t\t\t\t\t.append( options );\n\t\t\t\t\t\t\ttxt = wo.filter_selectSource;\n\t\t\t\t\t\t\tfxn = typeof txt === 'function' ? true : ts.getColumnData( table, txt, column );\n\t\t\t\t\t\t\tif ( fxn ) {\n\t\t\t\t\t\t\t\t// updating so the extra options are appended\n\t\t\t\t\t\t\t\ttsf.buildSelect( c.table, column, '', true, $header.hasClass( wo.filter_onlyAvail ) );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// not really updating, but if the column has both the 'filter-select' class &\n\t\t\t// filter_functions set to true, it would append the same options twice.\n\t\t\ttsf.buildDefault( table, true );\n\n\t\t\ttsf.bindSearch( table, c.$table.find( '.' + tscss.filter ), true );\n\t\t\tif ( wo.filter_external ) {\n\t\t\t\ttsf.bindSearch( table, wo.filter_external );\n\t\t\t}\n\n\t\t\tif ( wo.filter_hideFilters ) {\n\t\t\t\ttsf.hideFilters( c );\n\t\t\t}\n\n\t\t\t// show processing icon\n\t\t\tif ( c.showProcessing ) {\n\t\t\t\ttxt = 'filterStart filterEnd '.split( ' ' ).join( c.namespace + 'filter-sp ' );\n\t\t\t\tc.$table\n\t\t\t\t\t.unbind( txt.replace( ts.regex.spaces, ' ' ) )\n\t\t\t\t\t.bind( txt, function( event, columns ) {\n\t\t\t\t\t// only add processing to certain columns to all columns\n\t\t\t\t\t$header = ( columns ) ?\n\t\t\t\t\t\tc.$table\n\t\t\t\t\t\t\t.find( '.' + tscss.header )\n\t\t\t\t\t\t\t.filter( '[data-column]' )\n\t\t\t\t\t\t\t.filter( function() {\n\t\t\t\t\t\t\t\treturn columns[ $( this ).data( 'column' ) ] !== '';\n\t\t\t\t\t\t\t}) : '';\n\t\t\t\t\tts.isProcessing( table, event.type === 'filterStart', columns ? $header : '' );\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// set filtered rows count ( intially unfiltered )\n\t\t\tc.filteredRows = c.totalRows;\n\n\t\t\t// add default values\n\t\t\ttxt = 'tablesorter-initialized pagerBeforeInitialized '.split( ' ' ).join( c.namespace + 'filter ' );\n\t\t\tc.$table\n\t\t\t.unbind( txt.replace( ts.regex.spaces, ' ' ) )\n\t\t\t.bind( txt, function() {\n\t\t\t\ttsf.completeInit( this );\n\t\t\t});\n\t\t\t// if filter widget is added after pager has initialized; then set filter init flag\n\t\t\tif ( c.pager && c.pager.initialized && !wo.filter_initialized ) {\n\t\t\t\tc.$table.triggerHandler( 'filterFomatterUpdate' );\n\t\t\t\tsetTimeout( function() {\n\t\t\t\t\ttsf.filterInitComplete( c );\n\t\t\t\t}, 100 );\n\t\t\t} else if ( !wo.filter_initialized ) {\n\t\t\t\ttsf.completeInit( table );\n\t\t\t}\n\t\t},\n\t\tcompleteInit: function( table ) {\n\t\t\t// redefine 'c' & 'wo' so they update properly inside this callback\n\t\t\tvar c = table.config,\n\t\t\t\two = c.widgetOptions,\n\t\t\t\tfilters = tsf.setDefaults( table, c, wo ) || [];\n\t\t\tif ( filters.length ) {\n\t\t\t\t// prevent delayInit from triggering a cache build if filters are empty\n\t\t\t\tif ( !( c.delayInit && filters.join( '' ) === '' ) ) {\n\t\t\t\t\tts.setFilters( table, filters, true );\n\t\t\t\t}\n\t\t\t}\n\t\t\tc.$table.triggerHandler( 'filterFomatterUpdate' );\n\t\t\t// trigger init after setTimeout to prevent multiple filterStart/End/Init triggers\n\t\t\tsetTimeout( function() {\n\t\t\t\tif ( !wo.filter_initialized ) {\n\t\t\t\t\ttsf.filterInitComplete( c );\n\t\t\t\t}\n\t\t\t}, 100 );\n\t\t},\n\n\t\t// $cell parameter, but not the config, is passed to the filter_formatters,\n\t\t// so we have to work with it instead\n\t\tformatterUpdated: function( $cell, column ) {\n\t\t\t// prevent error if $cell is undefined - see #1056\n\t\t\tvar $table = $cell && $cell.closest( 'table' );\n\t\t\tvar config = $table.length && $table[0].config,\n\t\t\t\two = config && config.widgetOptions;\n\t\t\tif ( wo && !wo.filter_initialized ) {\n\t\t\t\t// add updates by column since this function\n\t\t\t\t// may be called numerous times before initialization\n\t\t\t\two.filter_formatterInit[ column ] = 1;\n\t\t\t}\n\t\t},\n\t\tfilterInitComplete: function( c ) {\n\t\t\tvar indx, len,\n\t\t\t\two = c.widgetOptions,\n\t\t\t\tcount = 0,\n\t\t\t\tcompleted = function() {\n\t\t\t\t\two.filter_initialized = true;\n\t\t\t\t\t// update lastSearch - it gets cleared often\n\t\t\t\t\tc.lastSearch = c.$table.data( 'lastSearch' );\n\t\t\t\t\tc.$table.triggerHandler( 'filterInit', c );\n\t\t\t\t\ttsf.findRows( c.table, c.lastSearch || [] );\n\t\t\t\t\tif (ts.debug(c, 'filter')) {\n\t\t\t\t\t\tconsole.log('Filter >> Widget initialized');\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\tif ( $.isEmptyObject( wo.filter_formatter ) ) {\n\t\t\t\tcompleted();\n\t\t\t} else {\n\t\t\t\tlen = wo.filter_formatterInit.length;\n\t\t\t\tfor ( indx = 0; indx < len; indx++ ) {\n\t\t\t\t\tif ( wo.filter_formatterInit[ indx ] === 1 ) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tclearTimeout( wo.filter_initTimer );\n\t\t\t\tif ( !wo.filter_initialized && count === wo.filter_formatterCount ) {\n\t\t\t\t\t// filter widget initialized\n\t\t\t\t\tcompleted();\n\t\t\t\t} else if ( !wo.filter_initialized ) {\n\t\t\t\t\t// fall back in case a filter_formatter doesn't call\n\t\t\t\t\t// $.tablesorter.filter.formatterUpdated( $cell, column ), and the count is off\n\t\t\t\t\two.filter_initTimer = setTimeout( function() {\n\t\t\t\t\t\tcompleted();\n\t\t\t\t\t}, 500 );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t// encode or decode filters for storage; see #1026\n\t\tprocessFilters: function( filters, encode ) {\n\t\t\tvar indx,\n\t\t\t\t// fixes #1237; previously returning an encoded \"filters\" value\n\t\t\t\tresult = [],\n\t\t\t\tmode = encode ? encodeURIComponent : decodeURIComponent,\n\t\t\t\tlen = filters.length;\n\t\t\tfor ( indx = 0; indx < len; indx++ ) {\n\t\t\t\tif ( filters[ indx ] ) {\n\t\t\t\t\tresult[ indx ] = mode( filters[ indx ] );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t},\n\t\tsetDefaults: function( table, c, wo ) {\n\t\t\tvar isArray, saved, indx, col, $filters,\n\t\t\t\t// get current ( default ) filters\n\t\t\t\tfilters = ts.getFilters( table ) || [];\n\t\t\tif ( wo.filter_saveFilters && ts.storage ) {\n\t\t\t\tsaved = ts.storage( table, 'tablesorter-filters' ) || [];\n\t\t\t\tisArray = $.isArray( saved );\n\t\t\t\t// make sure we're not just getting an empty array\n\t\t\t\tif ( !( isArray && saved.join( '' ) === '' || !isArray ) ) {\n\t\t\t\t\tfilters = tsf.processFilters( saved );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if no filters saved, then check default settings\n\t\t\tif ( filters.join( '' ) === '' ) {\n\t\t\t\t// allow adding default setting to external filters\n\t\t\t\t$filters = c.$headers.add( wo.filter_$externalFilters )\n\t\t\t\t\t.filter( '[' + wo.filter_defaultAttrib + ']' );\n\t\t\t\tfor ( indx = 0; indx <= c.columns; indx++ ) {\n\t\t\t\t\t// include data-column='all' external filters\n\t\t\t\t\tcol = indx === c.columns ? 'all' : indx;\n\t\t\t\t\tfilters[ indx ] = $filters\n\t\t\t\t\t\t.filter( '[data-column=\"' + col + '\"]' )\n\t\t\t\t\t\t.attr( wo.filter_defaultAttrib ) || filters[indx] || '';\n\t\t\t\t}\n\t\t\t}\n\t\t\tc.$table.data( 'lastSearch', filters );\n\t\t\treturn filters;\n\t\t},\n\t\tparseFilter: function( c, filter, data, parsed ) {\n\t\t\treturn parsed || data.parsed[ data.index ] ?\n\t\t\t\tc.parsers[ data.index ].format( filter, c.table, [], data.index ) :\n\t\t\t\tfilter;\n\t\t},\n\t\tbuildRow: function( table, c, wo ) {\n\t\t\tvar $filter, col, column, $header, makeSelect, disabled, name, ffxn, tmp,\n\t\t\t\t// c.columns defined in computeThIndexes()\n\t\t\t\tcellFilter = wo.filter_cellFilter,\n\t\t\t\tcolumns = c.columns,\n\t\t\t\tarry = $.isArray( cellFilter ),\n\t\t\t\tbuildFilter = '<tr role=\"search\" class=\"' + tscss.filterRow + ' ' + c.cssIgnoreRow + '\">';\n\t\t\tfor ( column = 0; column < columns; column++ ) {\n\t\t\t\tif ( c.$headerIndexed[ column ].length ) {\n\t\t\t\t\t// account for entire column set with colspan. See #1047\n\t\t\t\t\ttmp = c.$headerIndexed[ column ] && c.$headerIndexed[ column ][0].colSpan || 0;\n\t\t\t\t\tif ( tmp > 1 ) {\n\t\t\t\t\t\tbuildFilter += '<td data-column=\"' + column + '-' + ( column + tmp - 1 ) + '\" colspan=\"' + tmp + '\"';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuildFilter += '<td data-column=\"' + column + '\"';\n\t\t\t\t\t}\n\t\t\t\t\tif ( arry ) {\n\t\t\t\t\t\tbuildFilter += ( cellFilter[ column ] ? ' class=\"' + cellFilter[ column ] + '\"' : '' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuildFilter += ( cellFilter !== '' ? ' class=\"' + cellFilter + '\"' : '' );\n\t\t\t\t\t}\n\t\t\t\t\tbuildFilter += '></td>';\n\t\t\t\t}\n\t\t\t}\n\t\t\tc.$filters = $( buildFilter += '</tr>' )\n\t\t\t\t.appendTo( c.$table.children( 'thead' ).eq( 0 ) )\n\t\t\t\t.children( 'td' );\n\t\t\t// build each filter input\n\t\t\tfor ( column = 0; column < columns; column++ ) {\n\t\t\t\tdisabled = false;\n\t\t\t\t// assuming last cell of a column is the main column\n\t\t\t\t$header = c.$headerIndexed[ column ];\n\t\t\t\tif ( $header && $header.length ) {\n\t\t\t\t\t// $filter = c.$filters.filter( '[data-column=\"' + column + '\"]' );\n\t\t\t\t\t$filter = tsf.getColumnElm( c, c.$filters, column );\n\t\t\t\t\tffxn = ts.getColumnData( table, wo.filter_functions, column );\n\t\t\t\t\tmakeSelect = ( wo.filter_functions && ffxn && typeof ffxn !== 'function' ) ||\n\t\t\t\t\t\t$header.hasClass( 'filter-select' );\n\t\t\t\t\t// get data from jQuery data, metadata, headers option or header class name\n\t\t\t\t\tcol = ts.getColumnData( table, c.headers, column );\n\t\t\t\t\tdisabled = ts.getData( $header[0], col, 'filter' ) === 'false' ||\n\t\t\t\t\t\tts.getData( $header[0], col, 'parser' ) === 'false';\n\n\t\t\t\t\tif ( makeSelect ) {\n\t\t\t\t\t\tbuildFilter = $( '<select>' ).appendTo( $filter );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tffxn = ts.getColumnData( table, wo.filter_formatter, column );\n\t\t\t\t\t\tif ( ffxn ) {\n\t\t\t\t\t\t\two.filter_formatterCount++;\n\t\t\t\t\t\t\tbuildFilter = ffxn( $filter, column );\n\t\t\t\t\t\t\t// no element returned, so lets go find it\n\t\t\t\t\t\t\tif ( buildFilter && buildFilter.length === 0 ) {\n\t\t\t\t\t\t\t\tbuildFilter = $filter.children( 'input' );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// element not in DOM, so lets attach it\n\t\t\t\t\t\t\tif ( buildFilter && ( buildFilter.parent().length === 0 ||\n\t\t\t\t\t\t\t\t( buildFilter.parent().length && buildFilter.parent()[0] !== $filter[0] ) ) ) {\n\t\t\t\t\t\t\t\t$filter.append( buildFilter );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbuildFilter = $( '<input type=\"search\">' ).appendTo( $filter );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( buildFilter ) {\n\t\t\t\t\t\t\ttmp = $header.data( 'placeholder' ) ||\n\t\t\t\t\t\t\t\t$header.attr( 'data-placeholder' ) ||\n\t\t\t\t\t\t\t\two.filter_placeholder.search || '';\n\t\t\t\t\t\t\tbuildFilter.attr( 'placeholder', tmp );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( buildFilter ) {\n\t\t\t\t\t\t// add filter class name\n\t\t\t\t\t\tname = ( $.isArray( wo.filter_cssFilter ) ?\n\t\t\t\t\t\t\t( typeof wo.filter_cssFilter[column] !== 'undefined' ? wo.filter_cssFilter[column] || '' : '' ) :\n\t\t\t\t\t\t\two.filter_cssFilter ) || '';\n\t\t\t\t\t\t// copy data-column from table cell (it will include colspan)\n\t\t\t\t\t\tbuildFilter.addClass( tscss.filter + ' ' + name );\n\t\t\t\t\t\tname = wo.filter_filterLabel;\n\t\t\t\t\t\ttmp = name.match(/{{([^}]+?)}}/g);\n\t\t\t\t\t\tif (!tmp) {\n\t\t\t\t\t\t\ttmp = [ '{{label}}' ];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$.each(tmp, function(indx, attr) {\n\t\t\t\t\t\t\tvar regex = new RegExp(attr, 'g'),\n\t\t\t\t\t\t\t\tdata = $header.attr('data-' + attr.replace(/{{|}}/g, '')),\n\t\t\t\t\t\t\t\ttext = typeof data === 'undefined' ? $header.text() : data;\n\t\t\t\t\t\t\tname = name.replace( regex, $.trim( text ) );\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbuildFilter.attr({\n\t\t\t\t\t\t\t'data-column': $filter.attr( 'data-column' ),\n\t\t\t\t\t\t\t'aria-label': name\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif ( disabled ) {\n\t\t\t\t\t\t\tbuildFilter.attr( 'placeholder', '' ).addClass( tscss.filterDisabled )[0].disabled = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tbindSearch: function( table, $el, internal ) {\n\t\t\ttable = $( table )[0];\n\t\t\t$el = $( $el ); // allow passing a selector string\n\t\t\tif ( !$el.length ) { return; }\n\t\t\tvar tmp,\n\t\t\t\tc = table.config,\n\t\t\t\two = c.widgetOptions,\n\t\t\t\tnamespace = c.namespace + 'filter',\n\t\t\t\t$ext = wo.filter_$externalFilters;\n\t\t\tif ( internal !== true ) {\n\t\t\t\t// save anyMatch element\n\t\t\t\ttmp = wo.filter_anyColumnSelector + ',' + wo.filter_multipleColumnSelector;\n\t\t\t\two.filter_$anyMatch = $el.filter( tmp );\n\t\t\t\tif ( $ext && $ext.length ) {\n\t\t\t\t\two.filter_$externalFilters = wo.filter_$externalFilters.add( $el );\n\t\t\t\t} else {\n\t\t\t\t\two.filter_$externalFilters = $el;\n\t\t\t\t}\n\t\t\t\t// update values ( external filters added after table initialization )\n\t\t\t\tts.setFilters( table, c.$table.data( 'lastSearch' ) || [], internal === false );\n\t\t\t}\n\t\t\t// unbind events\n\t\t\ttmp = ( 'keypress keyup keydown search change input '.split( ' ' ).join( namespace + ' ' ) );\n\t\t\t$el\n\t\t\t// use data attribute instead of jQuery data since the head is cloned without including\n\t\t\t// the data/binding\n\t\t\t.attr( 'data-lastSearchTime', new Date().getTime() )\n\t\t\t.unbind( tmp.replace( ts.regex.spaces, ' ' ) )\n\t\t\t.bind( 'keydown' + namespace, function( event ) {\n\t\t\t\tif ( event.which === tskeyCodes.escape && !table.config.widgetOptions.filter_resetOnEsc ) {\n\t\t\t\t\t// prevent keypress event\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.bind( 'keyup' + namespace, function( event ) {\n\t\t\t\two = table.config.widgetOptions; // make sure \"wo\" isn't cached\n\t\t\t\tvar column = parseInt( $( this ).attr( 'data-column' ), 10 ),\n\t\t\t\t\tliveSearch = typeof wo.filter_liveSearch === 'boolean' ? wo.filter_liveSearch :\n\t\t\t\t\t\tts.getColumnData( table, wo.filter_liveSearch, column );\n\t\t\t\tif ( typeof liveSearch === 'undefined' ) {\n\t\t\t\t\tliveSearch = wo.filter_liveSearch.fallback || false;\n\t\t\t\t}\n\t\t\t\t$( this ).attr( 'data-lastSearchTime', new Date().getTime() );\n\t\t\t\t// emulate what webkit does.... escape clears the filter\n\t\t\t\tif ( event.which === tskeyCodes.escape ) {\n\t\t\t\t\t// make sure to restore the last value on escape\n\t\t\t\t\tthis.value = wo.filter_resetOnEsc ? '' : c.lastSearch[column];\n\t\t\t\t\t// don't return if the search value is empty ( all rows need to be revealed )\n\t\t\t\t} else if ( this.value !== '' && (\n\t\t\t\t\t// liveSearch can contain a min value length; ignore arrow and meta keys, but allow backspace\n\t\t\t\t\t( typeof liveSearch === 'number' && this.value.length < liveSearch ) ||\n\t\t\t\t\t// let return & backspace continue on, but ignore arrows & non-valid characters\n\t\t\t\t\t( event.which !== tskeyCodes.enter && event.which !== tskeyCodes.backSpace &&\n\t\t\t\t\t\t( event.which < tskeyCodes.space || ( event.which >= tskeyCodes.left && event.which <= tskeyCodes.down ) ) ) ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t\t// live search\n\t\t\t\t} else if ( liveSearch === false ) {\n\t\t\t\t\tif ( this.value !== '' && event.which !== tskeyCodes.enter ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// change event = no delay; last true flag tells getFilters to skip newest timed input\n\t\t\t\ttsf.searching( table, true, true, column );\n\t\t\t})\n\t\t\t// include change for select - fixes #473\n\t\t\t.bind( 'search change keypress input blur '.split( ' ' ).join( namespace + ' ' ), function( event ) {\n\t\t\t\t// don't get cached data, in case data-column changes dynamically\n\t\t\t\tvar column = parseInt( $( this ).attr( 'data-column' ), 10 ),\n\t\t\t\t\teventType = event.type,\n\t\t\t\t\tliveSearch = typeof wo.filter_liveSearch === 'boolean' ?\n\t\t\t\t\t\two.filter_liveSearch :\n\t\t\t\t\t\tts.getColumnData( table, wo.filter_liveSearch, column );\n\t\t\t\tif ( table.config.widgetOptions.filter_initialized &&\n\t\t\t\t\t// immediate search if user presses enter\n\t\t\t\t\t( event.which === tskeyCodes.enter ||\n\t\t\t\t\t\t// immediate search if a \"search\" or \"blur\" is triggered on the input\n\t\t\t\t\t\t( eventType === 'search' || eventType === 'blur' ) ||\n\t\t\t\t\t\t// change & input events must be ignored if liveSearch !== true\n\t\t\t\t\t\t( eventType === 'change' || eventType === 'input' ) &&\n\t\t\t\t\t\t// prevent search if liveSearch is a number\n\t\t\t\t\t\t( liveSearch === true || liveSearch !== true && event.target.nodeName !== 'INPUT' ) &&\n\t\t\t\t\t\t// don't allow 'change' or 'input' event to process if the input value\n\t\t\t\t\t\t// is the same - fixes #685\n\t\t\t\t\t\tthis.value !== c.lastSearch[column]\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t// init search with no delay\n\t\t\t\t\t$( this ).attr( 'data-lastSearchTime', new Date().getTime() );\n\t\t\t\t\ttsf.searching( table, eventType !== 'keypress', true, column );\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tsearching: function( table, filter, skipFirst, column ) {\n\t\t\tvar liveSearch,\n\t\t\t\two = table.config.widgetOptions;\n\t\t\tif (typeof column === 'undefined') {\n\t\t\t\t// no delay\n\t\t\t\tliveSearch = false;\n\t\t\t} else {\n\t\t\t\tliveSearch = typeof wo.filter_liveSearch === 'boolean' ?\n\t\t\t\t\two.filter_liveSearch :\n\t\t\t\t\t// get column setting, or set to fallback value, or default to false\n\t\t\t\t\tts.getColumnData( table, wo.filter_liveSearch, column );\n\t\t\t\tif ( typeof liveSearch === 'undefined' ) {\n\t\t\t\t\tliveSearch = wo.filter_liveSearch.fallback || false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tclearTimeout( wo.filter_searchTimer );\n\t\t\tif ( typeof filter === 'undefined' || filter === true ) {\n\t\t\t\t// delay filtering\n\t\t\t\two.filter_searchTimer = setTimeout( function() {\n\t\t\t\t\ttsf.checkFilters( table, filter, skipFirst );\n\t\t\t\t}, liveSearch ? wo.filter_searchDelay : 10 );\n\t\t\t} else {\n\t\t\t\t// skip delay\n\t\t\t\ttsf.checkFilters( table, filter, skipFirst );\n\t\t\t}\n\t\t},\n\t\tequalFilters: function (c, filter1, filter2) {\n\t\t\tvar indx,\n\t\t\t\tf1 = [],\n\t\t\t\tf2 = [],\n\t\t\t\tlen = c.columns + 1; // add one to include anyMatch filter\n\t\t\tfilter1 = $.isArray(filter1) ? filter1 : [];\n\t\t\tfilter2 = $.isArray(filter2) ? filter2 : [];\n\t\t\tfor (indx = 0; indx < len; indx++) {\n\t\t\t\tf1[indx] = filter1[indx] || '';\n\t\t\t\tf2[indx] = filter2[indx] || '';\n\t\t\t}\n\t\t\treturn f1.join(',') === f2.join(',');\n\t\t},\n\t\tcheckFilters: function( table, filter, skipFirst ) {\n\t\t\tvar c = table.config,\n\t\t\t\two = c.widgetOptions,\n\t\t\t\tfilterArray = $.isArray( filter ),\n\t\t\t\tfilters = ( filterArray ) ? filter : ts.getFilters( table, true ),\n\t\t\t\tcurrentFilters = filters || []; // current filter values\n\t\t\t// prevent errors if delay init is set\n\t\t\tif ( $.isEmptyObject( c.cache ) ) {\n\t\t\t\t// update cache if delayInit set & pager has initialized ( after user initiates a search )\n\t\t\t\tif ( c.delayInit && ( !c.pager || c.pager && c.pager.initialized ) ) {\n\t\t\t\t\tts.updateCache( c, function() {\n\t\t\t\t\t\ttsf.checkFilters( table, false, skipFirst );\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// add filter array back into inputs\n\t\t\tif ( filterArray ) {\n\t\t\t\tts.setFilters( table, filters, false, skipFirst !== true );\n\t\t\t\tif ( !wo.filter_initialized ) {\n\t\t\t\t\tc.lastSearch = [];\n\t\t\t\t\tc.lastCombinedFilter = '';\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( wo.filter_hideFilters ) {\n\t\t\t\t// show/hide filter row as needed\n\t\t\t\tc.$table\n\t\t\t\t\t.find( '.' + tscss.filterRow )\n\t\t\t\t\t.triggerHandler( tsf.hideFiltersCheck( c ) ? 'mouseleave' : 'mouseenter' );\n\t\t\t}\n\t\t\t// return if the last search is the same; but filter === false when updating the search\n\t\t\t// see example-widget-filter.html filter toggle buttons\n\t\t\tif ( tsf.equalFilters(c, c.lastSearch, currentFilters) && filter !== false ) {\n\t\t\t\treturn;\n\t\t\t} else if ( filter === false ) {\n\t\t\t\t// force filter refresh\n\t\t\t\tc.lastCombinedFilter = '';\n\t\t\t\tc.lastSearch = [];\n\t\t\t}\n\t\t\t// define filter inside it is false\n\t\t\tfilters = filters || [];\n\t\t\t// convert filters to strings - see #1070\n\t\t\tfilters = Array.prototype.map ?\n\t\t\t\tfilters.map( String ) :\n\t\t\t\t// for IE8 & older browsers - maybe not the best method\n\t\t\t\tfilters.join( '\\ufffd' ).split( '\\ufffd' );\n\n\t\t\tif ( wo.filter_initialized ) {\n\t\t\t\tc.$table.triggerHandler( 'filterStart', [ filters ] );\n\t\t\t}\n\t\t\tif ( c.showProcessing ) {\n\t\t\t\t// give it time for the processing icon to kick in\n\t\t\t\tsetTimeout( function() {\n\t\t\t\t\ttsf.findRows( table, filters, currentFilters );\n\t\t\t\t\treturn false;\n\t\t\t\t}, 30 );\n\t\t\t} else {\n\t\t\t\ttsf.findRows( table, filters, currentFilters );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\thideFiltersCheck: function( c ) {\n\t\t\tif (typeof c.widgetOptions.filter_hideFilters === 'function') {\n\t\t\t\tvar val = c.widgetOptions.filter_hideFilters( c );\n\t\t\t\tif (typeof val === 'boolean') {\n\t\t\t\t\treturn val;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ts.getFilters( c.$table ).join( '' ) === '';\n\t\t},\n\t\thideFilters: function( c, $table ) {\n\t\t\tvar timer;\n\t\t\t( $table || c.$table )\n\t\t\t\t.find( '.' + tscss.filterRow )\n\t\t\t\t.addClass( tscss.filterRowHide )\n\t\t\t\t.bind( 'mouseenter mouseleave', function( e ) {\n\t\t\t\t\t// save event object - http://bugs.jquery.com/ticket/12140\n\t\t\t\t\tvar event = e,\n\t\t\t\t\t\t$row = $( this );\n\t\t\t\t\tclearTimeout( timer );\n\t\t\t\t\ttimer = setTimeout( function() {\n\t\t\t\t\t\tif ( /enter|over/.test( event.type ) ) {\n\t\t\t\t\t\t\t$row.removeClass( tscss.filterRowHide );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// don't hide if input has focus\n\t\t\t\t\t\t\t// $( ':focus' ) needs jQuery 1.6+\n\t\t\t\t\t\t\tif ( $( document.activeElement ).closest( 'tr' )[0] !== $row[0] ) {\n\t\t\t\t\t\t\t\t// don't hide row if any filter has a value\n\t\t\t\t\t\t\t\t$row.toggleClass( tscss.filterRowHide, tsf.hideFiltersCheck( c ) );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 200 );\n\t\t\t\t})\n\t\t\t\t.find( 'input, select' ).bind( 'focus blur', function( e ) {\n\t\t\t\t\tvar event = e,\n\t\t\t\t\t\t$row = $( this ).closest( 'tr' );\n\t\t\t\t\tclearTimeout( timer );\n\t\t\t\t\ttimer = setTimeout( function() {\n\t\t\t\t\t\tclearTimeout( timer );\n\t\t\t\t\t\t// don't hide row if any filter has a value\n\t\t\t\t\t\t$row.toggleClass( tscss.filterRowHide, tsf.hideFiltersCheck( c ) && event.type !== 'focus' );\n\t\t\t\t\t}, 200 );\n\t\t\t\t});\n\t\t},\n\t\tdefaultFilter: function( filter, mask ) {\n\t\t\tif ( filter === '' ) { return filter; }\n\t\t\tvar regex = tsfRegex.iQuery,\n\t\t\t\tmaskLen = mask.match( tsfRegex.igQuery ).length,\n\t\t\t\tquery = maskLen > 1 ? $.trim( filter ).split( /\\s/ ) : [ $.trim( filter ) ],\n\t\t\t\tlen = query.length - 1,\n\t\t\t\tindx = 0,\n\t\t\t\tval = mask;\n\t\t\tif ( len < 1 && maskLen > 1 ) {\n\t\t\t\t// only one 'word' in query but mask has >1 slots\n\t\t\t\tquery[1] = query[0];\n\t\t\t}\n\t\t\t// replace all {query} with query words...\n\t\t\t// if query = 'Bob', then convert mask from '!{query}' to '!Bob'\n\t\t\t// if query = 'Bob Joe Frank', then convert mask '{q} OR {q}' to 'Bob OR Joe OR Frank'\n\t\t\twhile ( regex.test( val ) ) {\n\t\t\t\tval = val.replace( regex, query[indx++] || '' );\n\t\t\t\tif ( regex.test( val ) && indx < len && ( query[indx] || '' ) !== '' ) {\n\t\t\t\t\tval = mask.replace( regex, val );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn val;\n\t\t},\n\t\tgetLatestSearch: function( $input ) {\n\t\t\tif ( $input ) {\n\t\t\t\treturn $input.sort( function( a, b ) {\n\t\t\t\t\treturn $( b ).attr( 'data-lastSearchTime' ) - $( a ).attr( 'data-lastSearchTime' );\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn $input || $();\n\t\t},\n\t\tfindRange: function( c, val, ignoreRanges ) {\n\t\t\t// look for multiple columns '1-3,4-6,8' in data-column\n\t\t\tvar temp, ranges, range, start, end, singles, i, indx, len,\n\t\t\t\tcolumns = [];\n\t\t\tif ( /^[0-9]+$/.test( val ) ) {\n\t\t\t\t// always return an array\n\t\t\t\treturn [ parseInt( val, 10 ) ];\n\t\t\t}\n\t\t\t// process column range\n\t\t\tif ( !ignoreRanges && /-/.test( val ) ) {\n\t\t\t\tranges = val.match( /(\\d+)\\s*-\\s*(\\d+)/g );\n\t\t\t\tlen = ranges ? ranges.length : 0;\n\t\t\t\tfor ( indx = 0; indx < len; indx++ ) {\n\t\t\t\t\trange = ranges[indx].split( /\\s*-\\s*/ );\n\t\t\t\t\tstart = parseInt( range[0], 10 ) || 0;\n\t\t\t\t\tend = parseInt( range[1], 10 ) || ( c.columns - 1 );\n\t\t\t\t\tif ( start > end ) {\n\t\t\t\t\t\ttemp = start; start = end; end = temp; // swap\n\t\t\t\t\t}\n\t\t\t\t\tif ( end >= c.columns ) {\n\t\t\t\t\t\tend = c.columns - 1;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( ; start <= end; start++ ) {\n\t\t\t\t\t\tcolumns[ columns.length ] = start;\n\t\t\t\t\t}\n\t\t\t\t\t// remove processed range from val\n\t\t\t\t\tval = val.replace( ranges[ indx ], '' );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// process single columns\n\t\t\tif ( !ignoreRanges && /,/.test( val ) ) {\n\t\t\t\tsingles = val.split( /\\s*,\\s*/ );\n\t\t\t\tlen = singles.length;\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( singles[ i ] !== '' ) {\n\t\t\t\t\t\tindx = parseInt( singles[ i ], 10 );\n\t\t\t\t\t\tif ( indx < c.columns ) {\n\t\t\t\t\t\t\tcolumns[ columns.length ] = indx;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// return all columns\n\t\t\tif ( !columns.length ) {\n\t\t\t\tfor ( indx = 0; indx < c.columns; indx++ ) {\n\t\t\t\t\tcolumns[ columns.length ] = indx;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn columns;\n\t\t},\n\t\tgetColumnElm: function( c, $elements, column ) {\n\t\t\t// data-column may contain multiple columns '1-3,5-6,8'\n\t\t\t// replaces: c.$filters.filter( '[data-column=\"' + column + '\"]' );\n\t\t\treturn $elements.filter( function() {\n\t\t\t\tvar cols = tsf.findRange( c, $( this ).attr( 'data-column' ) );\n\t\t\t\treturn $.inArray( column, cols ) > -1;\n\t\t\t});\n\t\t},\n\t\tmultipleColumns: function( c, $input ) {\n\t\t\t// look for multiple columns '1-3,4-6,8' in data-column\n\t\t\tvar wo = c.widgetOptions,\n\t\t\t\t// only target 'all' column inputs on initialization\n\t\t\t\t// & don't target 'all' column inputs if they don't exist\n\t\t\t\ttargets = wo.filter_initialized || !$input.filter( wo.filter_anyColumnSelector ).length,\n\t\t\t\tval = $.trim( tsf.getLatestSearch( $input ).attr( 'data-column' ) || '' );\n\t\t\treturn tsf.findRange( c, val, !targets );\n\t\t},\n\t\tprocessTypes: function( c, data, vars ) {\n\t\t\tvar ffxn,\n\t\t\t\tfilterMatched = null,\n\t\t\t\tmatches = null;\n\t\t\tfor ( ffxn in tsf.types ) {\n\t\t\t\tif ( $.inArray( ffxn, vars.excludeMatch ) < 0 && matches === null ) {\n\t\t\t\t\tmatches = tsf.types[ffxn]( c, data, vars );\n\t\t\t\t\tif ( matches !== null ) {\n\t\t\t\t\t\tdata.matchedOn = ffxn;\n\t\t\t\t\t\tfilterMatched = matches;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn filterMatched;\n\t\t},\n\t\tmatchType: function( c, columnIndex ) {\n\t\t\tvar isMatch,\n\t\t\t\two = c.widgetOptions,\n\t\t\t\t$el = c.$headerIndexed[ columnIndex ];\n\t\t\t// filter-exact > filter-match > filter_matchType for type\n\t\t\tif ( $el.hasClass( 'filter-exact' ) ) {\n\t\t\t\tisMatch = false;\n\t\t\t} else if ( $el.hasClass( 'filter-match' ) ) {\n\t\t\t\tisMatch = true;\n\t\t\t} else {\n\t\t\t\t// filter-select is not applied when filter_functions are used, so look for a select\n\t\t\t\tif ( wo.filter_columnFilters ) {\n\t\t\t\t\t$el = c.$filters\n\t\t\t\t\t\t.find( '.' + tscss.filter )\n\t\t\t\t\t\t.add( wo.filter_$externalFilters )\n\t\t\t\t\t\t.filter( '[data-column=\"' + columnIndex + '\"]' );\n\t\t\t\t} else if ( wo.filter_$externalFilters ) {\n\t\t\t\t\t$el = wo.filter_$externalFilters.filter( '[data-column=\"' + columnIndex + '\"]' );\n\t\t\t\t}\n\t\t\t\tisMatch = $el.length ?\n\t\t\t\t\tc.widgetOptions.filter_matchType[ ( $el[ 0 ].nodeName || '' ).toLowerCase() ] === 'match' :\n\t\t\t\t\t// default to exact, if no inputs found\n\t\t\t\t\tfalse;\n\t\t\t}\n\t\t\treturn isMatch;\n\t\t},\n\t\tprocessRow: function( c, data, vars ) {\n\t\t\tvar result, filterMatched,\n\t\t\t\tfxn, ffxn, txt,\n\t\t\t\two = c.widgetOptions,\n\t\t\t\tshowRow = true,\n\t\t\t\thasAnyMatchInput = wo.filter_$anyMatch && wo.filter_$anyMatch.length,\n\n\t\t\t\t// if wo.filter_$anyMatch data-column attribute is changed dynamically\n\t\t\t\t// we don't want to do an \"anyMatch\" search on one column using data\n\t\t\t\t// for the entire row - see #998\n\t\t\t\tcolumnIndex = wo.filter_$anyMatch && wo.filter_$anyMatch.length ?\n\t\t\t\t\t// look for multiple columns '1-3,4-6,8'\n\t\t\t\t\ttsf.multipleColumns( c, wo.filter_$anyMatch ) :\n\t\t\t\t\t[];\n\t\t\tdata.$cells = data.$row.children();\n\t\t\tdata.matchedOn = null;\n\t\t\tif ( data.anyMatchFlag && columnIndex.length > 1 || ( data.anyMatchFilter && !hasAnyMatchInput ) ) {\n\t\t\t\tdata.anyMatch = true;\n\t\t\t\tdata.isMatch = true;\n\t\t\t\tdata.rowArray = data.$cells.map( function( i ) {\n\t\t\t\t\tif ( $.inArray( i, columnIndex ) > -1 || ( data.anyMatchFilter && !hasAnyMatchInput ) ) {\n\t\t\t\t\t\tif ( data.parsed[ i ] ) {\n\t\t\t\t\t\t\ttxt = data.cacheArray[ i ];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttxt = data.rawArray[ i ];\n\t\t\t\t\t\t\ttxt = $.trim( wo.filter_ignoreCase ? txt.toLowerCase() : txt );\n\t\t\t\t\t\t\tif ( c.sortLocaleCompare ) {\n\t\t\t\t\t\t\t\ttxt = ts.replaceAccents( txt );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn txt;\n\t\t\t\t\t}\n\t\t\t\t}).get();\n\t\t\t\tdata.filter = data.anyMatchFilter;\n\t\t\t\tdata.iFilter = data.iAnyMatchFilter;\n\t\t\t\tdata.exact = data.rowArray.join( ' ' );\n\t\t\t\tdata.iExact = wo.filter_ignoreCase ? data.exact.toLowerCase() : data.exact;\n\t\t\t\tdata.cache = data.cacheArray.slice( 0, -1 ).join( ' ' );\n\t\t\t\tvars.excludeMatch = vars.noAnyMatch;\n\t\t\t\tfilterMatched = tsf.processTypes( c, data, vars );\n\t\t\t\tif ( filterMatched !== null ) {\n\t\t\t\t\tshowRow = filterMatched;\n\t\t\t\t} else {\n\t\t\t\t\tif ( wo.filter_startsWith ) {\n\t\t\t\t\t\tshowRow = false;\n\t\t\t\t\t\t// data.rowArray may not contain all columns\n\t\t\t\t\t\tcolumnIndex = Math.min( c.columns, data.rowArray.length );\n\t\t\t\t\t\twhile ( !showRow && columnIndex > 0 ) {\n\t\t\t\t\t\t\tcolumnIndex--;\n\t\t\t\t\t\t\tshowRow = showRow || data.rowArray[ columnIndex ].indexOf( data.iFilter ) === 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tshowRow = ( data.iExact + data.childRowText ).indexOf( data.iFilter ) >= 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdata.anyMatch = false;\n\t\t\t\t// no other filters to process\n\t\t\t\tif ( data.filters.join( '' ) === data.filter ) {\n\t\t\t\t\treturn showRow;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( columnIndex = 0; columnIndex < c.columns; columnIndex++ ) {\n\t\t\t\tdata.filter = data.filters[ columnIndex ];\n\t\t\t\tdata.index = columnIndex;\n\n\t\t\t\t// filter types to exclude, per column\n\t\t\t\tvars.excludeMatch = vars.excludeFilter[ columnIndex ];\n\n\t\t\t\t// ignore if filter is empty or disabled\n\t\t\t\tif ( data.filter ) {\n\t\t\t\t\tdata.cache = data.cacheArray[ columnIndex ];\n\t\t\t\t\tresult = data.parsed[ columnIndex ] ? data.cache : data.rawArray[ columnIndex ] || '';\n\t\t\t\t\tdata.exact = c.sortLocaleCompare ? ts.replaceAccents( result ) : result; // issue #405\n\t\t\t\t\tdata.iExact = !tsfRegex.type.test( typeof data.exact ) && wo.filter_ignoreCase ?\n\t\t\t\t\t\tdata.exact.toLowerCase() : data.exact;\n\t\t\t\t\tdata.isMatch = tsf.matchType( c, columnIndex );\n\n\t\t\t\t\tresult = showRow; // if showRow is true, show that row\n\n\t\t\t\t\t// in case select filter option has a different value vs text 'a - z|A through Z'\n\t\t\t\t\tffxn = wo.filter_columnFilters ?\n\t\t\t\t\t\tc.$filters.add( wo.filter_$externalFilters )\n\t\t\t\t\t\t\t.filter( '[data-column=\"' + columnIndex + '\"]' )\n\t\t\t\t\t\t\t.find( 'select option:selected' )\n\t\t\t\t\t\t\t.attr( 'data-function-name' ) || '' : '';\n\t\t\t\t\t// replace accents - see #357\n\t\t\t\t\tif ( c.sortLocaleCompare ) {\n\t\t\t\t\t\tdata.filter = ts.replaceAccents( data.filter );\n\t\t\t\t\t}\n\n\t\t\t\t\t// replace column specific default filters - see #1088\n\t\t\t\t\tif ( wo.filter_defaultFilter && tsfRegex.iQuery.test( vars.defaultColFilter[ columnIndex ] ) ) {\n\t\t\t\t\t\tdata.filter = tsf.defaultFilter( data.filter, vars.defaultColFilter[ columnIndex ] );\n\t\t\t\t\t}\n\n\t\t\t\t\t// data.iFilter = case insensitive ( if wo.filter_ignoreCase is true ),\n\t\t\t\t\t// data.filter = case sensitive\n\t\t\t\t\tdata.iFilter = wo.filter_ignoreCase ? ( data.filter || '' ).toLowerCase() : data.filter;\n\t\t\t\t\tfxn = vars.functions[ columnIndex ];\n\t\t\t\t\tfilterMatched = null;\n\t\t\t\t\tif ( fxn ) {\n\t\t\t\t\t\tif ( typeof fxn === 'function' ) {\n\t\t\t\t\t\t\t// filter callback( exact cell content, parser normalized content,\n\t\t\t\t\t\t\t// filter input value, column index, jQuery row object )\n\t\t\t\t\t\t\tfilterMatched = fxn( data.exact, data.cache, data.filter, columnIndex, data.$row, c, data );\n\t\t\t\t\t\t} else if ( typeof fxn[ ffxn || data.filter ] === 'function' ) {\n\t\t\t\t\t\t\t// selector option function\n\t\t\t\t\t\t\ttxt = ffxn || data.filter;\n\t\t\t\t\t\t\tfilterMatched =\n\t\t\t\t\t\t\t\tfxn[ txt ]( data.exact, data.cache, data.filter, columnIndex, data.$row, c, data );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( filterMatched === null ) {\n\t\t\t\t\t\t// cycle through the different filters\n\t\t\t\t\t\t// filters return a boolean or null if nothing matches\n\t\t\t\t\t\tfilterMatched = tsf.processTypes( c, data, vars );\n\t\t\t\t\t\t// select with exact match; ignore \"and\" or \"or\" within the text; fixes #1486\n\t\t\t\t\t\ttxt = fxn === true && (data.matchedOn === 'and' || data.matchedOn === 'or');\n\t\t\t\t\t\tif ( filterMatched !== null && !txt) {\n\t\t\t\t\t\t\tresult = filterMatched;\n\t\t\t\t\t\t// Look for match, and add child row data for matching\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// check fxn (filter-select in header) after filter types are checked\n\t\t\t\t\t\t\t// without this, the filter + jQuery UI selectmenu demo was breaking\n\t\t\t\t\t\t\tif ( fxn === true ) {\n\t\t\t\t\t\t\t\t// default selector uses exact match unless 'filter-match' class is found\n\t\t\t\t\t\t\t\tresult = data.isMatch ?\n\t\t\t\t\t\t\t\t\t// data.iExact may be a number\n\t\t\t\t\t\t\t\t\t( '' + data.iExact ).search( data.iFilter ) >= 0 :\n\t\t\t\t\t\t\t\t\tdata.filter === data.exact;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttxt = ( data.iExact + data.childRowText ).indexOf( tsf.parseFilter( c, data.iFilter, data ) );\n\t\t\t\t\t\t\t\tresult = ( ( !wo.filter_startsWith && txt >= 0 ) || ( wo.filter_startsWith && txt === 0 ) );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = filterMatched;\n\t\t\t\t\t}\n\t\t\t\t\tshowRow = ( result ) ? showRow : false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn showRow;\n\t\t},\n\t\tfindRows: function( table, filters, currentFilters ) {\n\t\t\tif (\n\t\t\t\ttsf.equalFilters(table.config, table.config.lastSearch, currentFilters) ||\n\t\t\t\t!table.config.widgetOptions.filter_initialized\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar len, norm_rows, rowData, $rows, $row, rowIndex, tbodyIndex, $tbody, columnIndex,\n\t\t\t\tisChild, childRow, lastSearch, showRow, showParent, time, val, indx,\n\t\t\t\tnotFiltered, searchFiltered, query, injected, res, id, txt,\n\t\t\t\tstoredFilters = $.extend( [], filters ),\n\t\t\t\tc = table.config,\n\t\t\t\two = c.widgetOptions,\n\t\t\t\tdebug = ts.debug(c, 'filter'),\n\t\t\t\t// data object passed to filters; anyMatch is a flag for the filters\n\t\t\t\tdata = {\n\t\t\t\t\tanyMatch: false,\n\t\t\t\t\tfilters: filters,\n\t\t\t\t\t// regex filter type cache\n\t\t\t\t\tfilter_regexCache : []\n\t\t\t\t},\n\t\t\t\tvars = {\n\t\t\t\t\t// anyMatch really screws up with these types of filters\n\t\t\t\t\tnoAnyMatch: [ 'range',  'operators' ],\n\t\t\t\t\t// cache filter variables that use ts.getColumnData in the main loop\n\t\t\t\t\tfunctions : [],\n\t\t\t\t\texcludeFilter : [],\n\t\t\t\t\tdefaultColFilter : [],\n\t\t\t\t\tdefaultAnyFilter : ts.getColumnData( table, wo.filter_defaultFilter, c.columns, true ) || ''\n\t\t\t\t};\n\t\t\t// parse columns after formatter, in case the class is added at that point\n\t\t\tdata.parsed = [];\n\t\t\tfor ( columnIndex = 0; columnIndex < c.columns; columnIndex++ ) {\n\t\t\t\tdata.parsed[ columnIndex ] = wo.filter_useParsedData ||\n\t\t\t\t\t// parser has a \"parsed\" parameter\n\t\t\t\t\t( c.parsers && c.parsers[ columnIndex ] && c.parsers[ columnIndex ].parsed ||\n\t\t\t\t\t// getData may not return 'parsed' if other 'filter-' class names exist\n\t\t\t\t\t// ( e.g. <th class=\"filter-select filter-parsed\"> )\n\t\t\t\t\tts.getData && ts.getData( c.$headerIndexed[ columnIndex ],\n\t\t\t\t\t\tts.getColumnData( table, c.headers, columnIndex ), 'filter' ) === 'parsed' ||\n\t\t\t\t\tc.$headerIndexed[ columnIndex ].hasClass( 'filter-parsed' ) );\n\n\t\t\t\tvars.functions[ columnIndex ] =\n\t\t\t\t\tts.getColumnData( table, wo.filter_functions, columnIndex ) ||\n\t\t\t\t\tc.$headerIndexed[ columnIndex ].hasClass( 'filter-select' );\n\t\t\t\tvars.defaultColFilter[ columnIndex ] =\n\t\t\t\t\tts.getColumnData( table, wo.filter_defaultFilter, columnIndex ) || '';\n\t\t\t\tvars.excludeFilter[ columnIndex ] =\n\t\t\t\t\t( ts.getColumnData( table, wo.filter_excludeFilter, columnIndex, true ) || '' ).split( /\\s+/ );\n\t\t\t}\n\n\t\t\tif ( debug ) {\n\t\t\t\tconsole.log( 'Filter >> Starting filter widget search', filters );\n\t\t\t\ttime = new Date();\n\t\t\t}\n\t\t\t// filtered rows count\n\t\t\tc.filteredRows = 0;\n\t\t\tc.totalRows = 0;\n\t\t\tcurrentFilters = ( storedFilters || [] );\n\n\t\t\tfor ( tbodyIndex = 0; tbodyIndex < c.$tbodies.length; tbodyIndex++ ) {\n\t\t\t\t$tbody = ts.processTbody( table, c.$tbodies.eq( tbodyIndex ), true );\n\t\t\t\t// skip child rows & widget added ( removable ) rows - fixes #448 thanks to @hempel!\n\t\t\t\t// $rows = $tbody.children( 'tr' ).not( c.selectorRemove );\n\t\t\t\tcolumnIndex = c.columns;\n\t\t\t\t// convert stored rows into a jQuery object\n\t\t\t\tnorm_rows = c.cache[ tbodyIndex ].normalized;\n\t\t\t\t$rows = $( $.map( norm_rows, function( el ) {\n\t\t\t\t\treturn el[ columnIndex ].$row.get();\n\t\t\t\t}) );\n\n\t\t\t\tif ( currentFilters.join('') === '' || wo.filter_serversideFiltering ) {\n\t\t\t\t\t$rows\n\t\t\t\t\t\t.removeClass( wo.filter_filteredRow )\n\t\t\t\t\t\t.not( '.' + c.cssChildRow )\n\t\t\t\t\t\t.css( 'display', '' );\n\t\t\t\t} else {\n\t\t\t\t\t// filter out child rows\n\t\t\t\t\t$rows = $rows.not( '.' + c.cssChildRow );\n\t\t\t\t\tlen = $rows.length;\n\n\t\t\t\t\tif ( ( wo.filter_$anyMatch && wo.filter_$anyMatch.length ) ||\n\t\t\t\t\t\ttypeof filters[c.columns] !== 'undefined' ) {\n\t\t\t\t\t\tdata.anyMatchFlag = true;\n\t\t\t\t\t\tdata.anyMatchFilter = '' + (\n\t\t\t\t\t\t\tfilters[ c.columns ] ||\n\t\t\t\t\t\t\two.filter_$anyMatch && tsf.getLatestSearch( wo.filter_$anyMatch ).val() ||\n\t\t\t\t\t\t\t''\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif ( wo.filter_columnAnyMatch ) {\n\t\t\t\t\t\t\t// specific columns search\n\t\t\t\t\t\t\tquery = data.anyMatchFilter.split( tsfRegex.andSplit );\n\t\t\t\t\t\t\tinjected = false;\n\t\t\t\t\t\t\tfor ( indx = 0; indx < query.length; indx++ ) {\n\t\t\t\t\t\t\t\tres = query[ indx ].split( ':' );\n\t\t\t\t\t\t\t\tif ( res.length > 1 ) {\n\t\t\t\t\t\t\t\t\t// make the column a one-based index ( non-developers start counting from one :P )\n\t\t\t\t\t\t\t\t\tif ( isNaN( res[0] ) ) {\n\t\t\t\t\t\t\t\t\t\t$.each( c.headerContent, function( i, txt ) {\n\t\t\t\t\t\t\t\t\t\t\t// multiple matches are possible\n\t\t\t\t\t\t\t\t\t\t\tif ( txt.toLowerCase().indexOf( res[0] ) > -1 ) {\n\t\t\t\t\t\t\t\t\t\t\t\tid = i;\n\t\t\t\t\t\t\t\t\t\t\t\tfilters[ id ] = res[1];\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tid = parseInt( res[0], 10 ) - 1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif ( id >= 0 && id < c.columns ) { // if id is an integer\n\t\t\t\t\t\t\t\t\t\tfilters[ id ] = res[1];\n\t\t\t\t\t\t\t\t\t\tquery.splice( indx, 1 );\n\t\t\t\t\t\t\t\t\t\tindx--;\n\t\t\t\t\t\t\t\t\t\tinjected = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( injected ) {\n\t\t\t\t\t\t\t\tdata.anyMatchFilter = query.join( ' && ' );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// optimize searching only through already filtered rows - see #313\n\t\t\t\t\tsearchFiltered = wo.filter_searchFiltered;\n\t\t\t\t\tlastSearch = c.lastSearch || c.$table.data( 'lastSearch' ) || [];\n\t\t\t\t\tif ( searchFiltered ) {\n\t\t\t\t\t\t// cycle through all filters; include last ( columnIndex + 1 = match any column ). Fixes #669\n\t\t\t\t\t\tfor ( indx = 0; indx < columnIndex + 1; indx++ ) {\n\t\t\t\t\t\t\tval = filters[indx] || '';\n\t\t\t\t\t\t\t// break out of loop if we've already determined not to search filtered rows\n\t\t\t\t\t\t\tif ( !searchFiltered ) { indx = columnIndex; }\n\t\t\t\t\t\t\t// search already filtered rows if...\n\t\t\t\t\t\t\tsearchFiltered = searchFiltered && lastSearch.length &&\n\t\t\t\t\t\t\t\t// there are no changes from beginning of filter\n\t\t\t\t\t\t\t\tval.indexOf( lastSearch[indx] || '' ) === 0 &&\n\t\t\t\t\t\t\t\t// if there is NOT a logical 'or', or range ( 'to' or '-' ) in the string\n\t\t\t\t\t\t\t\t!tsfRegex.alreadyFiltered.test( val ) &&\n\t\t\t\t\t\t\t\t// if we are not doing exact matches, using '|' ( logical or ) or not '!'\n\t\t\t\t\t\t\t\t!tsfRegex.exactTest.test( val ) &&\n\t\t\t\t\t\t\t\t// don't search only filtered if the value is negative\n\t\t\t\t\t\t\t\t// ( '> -10' => '> -100' will ignore hidden rows )\n\t\t\t\t\t\t\t\t!( tsfRegex.isNeg1.test( val ) || tsfRegex.isNeg2.test( val ) ) &&\n\t\t\t\t\t\t\t\t// if filtering using a select without a 'filter-match' class ( exact match ) - fixes #593\n\t\t\t\t\t\t\t\t!( val !== '' && c.$filters && c.$filters.filter( '[data-column=\"' + indx + '\"]' ).find( 'select' ).length &&\n\t\t\t\t\t\t\t\t\t!tsf.matchType( c, indx ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tnotFiltered = $rows.not( '.' + wo.filter_filteredRow ).length;\n\t\t\t\t\t// can't search when all rows are hidden - this happens when looking for exact matches\n\t\t\t\t\tif ( searchFiltered && notFiltered === 0 ) { searchFiltered = false; }\n\t\t\t\t\tif ( debug ) {\n\t\t\t\t\t\tconsole.log( 'Filter >> Searching through ' +\n\t\t\t\t\t\t\t( searchFiltered && notFiltered < len ? notFiltered : 'all' ) + ' rows' );\n\t\t\t\t\t}\n\t\t\t\t\tif ( data.anyMatchFlag ) {\n\t\t\t\t\t\tif ( c.sortLocaleCompare ) {\n\t\t\t\t\t\t\t// replace accents\n\t\t\t\t\t\t\tdata.anyMatchFilter = ts.replaceAccents( data.anyMatchFilter );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( wo.filter_defaultFilter && tsfRegex.iQuery.test( vars.defaultAnyFilter ) ) {\n\t\t\t\t\t\t\tdata.anyMatchFilter = tsf.defaultFilter( data.anyMatchFilter, vars.defaultAnyFilter );\n\t\t\t\t\t\t\t// clear search filtered flag because default filters are not saved to the last search\n\t\t\t\t\t\t\tsearchFiltered = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// make iAnyMatchFilter lowercase unless both filter widget & core ignoreCase options are true\n\t\t\t\t\t\t// when c.ignoreCase is true, the cache contains all lower case data\n\t\t\t\t\t\tdata.iAnyMatchFilter = !( wo.filter_ignoreCase && c.ignoreCase ) ?\n\t\t\t\t\t\t\tdata.anyMatchFilter :\n\t\t\t\t\t\t\tdata.anyMatchFilter.toLowerCase();\n\t\t\t\t\t}\n\n\t\t\t\t\t// loop through the rows\n\t\t\t\t\tfor ( rowIndex = 0; rowIndex < len; rowIndex++ ) {\n\n\t\t\t\t\t\ttxt = $rows[ rowIndex ].className;\n\t\t\t\t\t\t// the first row can never be a child row\n\t\t\t\t\t\tisChild = rowIndex && tsfRegex.child.test( txt );\n\t\t\t\t\t\t// skip child rows & already filtered rows\n\t\t\t\t\t\tif ( isChild || ( searchFiltered && tsfRegex.filtered.test( txt ) ) ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdata.$row = $rows.eq( rowIndex );\n\t\t\t\t\t\tdata.rowIndex = rowIndex;\n\t\t\t\t\t\tdata.cacheArray = norm_rows[ rowIndex ];\n\t\t\t\t\t\trowData = data.cacheArray[ c.columns ];\n\t\t\t\t\t\tdata.rawArray = rowData.raw;\n\t\t\t\t\t\tdata.childRowText = '';\n\n\t\t\t\t\t\tif ( !wo.filter_childByColumn ) {\n\t\t\t\t\t\t\ttxt = '';\n\t\t\t\t\t\t\t// child row cached text\n\t\t\t\t\t\t\tchildRow = rowData.child;\n\t\t\t\t\t\t\t// so, if 'table.config.widgetOptions.filter_childRows' is true and there is\n\t\t\t\t\t\t\t// a match anywhere in the child row, then it will make the row visible\n\t\t\t\t\t\t\t// checked here so the option can be changed dynamically\n\t\t\t\t\t\t\tfor ( indx = 0; indx < childRow.length; indx++ ) {\n\t\t\t\t\t\t\t\ttxt += ' ' + childRow[indx].join( ' ' ) || '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdata.childRowText = wo.filter_childRows ?\n\t\t\t\t\t\t\t\t( wo.filter_ignoreCase ? txt.toLowerCase() : txt ) :\n\t\t\t\t\t\t\t\t'';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tshowRow = false;\n\t\t\t\t\t\tshowParent = tsf.processRow( c, data, vars );\n\t\t\t\t\t\t$row = rowData.$row;\n\n\t\t\t\t\t\t// don't pass reference to val\n\t\t\t\t\t\tval = showParent ? true : false;\n\t\t\t\t\t\tchildRow = rowData.$row.filter( ':gt(0)' );\n\t\t\t\t\t\tif ( wo.filter_childRows && childRow.length ) {\n\t\t\t\t\t\t\tif ( wo.filter_childByColumn ) {\n\t\t\t\t\t\t\t\tif ( !wo.filter_childWithSibs ) {\n\t\t\t\t\t\t\t\t\t// hide all child rows\n\t\t\t\t\t\t\t\t\tchildRow.addClass( wo.filter_filteredRow );\n\t\t\t\t\t\t\t\t\t// if only showing resulting child row, only include parent\n\t\t\t\t\t\t\t\t\t$row = $row.eq( 0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// cycle through each child row\n\t\t\t\t\t\t\t\tfor ( indx = 0; indx < childRow.length; indx++ ) {\n\t\t\t\t\t\t\t\t\tdata.$row = childRow.eq( indx );\n\t\t\t\t\t\t\t\t\tdata.cacheArray = rowData.child[ indx ];\n\t\t\t\t\t\t\t\t\tdata.rawArray = data.cacheArray;\n\t\t\t\t\t\t\t\t\tval = tsf.processRow( c, data, vars );\n\t\t\t\t\t\t\t\t\t// use OR comparison on child rows\n\t\t\t\t\t\t\t\t\tshowRow = showRow || val;\n\t\t\t\t\t\t\t\t\tif ( !wo.filter_childWithSibs && val ) {\n\t\t\t\t\t\t\t\t\t\tchildRow.eq( indx ).removeClass( wo.filter_filteredRow );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// keep parent row match even if no child matches... see #1020\n\t\t\t\t\t\t\tshowRow = showRow || showParent;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshowRow = val;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$row\n\t\t\t\t\t\t\t.toggleClass( wo.filter_filteredRow, !showRow )[0]\n\t\t\t\t\t\t\t.display = showRow ? '' : 'none';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tc.filteredRows += $rows.not( '.' + wo.filter_filteredRow ).length;\n\t\t\t\tc.totalRows += $rows.length;\n\t\t\t\tts.processTbody( table, $tbody, false );\n\t\t\t}\n\t\t\t// lastCombinedFilter is no longer used internally\n\t\t\tc.lastCombinedFilter = storedFilters.join(''); // save last search\n\t\t\t// don't save 'filters' directly since it may have altered ( AnyMatch column searches )\n\t\t\tc.lastSearch = storedFilters;\n\t\t\tc.$table.data( 'lastSearch', storedFilters );\n\t\t\tif ( wo.filter_saveFilters && ts.storage ) {\n\t\t\t\tts.storage( table, 'tablesorter-filters', tsf.processFilters( storedFilters, true ) );\n\t\t\t}\n\t\t\tif ( debug ) {\n\t\t\t\tconsole.log( 'Filter >> Completed search' + ts.benchmark(time) );\n\t\t\t}\n\t\t\tif ( wo.filter_initialized ) {\n\t\t\t\tc.$table.triggerHandler( 'filterBeforeEnd', c );\n\t\t\t\tc.$table.triggerHandler( 'filterEnd', c );\n\t\t\t}\n\t\t\tsetTimeout( function() {\n\t\t\t\tts.applyWidget( c.table ); // make sure zebra widget is applied\n\t\t\t}, 0 );\n\t\t},\n\t\tgetOptionSource: function( table, column, onlyAvail ) {\n\t\t\ttable = $( table )[0];\n\t\t\tvar c = table.config,\n\t\t\t\two = c.widgetOptions,\n\t\t\t\tarry = false,\n\t\t\t\tsource = wo.filter_selectSource,\n\t\t\t\tlast = c.$table.data( 'lastSearch' ) || [],\n\t\t\t\tfxn = typeof source === 'function' ? true : ts.getColumnData( table, source, column );\n\n\t\t\tif ( onlyAvail && last[column] !== '' ) {\n\t\t\t\tonlyAvail = false;\n\t\t\t}\n\n\t\t\t// filter select source option\n\t\t\tif ( fxn === true ) {\n\t\t\t\t// OVERALL source\n\t\t\t\tarry = source( table, column, onlyAvail );\n\t\t\t} else if ( fxn instanceof $ || ( $.type( fxn ) === 'string' && fxn.indexOf( '</option>' ) >= 0 ) ) {\n\t\t\t\t// selectSource is a jQuery object or string of options\n\t\t\t\treturn fxn;\n\t\t\t} else if ( $.isArray( fxn ) ) {\n\t\t\t\tarry = fxn;\n\t\t\t} else if ( $.type( source ) === 'object' && fxn ) {\n\t\t\t\t// custom select source function for a SPECIFIC COLUMN\n\t\t\t\tarry = fxn( table, column, onlyAvail );\n\t\t\t\t// abort - updating the selects from an external method\n\t\t\t\tif (arry === null) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( arry === false ) {\n\t\t\t\t// fall back to original method\n\t\t\t\tarry = tsf.getOptions( table, column, onlyAvail );\n\t\t\t}\n\n\t\t\treturn tsf.processOptions( table, column, arry );\n\n\t\t},\n\t\tprocessOptions: function( table, column, arry ) {\n\t\t\tif ( !$.isArray( arry ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ttable = $( table )[0];\n\t\t\tvar cts, txt, indx, len, parsedTxt, str,\n\t\t\t\tc = table.config,\n\t\t\t\tvalidColumn = typeof column !== 'undefined' && column !== null && column >= 0 && column < c.columns,\n\t\t\t\tdirection = validColumn ? c.$headerIndexed[ column ].hasClass( 'filter-select-sort-desc' ) : false,\n\t\t\t\tparsed = [];\n\t\t\t// get unique elements and sort the list\n\t\t\t// if $.tablesorter.sortText exists ( not in the original tablesorter ),\n\t\t\t// then natural sort the list otherwise use a basic sort\n\t\t\tarry = $.grep( arry, function( value, indx ) {\n\t\t\t\tif ( value.text ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn $.inArray( value, arry ) === indx;\n\t\t\t});\n\t\t\tif ( validColumn && c.$headerIndexed[ column ].hasClass( 'filter-select-nosort' ) ) {\n\t\t\t\t// unsorted select options\n\t\t\t\treturn arry;\n\t\t\t} else {\n\t\t\t\tlen = arry.length;\n\t\t\t\t// parse select option values\n\t\t\t\tfor ( indx = 0; indx < len; indx++ ) {\n\t\t\t\t\ttxt = arry[ indx ];\n\t\t\t\t\t// check for object\n\t\t\t\t\tstr = txt.text ? txt.text : txt;\n\t\t\t\t\t// sortNatural breaks if you don't pass it strings\n\t\t\t\t\tparsedTxt = ( validColumn && c.parsers && c.parsers.length &&\n\t\t\t\t\t\tc.parsers[ column ].format( str, table, [], column ) || str ).toString();\n\t\t\t\t\tparsedTxt = c.widgetOptions.filter_ignoreCase ? parsedTxt.toLowerCase() : parsedTxt;\n\t\t\t\t\t// parse array data using set column parser; this DOES NOT pass the original\n\t\t\t\t\t// table cell to the parser format function\n\t\t\t\t\tif ( txt.text ) {\n\t\t\t\t\t\ttxt.parsed = parsedTxt;\n\t\t\t\t\t\tparsed[ parsed.length ] = txt;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tparsed[ parsed.length ] = {\n\t\t\t\t\t\t\ttext : txt,\n\t\t\t\t\t\t\t// check parser length - fixes #934\n\t\t\t\t\t\t\tparsed : parsedTxt\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// sort parsed select options\n\t\t\t\tcts = c.textSorter || '';\n\t\t\t\tparsed.sort( function( a, b ) {\n\t\t\t\t\tvar x = direction ? b.parsed : a.parsed,\n\t\t\t\t\t\ty = direction ? a.parsed : b.parsed;\n\t\t\t\t\tif ( validColumn && typeof cts === 'function' ) {\n\t\t\t\t\t\t// custom OVERALL text sorter\n\t\t\t\t\t\treturn cts( x, y, true, column, table );\n\t\t\t\t\t} else if ( validColumn && typeof cts === 'object' && cts.hasOwnProperty( column ) ) {\n\t\t\t\t\t\t// custom text sorter for a SPECIFIC COLUMN\n\t\t\t\t\t\treturn cts[column]( x, y, true, column, table );\n\t\t\t\t\t} else if ( ts.sortNatural ) {\n\t\t\t\t\t\t// fall back to natural sort\n\t\t\t\t\t\treturn ts.sortNatural( x, y );\n\t\t\t\t\t}\n\t\t\t\t\t// using an older version! do a basic sort\n\t\t\t\t\treturn true;\n\t\t\t\t});\n\t\t\t\t// rebuild arry from sorted parsed data\n\t\t\t\tarry = [];\n\t\t\t\tlen = parsed.length;\n\t\t\t\tfor ( indx = 0; indx < len; indx++ ) {\n\t\t\t\t\tarry[ arry.length ] = parsed[indx];\n\t\t\t\t}\n\t\t\t\treturn arry;\n\t\t\t}\n\t\t},\n\t\tgetOptions: function( table, column, onlyAvail ) {\n\t\t\ttable = $( table )[0];\n\t\t\tvar rowIndex, tbodyIndex, len, row, cache, indx, child, childLen,\n\t\t\t\tc = table.config,\n\t\t\t\two = c.widgetOptions,\n\t\t\t\tarry = [];\n\t\t\tfor ( tbodyIndex = 0; tbodyIndex < c.$tbodies.length; tbodyIndex++ ) {\n\t\t\t\tcache = c.cache[tbodyIndex];\n\t\t\t\tlen = c.cache[tbodyIndex].normalized.length;\n\t\t\t\t// loop through the rows\n\t\t\t\tfor ( rowIndex = 0; rowIndex < len; rowIndex++ ) {\n\t\t\t\t\t// get cached row from cache.row ( old ) or row data object\n\t\t\t\t\t// ( new; last item in normalized array )\n\t\t\t\t\trow = cache.row ?\n\t\t\t\t\t\tcache.row[ rowIndex ] :\n\t\t\t\t\t\tcache.normalized[ rowIndex ][ c.columns ].$row[0];\n\t\t\t\t\t// check if has class filtered\n\t\t\t\t\tif ( onlyAvail && row.className.match( wo.filter_filteredRow ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// get non-normalized cell content\n\t\t\t\t\tif ( wo.filter_useParsedData ||\n\t\t\t\t\t\tc.parsers[column].parsed ||\n\t\t\t\t\t\tc.$headerIndexed[column].hasClass( 'filter-parsed' ) ) {\n\t\t\t\t\t\tarry[ arry.length ] = '' + cache.normalized[ rowIndex ][ column ];\n\t\t\t\t\t\t// child row parsed data\n\t\t\t\t\t\tif ( wo.filter_childRows && wo.filter_childByColumn ) {\n\t\t\t\t\t\t\tchildLen = cache.normalized[ rowIndex ][ c.columns ].$row.length - 1;\n\t\t\t\t\t\t\tfor ( indx = 0; indx < childLen; indx++ ) {\n\t\t\t\t\t\t\t\tarry[ arry.length ] = '' + cache.normalized[ rowIndex ][ c.columns ].child[ indx ][ column ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// get raw cached data instead of content directly from the cells\n\t\t\t\t\t\tarry[ arry.length ] = cache.normalized[ rowIndex ][ c.columns ].raw[ column ];\n\t\t\t\t\t\t// child row unparsed data\n\t\t\t\t\t\tif ( wo.filter_childRows && wo.filter_childByColumn ) {\n\t\t\t\t\t\t\tchildLen = cache.normalized[ rowIndex ][ c.columns ].$row.length;\n\t\t\t\t\t\t\tfor ( indx = 1; indx < childLen; indx++ ) {\n\t\t\t\t\t\t\t\tchild =  cache.normalized[ rowIndex ][ c.columns ].$row.eq( indx ).children().eq( column );\n\t\t\t\t\t\t\t\tarry[ arry.length ] = '' + ts.getElementText( c, child, column );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn arry;\n\t\t},\n\t\tbuildSelect: function( table, column, arry, updating, onlyAvail ) {\n\t\t\ttable = $( table )[0];\n\t\t\tcolumn = parseInt( column, 10 );\n\t\t\tif ( !table.config.cache || $.isEmptyObject( table.config.cache ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar indx, val, txt, t, $filters, $filter, option,\n\t\t\t\tc = table.config,\n\t\t\t\two = c.widgetOptions,\n\t\t\t\tnode = c.$headerIndexed[ column ],\n\t\t\t\t// t.data( 'placeholder' ) won't work in jQuery older than 1.4.3\n\t\t\t\toptions = '<option value=\"\">' +\n\t\t\t\t\t( node.data( 'placeholder' ) ||\n\t\t\t\t\t\tnode.attr( 'data-placeholder' ) ||\n\t\t\t\t\t\two.filter_placeholder.select || ''\n\t\t\t\t\t) + '</option>',\n\t\t\t\t// Get curent filter value\n\t\t\t\tcurrentValue = c.$table\n\t\t\t\t\t.find( 'thead' )\n\t\t\t\t\t.find( 'select.' + tscss.filter + '[data-column=\"' + column + '\"]' )\n\t\t\t\t\t.val();\n\n\t\t\t// nothing included in arry ( external source ), so get the options from\n\t\t\t// filter_selectSource or column data\n\t\t\tif ( typeof arry === 'undefined' || arry === '' ) {\n\t\t\t\tarry = tsf.getOptionSource( table, column, onlyAvail );\n\t\t\t\t// abort, selects are updated by an external method\n\t\t\t\tif (arry === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( $.isArray( arry ) ) {\n\t\t\t\t// build option list\n\t\t\t\tfor ( indx = 0; indx < arry.length; indx++ ) {\n\t\t\t\t\toption = arry[ indx ];\n\t\t\t\t\tif ( option.text ) {\n\t\t\t\t\t\t// OBJECT!! add data-function-name in case the value is set in filter_functions\n\t\t\t\t\t\toption['data-function-name'] = typeof option.value === 'undefined' ? option.text : option.value;\n\n\t\t\t\t\t\t// support jQuery < v1.8, otherwise the below code could be shortened to\n\t\t\t\t\t\t// options += $( '<option>', option )[ 0 ].outerHTML;\n\t\t\t\t\t\toptions += '<option';\n\t\t\t\t\t\tfor ( val in option ) {\n\t\t\t\t\t\t\tif ( option.hasOwnProperty( val ) && val !== 'text' ) {\n\t\t\t\t\t\t\t\toptions += ' ' + val + '=\"' + option[ val ].replace( tsfRegex.quote, '&quot;' ) + '\"';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( !option.value ) {\n\t\t\t\t\t\t\toptions += ' value=\"' + option.text.replace( tsfRegex.quote, '&quot;' ) + '\"';\n\t\t\t\t\t\t}\n\t\t\t\t\t\toptions += '>' + option.text.replace( tsfRegex.quote, '&quot;' ) + '</option>';\n\t\t\t\t\t\t// above code is needed in jQuery < v1.8\n\n\t\t\t\t\t\t// make sure we don't turn an object into a string (objects without a \"text\" property)\n\t\t\t\t\t} else if ( '' + option !== '[object Object]' ) {\n\t\t\t\t\t\ttxt = option = ( '' + option ).replace( tsfRegex.quote, '&quot;' );\n\t\t\t\t\t\tval = txt;\n\t\t\t\t\t\t// allow including a symbol in the selectSource array\n\t\t\t\t\t\t// 'a-z|A through Z' so that 'a-z' becomes the option value\n\t\t\t\t\t\t// and 'A through Z' becomes the option text\n\t\t\t\t\t\tif ( txt.indexOf( wo.filter_selectSourceSeparator ) >= 0 ) {\n\t\t\t\t\t\t\tt = txt.split( wo.filter_selectSourceSeparator );\n\t\t\t\t\t\t\tval = t[0];\n\t\t\t\t\t\t\ttxt = t[1];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// replace quotes - fixes #242 & ignore empty strings\n\t\t\t\t\t\t// see http://stackoverflow.com/q/14990971/145346\n\t\t\t\t\t\toptions += option !== '' ?\n\t\t\t\t\t\t\t'<option ' +\n\t\t\t\t\t\t\t\t( val === txt ? '' : 'data-function-name=\"' + option + '\" ' ) +\n\t\t\t\t\t\t\t\t'value=\"' + val + '\">' + txt +\n\t\t\t\t\t\t\t'</option>' : '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// clear arry so it doesn't get appended twice\n\t\t\t\tarry = [];\n\t\t\t}\n\n\t\t\t// update all selects in the same column ( clone thead in sticky headers &\n\t\t\t// any external selects ) - fixes 473\n\t\t\t$filters = ( c.$filters ? c.$filters : c.$table.children( 'thead' ) )\n\t\t\t\t.find( '.' + tscss.filter );\n\t\t\tif ( wo.filter_$externalFilters ) {\n\t\t\t\t$filters = $filters && $filters.length ?\n\t\t\t\t\t$filters.add( wo.filter_$externalFilters ) :\n\t\t\t\t\two.filter_$externalFilters;\n\t\t\t}\n\t\t\t$filter = $filters.filter( 'select[data-column=\"' + column + '\"]' );\n\n\t\t\t// make sure there is a select there!\n\t\t\tif ( $filter.length ) {\n\t\t\t\t$filter[ updating ? 'html' : 'append' ]( options );\n\t\t\t\tif ( !$.isArray( arry ) ) {\n\t\t\t\t\t// append options if arry is provided externally as a string or jQuery object\n\t\t\t\t\t// options ( default value ) was already added\n\t\t\t\t\t$filter.append( arry ).val( currentValue );\n\t\t\t\t}\n\t\t\t\t$filter.val( currentValue );\n\t\t\t}\n\t\t},\n\t\tbuildDefault: function( table, updating ) {\n\t\t\tvar columnIndex, $header, noSelect,\n\t\t\t\tc = table.config,\n\t\t\t\two = c.widgetOptions,\n\t\t\t\tcolumns = c.columns;\n\t\t\t// build default select dropdown\n\t\t\tfor ( columnIndex = 0; columnIndex < columns; columnIndex++ ) {\n\t\t\t\t$header = c.$headerIndexed[columnIndex];\n\t\t\t\tnoSelect = !( $header.hasClass( 'filter-false' ) || $header.hasClass( 'parser-false' ) );\n\t\t\t\t// look for the filter-select class; build/update it if found\n\t\t\t\tif ( ( $header.hasClass( 'filter-select' ) ||\n\t\t\t\t\tts.getColumnData( table, wo.filter_functions, columnIndex ) === true ) && noSelect ) {\n\t\t\t\t\ttsf.buildSelect( table, columnIndex, '', updating, $header.hasClass( wo.filter_onlyAvail ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t// filter regex variable\n\ttsfRegex = tsf.regex;\n\n\tts.getFilters = function( table, getRaw, setFilters, skipFirst ) {\n\t\tvar i, $filters, $column, cols,\n\t\t\tfilters = [],\n\t\t\tc = table ? $( table )[0].config : '',\n\t\t\two = c ? c.widgetOptions : '';\n\t\tif ( ( getRaw !== true && wo && !wo.filter_columnFilters ) ||\n\t\t\t// setFilters called, but last search is exactly the same as the current\n\t\t\t// fixes issue #733 & #903 where calling update causes the input values to reset\n\t\t\t( $.isArray(setFilters) && tsf.equalFilters(c, setFilters, c.lastSearch) )\n\t\t) {\n\t\t\treturn $( table ).data( 'lastSearch' ) || [];\n\t\t}\n\t\tif ( c ) {\n\t\t\tif ( c.$filters ) {\n\t\t\t\t$filters = c.$filters.find( '.' + tscss.filter );\n\t\t\t}\n\t\t\tif ( wo.filter_$externalFilters ) {\n\t\t\t\t$filters = $filters && $filters.length ?\n\t\t\t\t\t$filters.add( wo.filter_$externalFilters ) :\n\t\t\t\t\two.filter_$externalFilters;\n\t\t\t}\n\t\t\tif ( $filters && $filters.length ) {\n\t\t\t\tfilters = setFilters || [];\n\t\t\t\tfor ( i = 0; i < c.columns + 1; i++ ) {\n\t\t\t\t\tcols = ( i === c.columns ?\n\t\t\t\t\t\t// 'all' columns can now include a range or set of columms ( data-column='0-2,4,6-7' )\n\t\t\t\t\t\two.filter_anyColumnSelector + ',' + wo.filter_multipleColumnSelector :\n\t\t\t\t\t\t'[data-column=\"' + i + '\"]' );\n\t\t\t\t\t$column = $filters.filter( cols );\n\t\t\t\t\tif ( $column.length ) {\n\t\t\t\t\t\t// move the latest search to the first slot in the array\n\t\t\t\t\t\t$column = tsf.getLatestSearch( $column );\n\t\t\t\t\t\tif ( $.isArray( setFilters ) ) {\n\t\t\t\t\t\t\t// skip first ( latest input ) to maintain cursor position while typing\n\t\t\t\t\t\t\tif ( skipFirst && $column.length > 1 ) {\n\t\t\t\t\t\t\t\t$column = $column.slice( 1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( i === c.columns ) {\n\t\t\t\t\t\t\t\t// prevent data-column='all' from filling data-column='0,1' ( etc )\n\t\t\t\t\t\t\t\tcols = $column.filter( wo.filter_anyColumnSelector );\n\t\t\t\t\t\t\t\t$column = cols.length ? cols : $column;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$column\n\t\t\t\t\t\t\t\t.val( setFilters[ i ] )\n\t\t\t\t\t\t\t\t// must include a namespace here; but not c.namespace + 'filter'?\n\t\t\t\t\t\t\t\t.trigger( 'change' + c.namespace );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfilters[i] = $column.val() || '';\n\t\t\t\t\t\t\t// don't change the first... it will move the cursor\n\t\t\t\t\t\t\tif ( i === c.columns ) {\n\t\t\t\t\t\t\t\t// don't update range columns from 'all' setting\n\t\t\t\t\t\t\t\t$column\n\t\t\t\t\t\t\t\t\t.slice( 1 )\n\t\t\t\t\t\t\t\t\t.filter( '[data-column*=\"' + $column.attr( 'data-column' ) + '\"]' )\n\t\t\t\t\t\t\t\t\t.val( filters[ i ] );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$column\n\t\t\t\t\t\t\t\t\t.slice( 1 )\n\t\t\t\t\t\t\t\t\t.val( filters[ i ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// save any match input dynamically\n\t\t\t\t\t\tif ( i === c.columns && $column.length ) {\n\t\t\t\t\t\t\two.filter_$anyMatch = $column;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn filters;\n\t};\n\n\tts.setFilters = function( table, filter, apply, skipFirst ) {\n\t\tvar c = table ? $( table )[0].config : '',\n\t\t\tvalid = ts.getFilters( table, true, filter, skipFirst );\n\t\t// default apply to \"true\"\n\t\tif ( typeof apply === 'undefined' ) {\n\t\t\tapply = true;\n\t\t}\n\t\tif ( c && apply ) {\n\t\t\t// ensure new set filters are applied, even if the search is the same\n\t\t\tc.lastCombinedFilter = null;\n\t\t\tc.lastSearch = [];\n\t\t\ttsf.searching( c.table, filter, skipFirst );\n\t\t\tc.$table.triggerHandler( 'filterFomatterUpdate' );\n\t\t}\n\t\treturn valid.length !== 0;\n\t};\n\n})( jQuery );\n\n/*! Widget: stickyHeaders - updated 9/27/2017 (v2.29.0) *//*\n * Requires tablesorter v2.8+ and jQuery 1.4.3+\n * by Rob Garrison\n */\n;(function ($, window) {\n\t'use strict';\n\tvar ts = $.tablesorter || {};\n\n\t$.extend(ts.css, {\n\t\tsticky    : 'tablesorter-stickyHeader', // stickyHeader\n\t\tstickyVis : 'tablesorter-sticky-visible',\n\t\tstickyHide: 'tablesorter-sticky-hidden',\n\t\tstickyWrap: 'tablesorter-sticky-wrapper'\n\t});\n\n\t// Add a resize event to table headers\n\tts.addHeaderResizeEvent = function(table, disable, settings) {\n\t\ttable = $(table)[0]; // make sure we're using a dom element\n\t\tif ( !table.config ) { return; }\n\t\tvar defaults = {\n\t\t\t\ttimer : 250\n\t\t\t},\n\t\t\toptions = $.extend({}, defaults, settings),\n\t\t\tc = table.config,\n\t\t\two = c.widgetOptions,\n\t\t\tcheckSizes = function( triggerEvent ) {\n\t\t\t\tvar index, headers, $header, sizes, width, height,\n\t\t\t\t\tlen = c.$headers.length;\n\t\t\t\two.resize_flag = true;\n\t\t\t\theaders = [];\n\t\t\t\tfor ( index = 0; index < len; index++ ) {\n\t\t\t\t\t$header = c.$headers.eq( index );\n\t\t\t\t\tsizes = $header.data( 'savedSizes' ) || [ 0, 0 ]; // fixes #394\n\t\t\t\t\twidth = $header[0].offsetWidth;\n\t\t\t\t\theight = $header[0].offsetHeight;\n\t\t\t\t\tif ( width !== sizes[0] || height !== sizes[1] ) {\n\t\t\t\t\t\t$header.data( 'savedSizes', [ width, height ] );\n\t\t\t\t\t\theaders.push( $header[0] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( headers.length && triggerEvent !== false ) {\n\t\t\t\t\tc.$table.triggerHandler( 'resize', [ headers ] );\n\t\t\t\t}\n\t\t\t\two.resize_flag = false;\n\t\t\t};\n\t\tclearInterval(wo.resize_timer);\n\t\tif (disable) {\n\t\t\two.resize_flag = false;\n\t\t\treturn false;\n\t\t}\n\t\tcheckSizes( false );\n\t\two.resize_timer = setInterval(function() {\n\t\t\tif (wo.resize_flag) { return; }\n\t\t\tcheckSizes();\n\t\t}, options.timer);\n\t};\n\n\tfunction getStickyOffset(c, wo) {\n\t\tvar $el = isNaN(wo.stickyHeaders_offset) ? $(wo.stickyHeaders_offset) : [];\n\t\treturn $el.length ?\n\t\t\t$el.height() || 0 :\n\t\t\tparseInt(wo.stickyHeaders_offset, 10) || 0;\n\t}\n\n\t// Sticky headers based on this awesome article:\n\t// http://css-tricks.com/13465-persistent-headers/\n\t// and https://github.com/jmosbech/StickyTableHeaders by Jonas Mosbech\n\t// **************************\n\tts.addWidget({\n\t\tid: 'stickyHeaders',\n\t\tpriority: 54, // sticky widget must be initialized after the filter & before pager widget!\n\t\toptions: {\n\t\t\tstickyHeaders : '',       // extra class name added to the sticky header row\n\t\t\tstickyHeaders_appendTo : null, // jQuery selector or object to phycially attach the sticky headers\n\t\t\tstickyHeaders_attachTo : null, // jQuery selector or object to attach scroll listener to (overridden by xScroll & yScroll settings)\n\t\t\tstickyHeaders_xScroll : null, // jQuery selector or object to monitor horizontal scroll position (defaults: xScroll > attachTo > window)\n\t\t\tstickyHeaders_yScroll : null, // jQuery selector or object to monitor vertical scroll position (defaults: yScroll > attachTo > window)\n\t\t\tstickyHeaders_offset : 0, // number or jquery selector targeting the position:fixed element\n\t\t\tstickyHeaders_filteredToTop: true, // scroll table top into view after filtering\n\t\t\tstickyHeaders_cloneId : '-sticky', // added to table ID, if it exists\n\t\t\tstickyHeaders_addResizeEvent : true, // trigger 'resize' event on headers\n\t\t\tstickyHeaders_includeCaption : true, // if false and a caption exist, it won't be included in the sticky header\n\t\t\tstickyHeaders_zIndex : 2 // The zIndex of the stickyHeaders, allows the user to adjust this to their needs\n\t\t},\n\t\tformat: function(table, c, wo) {\n\t\t\t// filter widget doesn't initialize on an empty table. Fixes #449\n\t\t\tif ( c.$table.hasClass('hasStickyHeaders') || ($.inArray('filter', c.widgets) >= 0 && !c.$table.hasClass('hasFilters')) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar index, len, $t,\n\t\t\t\t$table = c.$table,\n\t\t\t\t// add position: relative to attach element, hopefully it won't cause trouble.\n\t\t\t\t$attach = $(wo.stickyHeaders_attachTo || wo.stickyHeaders_appendTo),\n\t\t\t\tnamespace = c.namespace + 'stickyheaders ',\n\t\t\t\t// element to watch for the scroll event\n\t\t\t\t$yScroll = $(wo.stickyHeaders_yScroll || wo.stickyHeaders_attachTo || window),\n\t\t\t\t$xScroll = $(wo.stickyHeaders_xScroll || wo.stickyHeaders_attachTo || window),\n\t\t\t\t$thead = $table.children('thead:first'),\n\t\t\t\t$header = $thead.children('tr').not('.sticky-false').children(),\n\t\t\t\t$tfoot = $table.children('tfoot'),\n\t\t\t\tstickyOffset = getStickyOffset(c, wo),\n\t\t\t\t// is this table nested? If so, find parent sticky header wrapper (div, not table)\n\t\t\t\t$nestedSticky = $table.parent().closest('.' + ts.css.table).hasClass('hasStickyHeaders') ?\n\t\t\t\t\t$table.parent().closest('table.tablesorter')[0].config.widgetOptions.$sticky.parent() : [],\n\t\t\t\tnestedStickyTop = $nestedSticky.length ? $nestedSticky.height() : 0,\n\t\t\t\t// clone table, then wrap to make sticky header\n\t\t\t\t$stickyTable = wo.$sticky = $table.clone()\n\t\t\t\t\t.addClass('containsStickyHeaders ' + ts.css.sticky + ' ' + wo.stickyHeaders + ' ' + c.namespace.slice(1) + '_extra_table' )\n\t\t\t\t\t.wrap('<div class=\"' + ts.css.stickyWrap + '\">'),\n\t\t\t\t$stickyWrap = $stickyTable.parent()\n\t\t\t\t\t.addClass(ts.css.stickyHide)\n\t\t\t\t\t.css({\n\t\t\t\t\t\tposition   : $attach.length ? 'absolute' : 'fixed',\n\t\t\t\t\t\tpadding    : parseInt( $stickyTable.parent().parent().css('padding-left'), 10 ),\n\t\t\t\t\t\ttop        : stickyOffset + nestedStickyTop,\n\t\t\t\t\t\tleft       : 0,\n\t\t\t\t\t\tvisibility : 'hidden',\n\t\t\t\t\t\tzIndex     : wo.stickyHeaders_zIndex || 2\n\t\t\t\t\t}),\n\t\t\t\t$stickyThead = $stickyTable.children('thead:first'),\n\t\t\t\t$stickyCells,\n\t\t\t\tlaststate = '',\n\t\t\t\tsetWidth = function($orig, $clone) {\n\t\t\t\t\tvar index, width, border, $cell, $this,\n\t\t\t\t\t\t$cells = $orig.filter(':visible'),\n\t\t\t\t\t\tlen = $cells.length;\n\t\t\t\t\tfor ( index = 0; index < len; index++ ) {\n\t\t\t\t\t\t$cell = $clone.filter(':visible').eq(index);\n\t\t\t\t\t\t$this = $cells.eq(index);\n\t\t\t\t\t\t// code from https://github.com/jmosbech/StickyTableHeaders\n\t\t\t\t\t\tif ($this.css('box-sizing') === 'border-box') {\n\t\t\t\t\t\t\twidth = $this.outerWidth();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif ($cell.css('border-collapse') === 'collapse') {\n\t\t\t\t\t\t\t\tif (window.getComputedStyle) {\n\t\t\t\t\t\t\t\t\twidth = parseFloat( window.getComputedStyle($this[0], null).width );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// ie8 only\n\t\t\t\t\t\t\t\t\tborder = parseFloat( $this.css('border-width') );\n\t\t\t\t\t\t\t\t\twidth = $this.outerWidth() - parseFloat( $this.css('padding-left') ) - parseFloat( $this.css('padding-right') ) - border;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\twidth = $this.width();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$cell.css({\n\t\t\t\t\t\t\t'width': width,\n\t\t\t\t\t\t\t'min-width': width,\n\t\t\t\t\t\t\t'max-width': width\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tgetLeftPosition = function(yWindow) {\n\t\t\t\t\tif (yWindow === false && $nestedSticky.length) {\n\t\t\t\t\t\treturn $table.position().left;\n\t\t\t\t\t}\n\t\t\t\t\treturn $attach.length ?\n\t\t\t\t\t\tparseInt($attach.css('padding-left'), 10) || 0 :\n\t\t\t\t\t\t$table.offset().left - parseInt($table.css('margin-left'), 10) - $(window).scrollLeft();\n\t\t\t\t},\n\t\t\t\tresizeHeader = function() {\n\t\t\t\t\t$stickyWrap.css({\n\t\t\t\t\t\tleft : getLeftPosition(),\n\t\t\t\t\t\twidth: $table.outerWidth()\n\t\t\t\t\t});\n\t\t\t\t\tsetWidth( $table, $stickyTable );\n\t\t\t\t\tsetWidth( $header, $stickyCells );\n\t\t\t\t},\n\t\t\t\tscrollSticky = function( resizing ) {\n\t\t\t\t\tif (!$table.is(':visible')) { return; } // fixes #278\n\t\t\t\t\t// Detect nested tables - fixes #724\n\t\t\t\t\tnestedStickyTop = $nestedSticky.length ? $nestedSticky.offset().top - $yScroll.scrollTop() + $nestedSticky.height() : 0;\n\t\t\t\t\tvar tmp,\n\t\t\t\t\t\toffset = $table.offset(),\n\t\t\t\t\t\tstickyOffset = getStickyOffset(c, wo),\n\t\t\t\t\t\tyWindow = $.isWindow( $yScroll[0] ), // $.isWindow needs jQuery 1.4.3\n\t\t\t\t\t\tyScroll = yWindow ?\n\t\t\t\t\t\t\t$yScroll.scrollTop() :\n\t\t\t\t\t\t\t// use parent sticky position if nested AND inside of a scrollable element - see #1512\n\t\t\t\t\t\t\t$nestedSticky.length ? parseInt($nestedSticky[0].style.top, 10) : $yScroll.offset().top,\n\t\t\t\t\t\tattachTop = $attach.length ? yScroll : $yScroll.scrollTop(),\n\t\t\t\t\t\tcaptionHeight = wo.stickyHeaders_includeCaption ? 0 : $table.children( 'caption' ).height() || 0,\n\t\t\t\t\t\tscrollTop = attachTop + stickyOffset + nestedStickyTop - captionHeight,\n\t\t\t\t\t\ttableHeight = $table.height() - ($stickyWrap.height() + ($tfoot.height() || 0)) - captionHeight,\n\t\t\t\t\t\tisVisible = ( scrollTop > offset.top ) && ( scrollTop < offset.top + tableHeight ) ? 'visible' : 'hidden',\n\t\t\t\t\t\tstate = isVisible === 'visible' ? ts.css.stickyVis : ts.css.stickyHide,\n\t\t\t\t\t\tneedsUpdating = !$stickyWrap.hasClass( state ),\n\t\t\t\t\t\tcssSettings = { visibility : isVisible };\n\t\t\t\t\tif ($attach.length) {\n\t\t\t\t\t\t// attached sticky headers always need updating\n\t\t\t\t\t\tneedsUpdating = true;\n\t\t\t\t\t\tcssSettings.top = yWindow ? scrollTop - $attach.offset().top : $attach.scrollTop();\n\t\t\t\t\t}\n\t\t\t\t\t// adjust when scrolling horizontally - fixes issue #143\n\t\t\t\t\ttmp = getLeftPosition(yWindow);\n\t\t\t\t\tif (tmp !== parseInt($stickyWrap.css('left'), 10)) {\n\t\t\t\t\t\tneedsUpdating = true;\n\t\t\t\t\t\tcssSettings.left = tmp;\n\t\t\t\t\t}\n\t\t\t\t\tcssSettings.top = ( cssSettings.top || 0 ) +\n\t\t\t\t\t\t// If nested AND inside of a scrollable element, only add parent sticky height\n\t\t\t\t\t\t(!yWindow && $nestedSticky.length ? $nestedSticky.height() : stickyOffset + nestedStickyTop);\n\t\t\t\t\tif (needsUpdating) {\n\t\t\t\t\t\t$stickyWrap\n\t\t\t\t\t\t\t.removeClass( ts.css.stickyVis + ' ' + ts.css.stickyHide )\n\t\t\t\t\t\t\t.addClass( state )\n\t\t\t\t\t\t\t.css(cssSettings);\n\t\t\t\t\t}\n\t\t\t\t\tif (isVisible !== laststate || resizing) {\n\t\t\t\t\t\t// make sure the column widths match\n\t\t\t\t\t\tresizeHeader();\n\t\t\t\t\t\tlaststate = isVisible;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t// only add a position relative if a position isn't already defined\n\t\t\tif ($attach.length && !$attach.css('position')) {\n\t\t\t\t$attach.css('position', 'relative');\n\t\t\t}\n\t\t\t// fix clone ID, if it exists - fixes #271\n\t\t\tif ($stickyTable.attr('id')) { $stickyTable[0].id += wo.stickyHeaders_cloneId; }\n\t\t\t// clear out cloned table, except for sticky header\n\t\t\t// include caption & filter row (fixes #126 & #249) - don't remove cells to get correct cell indexing\n\t\t\t$stickyTable.find('> thead:gt(0), tr.sticky-false').hide();\n\t\t\t$stickyTable.find('> tbody, > tfoot').remove();\n\t\t\t$stickyTable.find('caption').toggle(wo.stickyHeaders_includeCaption);\n\t\t\t// issue #172 - find td/th in sticky header\n\t\t\t$stickyCells = $stickyThead.children().children();\n\t\t\t$stickyTable.css({ height:0, width:0, margin: 0 });\n\t\t\t// remove resizable block\n\t\t\t$stickyCells.find('.' + ts.css.resizer).remove();\n\t\t\t// update sticky header class names to match real header after sorting\n\t\t\t$table\n\t\t\t\t.addClass('hasStickyHeaders')\n\t\t\t\t.bind('pagerComplete' + namespace, function() {\n\t\t\t\t\tresizeHeader();\n\t\t\t\t});\n\n\t\t\tts.bindEvents(table, $stickyThead.children().children('.' + ts.css.header));\n\n\t\t\tif (wo.stickyHeaders_appendTo) {\n\t\t\t\t$(wo.stickyHeaders_appendTo).append( $stickyWrap );\n\t\t\t} else {\n\t\t\t\t// add stickyheaders AFTER the table. If the table is selected by ID, the original one (first) will be returned.\n\t\t\t\t$table.after( $stickyWrap );\n\t\t\t}\n\n\t\t\t// onRenderHeader is defined, we need to do something about it (fixes #641)\n\t\t\tif (c.onRenderHeader) {\n\t\t\t\t$t = $stickyThead.children('tr').children();\n\t\t\t\tlen = $t.length;\n\t\t\t\tfor ( index = 0; index < len; index++ ) {\n\t\t\t\t\t// send second parameter\n\t\t\t\t\tc.onRenderHeader.apply( $t.eq( index ), [ index, c, $stickyTable ] );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// make it sticky!\n\t\t\t$xScroll.add($yScroll)\n\t\t\t\t.unbind( ('scroll resize '.split(' ').join( namespace )).replace(/\\s+/g, ' ') )\n\t\t\t\t.bind('scroll resize '.split(' ').join( namespace ), function( event ) {\n\t\t\t\t\tscrollSticky( event.type === 'resize' );\n\t\t\t\t});\n\t\t\tc.$table\n\t\t\t\t.unbind('stickyHeadersUpdate' + namespace)\n\t\t\t\t.bind('stickyHeadersUpdate' + namespace, function() {\n\t\t\t\t\tscrollSticky( true );\n\t\t\t\t});\n\n\t\t\tif (wo.stickyHeaders_addResizeEvent) {\n\t\t\t\tts.addHeaderResizeEvent(table);\n\t\t\t}\n\n\t\t\t// look for filter widget\n\t\t\tif ($table.hasClass('hasFilters') && wo.filter_columnFilters) {\n\t\t\t\t// scroll table into view after filtering, if sticky header is active - #482\n\t\t\t\t$table.bind('filterEnd' + namespace, function() {\n\t\t\t\t\t// $(':focus') needs jQuery 1.6+\n\t\t\t\t\tvar $td = $(document.activeElement).closest('td'),\n\t\t\t\t\t\tcolumn = $td.parent().children().index($td);\n\t\t\t\t\t// only scroll if sticky header is active\n\t\t\t\t\tif ($stickyWrap.hasClass(ts.css.stickyVis) && wo.stickyHeaders_filteredToTop) {\n\t\t\t\t\t\t// scroll to original table (not sticky clone)\n\t\t\t\t\t\twindow.scrollTo(0, $table.position().top);\n\t\t\t\t\t\t// give same input/select focus; check if c.$filters exists; fixes #594\n\t\t\t\t\t\tif (column >= 0 && c.$filters) {\n\t\t\t\t\t\t\tc.$filters.eq(column).find('a, select, input').filter(':visible').focus();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tts.filter.bindSearch( $table, $stickyCells.find('.' + ts.css.filter) );\n\t\t\t\t// support hideFilters\n\t\t\t\tif (wo.filter_hideFilters) {\n\t\t\t\t\tts.filter.hideFilters(c, $stickyTable);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// resize table (Firefox)\n\t\t\tif (wo.stickyHeaders_addResizeEvent) {\n\t\t\t\t$table.bind('resize' + c.namespace + 'stickyheaders', function() {\n\t\t\t\t\tresizeHeader();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// make sure sticky is visible if page is partially scrolled\n\t\t\tscrollSticky( true );\n\t\t\t$table.triggerHandler('stickyHeadersInit');\n\n\t\t},\n\t\tremove: function(table, c, wo) {\n\t\t\tvar namespace = c.namespace + 'stickyheaders ';\n\t\t\tc.$table\n\t\t\t\t.removeClass('hasStickyHeaders')\n\t\t\t\t.unbind( ('pagerComplete resize filterEnd stickyHeadersUpdate '.split(' ').join(namespace)).replace(/\\s+/g, ' ') )\n\t\t\t\t.next('.' + ts.css.stickyWrap).remove();\n\t\t\tif (wo.$sticky && wo.$sticky.length) { wo.$sticky.remove(); } // remove cloned table\n\t\t\t$(window)\n\t\t\t\t.add(wo.stickyHeaders_xScroll)\n\t\t\t\t.add(wo.stickyHeaders_yScroll)\n\t\t\t\t.add(wo.stickyHeaders_attachTo)\n\t\t\t\t.unbind( ('scroll resize '.split(' ').join(namespace)).replace(/\\s+/g, ' ') );\n\t\t\tts.addHeaderResizeEvent(table, true);\n\t\t}\n\t});\n\n})(jQuery, window);\n\n/*! Widget: resizable - updated 2018-03-26 (v2.30.2) */\n/*jshint browser:true, jquery:true, unused:false */\n;(function ($, window) {\n\t'use strict';\n\tvar ts = $.tablesorter || {};\n\n\t$.extend(ts.css, {\n\t\tresizableContainer : 'tablesorter-resizable-container',\n\t\tresizableHandle    : 'tablesorter-resizable-handle',\n\t\tresizableNoSelect  : 'tablesorter-disableSelection',\n\t\tresizableStorage   : 'tablesorter-resizable'\n\t});\n\n\t// Add extra scroller css\n\t$(function() {\n\t\tvar s = '<style>' +\n\t\t\t'body.' + ts.css.resizableNoSelect + ' { -ms-user-select: none; -moz-user-select: -moz-none;' +\n\t\t\t\t'-khtml-user-select: none; -webkit-user-select: none; user-select: none; }' +\n\t\t\t'.' + ts.css.resizableContainer + ' { position: relative; height: 1px; }' +\n\t\t\t// make handle z-index > than stickyHeader z-index, so the handle stays above sticky header\n\t\t\t'.' + ts.css.resizableHandle + ' { position: absolute; display: inline-block; width: 8px;' +\n\t\t\t\t'top: 1px; cursor: ew-resize; z-index: 3; user-select: none; -moz-user-select: none; }' +\n\t\t\t'</style>';\n\t\t$('head').append(s);\n\t});\n\n\tts.resizable = {\n\t\tinit : function( c, wo ) {\n\t\t\tif ( c.$table.hasClass( 'hasResizable' ) ) { return; }\n\t\t\tc.$table.addClass( 'hasResizable' );\n\n\t\t\tvar noResize, $header, column, storedSizes, tmp,\n\t\t\t\t$table = c.$table,\n\t\t\t\t$parent = $table.parent(),\n\t\t\t\tmarginTop = parseInt( $table.css( 'margin-top' ), 10 ),\n\n\t\t\t// internal variables\n\t\t\tvars = wo.resizable_vars = {\n\t\t\t\tuseStorage : ts.storage && wo.resizable !== false,\n\t\t\t\t$wrap : $parent,\n\t\t\t\tmouseXPosition : 0,\n\t\t\t\t$target : null,\n\t\t\t\t$next : null,\n\t\t\t\toverflow : $parent.css('overflow') === 'auto' ||\n\t\t\t\t\t$parent.css('overflow') === 'scroll' ||\n\t\t\t\t\t$parent.css('overflow-x') === 'auto' ||\n\t\t\t\t\t$parent.css('overflow-x') === 'scroll',\n\t\t\t\tstoredSizes : []\n\t\t\t};\n\n\t\t\t// set default widths\n\t\t\tts.resizableReset( c.table, true );\n\n\t\t\t// now get measurements!\n\t\t\tvars.tableWidth = $table.width();\n\t\t\t// attempt to autodetect\n\t\t\tvars.fullWidth = Math.abs( $parent.width() - vars.tableWidth ) < 20;\n\n\t\t\t/*\n\t\t\t// Hacky method to determine if table width is set to 'auto'\n\t\t\t// http://stackoverflow.com/a/20892048/145346\n\t\t\tif ( !vars.fullWidth ) {\n\t\t\t\ttmp = $table.width();\n\t\t\t\t$header = $table.wrap('<span>').parent(); // temp variable\n\t\t\t\tstoredSizes = parseInt( $table.css( 'margin-left' ), 10 ) || 0;\n\t\t\t\t$table.css( 'margin-left', storedSizes + 50 );\n\t\t\t\tvars.tableWidth = $header.width() > tmp ? 'auto' : tmp;\n\t\t\t\t$table.css( 'margin-left', storedSizes ? storedSizes : '' );\n\t\t\t\t$header = null;\n\t\t\t\t$table.unwrap('<span>');\n\t\t\t}\n\t\t\t*/\n\n\t\t\tif ( vars.useStorage && vars.overflow ) {\n\t\t\t\t// save table width\n\t\t\t\tts.storage( c.table, 'tablesorter-table-original-css-width', vars.tableWidth );\n\t\t\t\ttmp = ts.storage( c.table, 'tablesorter-table-resized-width' ) || 'auto';\n\t\t\t\tts.resizable.setWidth( $table, tmp, true );\n\t\t\t}\n\t\t\two.resizable_vars.storedSizes = storedSizes = ( vars.useStorage ?\n\t\t\t\tts.storage( c.table, ts.css.resizableStorage ) :\n\t\t\t\t[] ) || [];\n\t\t\tts.resizable.setWidths( c, wo, storedSizes );\n\t\t\tts.resizable.updateStoredSizes( c, wo );\n\n\t\t\two.$resizable_container = $( '<div class=\"' + ts.css.resizableContainer + '\">' )\n\t\t\t\t.css({ top : marginTop })\n\t\t\t\t.insertBefore( $table );\n\t\t\t// add container\n\t\t\tfor ( column = 0; column < c.columns; column++ ) {\n\t\t\t\t$header = c.$headerIndexed[ column ];\n\t\t\t\ttmp = ts.getColumnData( c.table, c.headers, column );\n\t\t\t\tnoResize = ts.getData( $header, tmp, 'resizable' ) === 'false';\n\t\t\t\tif ( !noResize ) {\n\t\t\t\t\t$( '<div class=\"' + ts.css.resizableHandle + '\">' )\n\t\t\t\t\t\t.appendTo( wo.$resizable_container )\n\t\t\t\t\t\t.attr({\n\t\t\t\t\t\t\t'data-column' : column,\n\t\t\t\t\t\t\t'unselectable' : 'on'\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.data( 'header', $header )\n\t\t\t\t\t\t.bind( 'selectstart', false );\n\t\t\t\t}\n\t\t\t}\n\t\t\tts.resizable.bindings( c, wo );\n\t\t},\n\n\t\tupdateStoredSizes : function( c, wo ) {\n\t\t\tvar column, $header,\n\t\t\t\tlen = c.columns,\n\t\t\t\tvars = wo.resizable_vars;\n\t\t\tvars.storedSizes = [];\n\t\t\tfor ( column = 0; column < len; column++ ) {\n\t\t\t\t$header = c.$headerIndexed[ column ];\n\t\t\t\tvars.storedSizes[ column ] = $header.is(':visible') ? $header.width() : 0;\n\t\t\t}\n\t\t},\n\n\t\tsetWidth : function( $el, width, overflow ) {\n\t\t\t// overflow tables need min & max width set as well\n\t\t\t$el.css({\n\t\t\t\t'width' : width,\n\t\t\t\t'min-width' : overflow ? width : '',\n\t\t\t\t'max-width' : overflow ? width : ''\n\t\t\t});\n\t\t},\n\n\t\tsetWidths : function( c, wo, storedSizes ) {\n\t\t\tvar column, $temp,\n\t\t\t\tvars = wo.resizable_vars,\n\t\t\t\t$extra = $( c.namespace + '_extra_headers' ),\n\t\t\t\t$col = c.$table.children( 'colgroup' ).children( 'col' );\n\t\t\tstoredSizes = storedSizes || vars.storedSizes || [];\n\t\t\t// process only if table ID or url match\n\t\t\tif ( storedSizes.length ) {\n\t\t\t\tfor ( column = 0; column < c.columns; column++ ) {\n\t\t\t\t\t// set saved resizable widths\n\t\t\t\t\tts.resizable.setWidth( c.$headerIndexed[ column ], storedSizes[ column ], vars.overflow );\n\t\t\t\t\tif ( $extra.length ) {\n\t\t\t\t\t\t// stickyHeaders needs to modify min & max width as well\n\t\t\t\t\t\t$temp = $extra.eq( column ).add( $col.eq( column ) );\n\t\t\t\t\t\tts.resizable.setWidth( $temp, storedSizes[ column ], vars.overflow );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$temp = $( c.namespace + '_extra_table' );\n\t\t\t\tif ( $temp.length && !ts.hasWidget( c.table, 'scroller' ) ) {\n\t\t\t\t\tts.resizable.setWidth( $temp, c.$table.outerWidth(), vars.overflow );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tsetHandlePosition : function( c, wo ) {\n\t\t\tvar startPosition,\n\t\t\t\ttableHeight = c.$table.height(),\n\t\t\t\t$handles = wo.$resizable_container.children(),\n\t\t\t\thandleCenter = Math.floor( $handles.width() / 2 );\n\n\t\t\tif ( ts.hasWidget( c.table, 'scroller' ) ) {\n\t\t\t\ttableHeight = 0;\n\t\t\t\tc.$table.closest( '.' + ts.css.scrollerWrap ).children().each(function() {\n\t\t\t\t\tvar $this = $(this);\n\t\t\t\t\t// center table has a max-height set\n\t\t\t\t\ttableHeight += $this.filter('[style*=\"height\"]').length ? $this.height() : $this.children('table').height();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif ( !wo.resizable_includeFooter && c.$table.children('tfoot').length ) {\n\t\t\t\ttableHeight -= c.$table.children('tfoot').height();\n\t\t\t}\n\t\t\t// subtract out table left position from resizable handles. Fixes #864\n\t\t\t// jQuery v3.3.0+ appears to include the start position with the $header.position().left; see #1544\n\t\t\tstartPosition = parseFloat($.fn.jquery) >= 3.3 ? 0 : c.$table.position().left;\n\t\t\t$handles.each( function() {\n\t\t\t\tvar $this = $(this),\n\t\t\t\t\tcolumn = parseInt( $this.attr( 'data-column' ), 10 ),\n\t\t\t\t\tcolumns = c.columns - 1,\n\t\t\t\t\t$header = $this.data( 'header' );\n\t\t\t\tif ( !$header ) { return; } // see #859\n\t\t\t\tif (\n\t\t\t\t\t!$header.is(':visible') ||\n\t\t\t\t\t( !wo.resizable_addLastColumn && ts.resizable.checkVisibleColumns(c, column) )\n\t\t\t\t) {\n\t\t\t\t\t$this.hide();\n\t\t\t\t} else if ( column < columns || column === columns && wo.resizable_addLastColumn ) {\n\t\t\t\t\t$this.css({\n\t\t\t\t\t\tdisplay: 'inline-block',\n\t\t\t\t\t\theight : tableHeight,\n\t\t\t\t\t\tleft : $header.position().left - startPosition + $header.outerWidth() - handleCenter\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t// Fixes #1485\n\t\tcheckVisibleColumns: function( c, column ) {\n\t\t\tvar i,\n\t\t\t\tlen = 0;\n\t\t\tfor ( i = column + 1; i < c.columns; i++ ) {\n\t\t\t\tlen += c.$headerIndexed[i].is( ':visible' ) ? 1 : 0;\n\t\t\t}\n\t\t\treturn len === 0;\n\t\t},\n\n\t\t// prevent text selection while dragging resize bar\n\t\ttoggleTextSelection : function( c, wo, toggle ) {\n\t\t\tvar namespace = c.namespace + 'tsresize';\n\t\t\two.resizable_vars.disabled = toggle;\n\t\t\t$( 'body' ).toggleClass( ts.css.resizableNoSelect, toggle );\n\t\t\tif ( toggle ) {\n\t\t\t\t$( 'body' )\n\t\t\t\t\t.attr( 'unselectable', 'on' )\n\t\t\t\t\t.bind( 'selectstart' + namespace, false );\n\t\t\t} else {\n\t\t\t\t$( 'body' )\n\t\t\t\t\t.removeAttr( 'unselectable' )\n\t\t\t\t\t.unbind( 'selectstart' + namespace );\n\t\t\t}\n\t\t},\n\n\t\tbindings : function( c, wo ) {\n\t\t\tvar namespace = c.namespace + 'tsresize';\n\t\t\two.$resizable_container.children().bind( 'mousedown', function( event ) {\n\t\t\t\t// save header cell and mouse position\n\t\t\t\tvar column,\n\t\t\t\t\tvars = wo.resizable_vars,\n\t\t\t\t\t$extras = $( c.namespace + '_extra_headers' ),\n\t\t\t\t\t$header = $( event.target ).data( 'header' );\n\n\t\t\t\tcolumn = parseInt( $header.attr( 'data-column' ), 10 );\n\t\t\t\tvars.$target = $header = $header.add( $extras.filter('[data-column=\"' + column + '\"]') );\n\t\t\t\tvars.target = column;\n\n\t\t\t\t// if table is not as wide as it's parent, then resize the table\n\t\t\t\tvars.$next = event.shiftKey || wo.resizable_targetLast ?\n\t\t\t\t\t$header.parent().children().not( '.resizable-false' ).filter( ':last' ) :\n\t\t\t\t\t$header.nextAll( ':not(.resizable-false)' ).eq( 0 );\n\n\t\t\t\tcolumn = parseInt( vars.$next.attr( 'data-column' ), 10 );\n\t\t\t\tvars.$next = vars.$next.add( $extras.filter('[data-column=\"' + column + '\"]') );\n\t\t\t\tvars.next = column;\n\n\t\t\t\tvars.mouseXPosition = event.pageX;\n\t\t\t\tts.resizable.updateStoredSizes( c, wo );\n\t\t\t\tts.resizable.toggleTextSelection(c, wo, true );\n\t\t\t});\n\n\t\t\t$( document )\n\t\t\t\t.bind( 'mousemove' + namespace, function( event ) {\n\t\t\t\t\tvar vars = wo.resizable_vars;\n\t\t\t\t\t// ignore mousemove if no mousedown\n\t\t\t\t\tif ( !vars.disabled || vars.mouseXPosition === 0 || !vars.$target ) { return; }\n\t\t\t\t\tif ( wo.resizable_throttle ) {\n\t\t\t\t\t\tclearTimeout( vars.timer );\n\t\t\t\t\t\tvars.timer = setTimeout( function() {\n\t\t\t\t\t\t\tts.resizable.mouseMove( c, wo, event );\n\t\t\t\t\t\t}, isNaN( wo.resizable_throttle ) ? 5 : wo.resizable_throttle );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tts.resizable.mouseMove( c, wo, event );\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.bind( 'mouseup' + namespace, function() {\n\t\t\t\t\tif (!wo.resizable_vars.disabled) { return; }\n\t\t\t\t\tts.resizable.toggleTextSelection( c, wo, false );\n\t\t\t\t\tts.resizable.stopResize( c, wo );\n\t\t\t\t\tts.resizable.setHandlePosition( c, wo );\n\t\t\t\t});\n\n\t\t\t// resizeEnd event triggered by scroller widget\n\t\t\t$( window ).bind( 'resize' + namespace + ' resizeEnd' + namespace, function() {\n\t\t\t\tts.resizable.setHandlePosition( c, wo );\n\t\t\t});\n\n\t\t\t// right click to reset columns to default widths\n\t\t\tc.$table\n\t\t\t\t.bind( 'columnUpdate pagerComplete resizableUpdate '.split( ' ' ).join( namespace + ' ' ), function() {\n\t\t\t\t\tts.resizable.setHandlePosition( c, wo );\n\t\t\t\t})\n\t\t\t\t.bind( 'resizableReset' + namespace, function() {\n\t\t\t\t\tts.resizableReset( c.table );\n\t\t\t\t})\n\t\t\t\t.find( 'thead:first' )\n\t\t\t\t.add( $( c.namespace + '_extra_table' ).find( 'thead:first' ) )\n\t\t\t\t.bind( 'contextmenu' + namespace, function() {\n\t\t\t\t\t// $.isEmptyObject() needs jQuery 1.4+; allow right click if already reset\n\t\t\t\t\tvar allowClick = wo.resizable_vars.storedSizes.length === 0;\n\t\t\t\t\tts.resizableReset( c.table );\n\t\t\t\t\tts.resizable.setHandlePosition( c, wo );\n\t\t\t\t\two.resizable_vars.storedSizes = [];\n\t\t\t\t\treturn allowClick;\n\t\t\t\t});\n\n\t\t},\n\n\t\tmouseMove : function( c, wo, event ) {\n\t\t\tif ( wo.resizable_vars.mouseXPosition === 0 || !wo.resizable_vars.$target ) { return; }\n\t\t\t// resize columns\n\t\t\tvar column,\n\t\t\t\ttotal = 0,\n\t\t\t\tvars = wo.resizable_vars,\n\t\t\t\t$next = vars.$next,\n\t\t\t\ttar = vars.storedSizes[ vars.target ],\n\t\t\t\tleftEdge = event.pageX - vars.mouseXPosition;\n\t\t\tif ( vars.overflow ) {\n\t\t\t\tif ( tar + leftEdge > 0 ) {\n\t\t\t\t\tvars.storedSizes[ vars.target ] += leftEdge;\n\t\t\t\t\tts.resizable.setWidth( vars.$target, vars.storedSizes[ vars.target ], true );\n\t\t\t\t\t// update the entire table width\n\t\t\t\t\tfor ( column = 0; column < c.columns; column++ ) {\n\t\t\t\t\t\ttotal += vars.storedSizes[ column ];\n\t\t\t\t\t}\n\t\t\t\t\tts.resizable.setWidth( c.$table.add( $( c.namespace + '_extra_table' ) ), total );\n\t\t\t\t}\n\t\t\t\tif ( !$next.length ) {\n\t\t\t\t\t// if expanding right-most column, scroll the wrapper\n\t\t\t\t\tvars.$wrap[0].scrollLeft = c.$table.width();\n\t\t\t\t}\n\t\t\t} else if ( vars.fullWidth ) {\n\t\t\t\tvars.storedSizes[ vars.target ] += leftEdge;\n\t\t\t\tvars.storedSizes[ vars.next ] -= leftEdge;\n\t\t\t\tts.resizable.setWidths( c, wo );\n\t\t\t} else {\n\t\t\t\tvars.storedSizes[ vars.target ] += leftEdge;\n\t\t\t\tts.resizable.setWidths( c, wo );\n\t\t\t}\n\t\t\tvars.mouseXPosition = event.pageX;\n\t\t\t// dynamically update sticky header widths\n\t\t\tc.$table.triggerHandler('stickyHeadersUpdate');\n\t\t},\n\n\t\tstopResize : function( c, wo ) {\n\t\t\tvar vars = wo.resizable_vars;\n\t\t\tts.resizable.updateStoredSizes( c, wo );\n\t\t\tif ( vars.useStorage ) {\n\t\t\t\t// save all column widths\n\t\t\t\tts.storage( c.table, ts.css.resizableStorage, vars.storedSizes );\n\t\t\t\tts.storage( c.table, 'tablesorter-table-resized-width', c.$table.width() );\n\t\t\t}\n\t\t\tvars.mouseXPosition = 0;\n\t\t\tvars.$target = vars.$next = null;\n\t\t\t// will update stickyHeaders, just in case, see #912\n\t\t\tc.$table.triggerHandler('stickyHeadersUpdate');\n\t\t\tc.$table.triggerHandler('resizableComplete');\n\t\t}\n\t};\n\n\t// this widget saves the column widths if\n\t// $.tablesorter.storage function is included\n\t// **************************\n\tts.addWidget({\n\t\tid: 'resizable',\n\t\tpriority: 40,\n\t\toptions: {\n\t\t\tresizable : true, // save column widths to storage\n\t\t\tresizable_addLastColumn : false,\n\t\t\tresizable_includeFooter: true,\n\t\t\tresizable_widths : [],\n\t\t\tresizable_throttle : false, // set to true (5ms) or any number 0-10 range\n\t\t\tresizable_targetLast : false\n\t\t},\n\t\tinit: function(table, thisWidget, c, wo) {\n\t\t\tts.resizable.init( c, wo );\n\t\t},\n\t\tformat: function( table, c, wo ) {\n\t\t\tts.resizable.setHandlePosition( c, wo );\n\t\t},\n\t\tremove: function( table, c, wo, refreshing ) {\n\t\t\tif (wo.$resizable_container) {\n\t\t\t\tvar namespace = c.namespace + 'tsresize';\n\t\t\t\tc.$table.add( $( c.namespace + '_extra_table' ) )\n\t\t\t\t\t.removeClass('hasResizable')\n\t\t\t\t\t.children( 'thead' )\n\t\t\t\t\t.unbind( 'contextmenu' + namespace );\n\n\t\t\t\two.$resizable_container.remove();\n\t\t\t\tts.resizable.toggleTextSelection( c, wo, false );\n\t\t\t\tts.resizableReset( table, refreshing );\n\t\t\t\t$( document ).unbind( 'mousemove' + namespace + ' mouseup' + namespace );\n\t\t\t}\n\t\t}\n\t});\n\n\tts.resizableReset = function( table, refreshing ) {\n\t\t$( table ).each(function() {\n\t\t\tvar index, $t,\n\t\t\t\tc = this.config,\n\t\t\t\two = c && c.widgetOptions,\n\t\t\t\tvars = wo.resizable_vars;\n\t\t\tif ( table && c && c.$headerIndexed.length ) {\n\t\t\t\t// restore the initial table width\n\t\t\t\tif ( vars.overflow && vars.tableWidth ) {\n\t\t\t\t\tts.resizable.setWidth( c.$table, vars.tableWidth, true );\n\t\t\t\t\tif ( vars.useStorage ) {\n\t\t\t\t\t\tts.storage( table, 'tablesorter-table-resized-width', vars.tableWidth );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor ( index = 0; index < c.columns; index++ ) {\n\t\t\t\t\t$t = c.$headerIndexed[ index ];\n\t\t\t\t\tif ( wo.resizable_widths && wo.resizable_widths[ index ] ) {\n\t\t\t\t\t\tts.resizable.setWidth( $t, wo.resizable_widths[ index ], vars.overflow );\n\t\t\t\t\t} else if ( !$t.hasClass( 'resizable-false' ) ) {\n\t\t\t\t\t\t// don't clear the width of any column that is not resizable\n\t\t\t\t\t\tts.resizable.setWidth( $t, '', vars.overflow );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// reset stickyHeader widths\n\t\t\t\tc.$table.triggerHandler( 'stickyHeadersUpdate' );\n\t\t\t\tif ( ts.storage && !refreshing ) {\n\t\t\t\t\tts.storage( this, ts.css.resizableStorage, [] );\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n})( jQuery, window );\n\n/*! Widget: saveSort - updated 2018-03-19 (v2.30.1) *//*\n* Requires tablesorter v2.16+\n* by Rob Garrison\n*/\n;(function ($) {\n\t'use strict';\n\tvar ts = $.tablesorter || {};\n\n\tfunction getStoredSortList(c) {\n\t\tvar stored = ts.storage( c.table, 'tablesorter-savesort' );\n\t\treturn (stored && stored.hasOwnProperty('sortList') && $.isArray(stored.sortList)) ? stored.sortList : [];\n\t}\n\n\tfunction sortListChanged(c, sortList) {\n\t\treturn (sortList || getStoredSortList(c)).join(',') !== c.sortList.join(',');\n\t}\n\n\t// this widget saves the last sort only if the\n\t// saveSort widget option is true AND the\n\t// $.tablesorter.storage function is included\n\t// **************************\n\tts.addWidget({\n\t\tid: 'saveSort',\n\t\tpriority: 20,\n\t\toptions: {\n\t\t\tsaveSort : true\n\t\t},\n\t\tinit: function(table, thisWidget, c, wo) {\n\t\t\t// run widget format before all other widgets are applied to the table\n\t\t\tthisWidget.format(table, c, wo, true);\n\t\t},\n\t\tformat: function(table, c, wo, init) {\n\t\t\tvar time,\n\t\t\t\t$table = c.$table,\n\t\t\t\tsaveSort = wo.saveSort !== false, // make saveSort active/inactive; default to true\n\t\t\t\tsortList = { 'sortList' : c.sortList },\n\t\t\t\tdebug = ts.debug(c, 'saveSort');\n\t\t\tif (debug) {\n\t\t\t\ttime = new Date();\n\t\t\t}\n\t\t\tif ($table.hasClass('hasSaveSort')) {\n\t\t\t\tif (saveSort && table.hasInitialized && ts.storage && sortListChanged(c)) {\n\t\t\t\t\tts.storage( table, 'tablesorter-savesort', sortList );\n\t\t\t\t\tif (debug) {\n\t\t\t\t\t\tconsole.log('saveSort >> Saving last sort: ' + c.sortList + ts.benchmark(time));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// set table sort on initial run of the widget\n\t\t\t\t$table.addClass('hasSaveSort');\n\t\t\t\tsortList = '';\n\t\t\t\t// get data\n\t\t\t\tif (ts.storage) {\n\t\t\t\t\tsortList = getStoredSortList(c);\n\t\t\t\t\tif (debug) {\n\t\t\t\t\t\tconsole.log('saveSort >> Last sort loaded: \"' + sortList + '\"' + ts.benchmark(time));\n\t\t\t\t\t}\n\t\t\t\t\t$table.bind('saveSortReset', function(event) {\n\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\tts.storage( table, 'tablesorter-savesort', '' );\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t// init is true when widget init is run, this will run this widget before all other widgets have initialized\n\t\t\t\t// this method allows using this widget in the original tablesorter plugin; but then it will run all widgets twice.\n\t\t\t\tif (init && sortList && sortList.length > 0) {\n\t\t\t\t\tc.sortList = sortList;\n\t\t\t\t} else if (table.hasInitialized && sortList && sortList.length > 0) {\n\t\t\t\t\t// update sort change\n\t\t\t\t\tif (sortListChanged(c, sortList)) {\n\t\t\t\t\t\tts.sortOn(c, sortList);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tremove: function(table, c) {\n\t\t\tc.$table.removeClass('hasSaveSort');\n\t\t\t// clear storage\n\t\t\tif (ts.storage) { ts.storage( table, 'tablesorter-savesort', '' ); }\n\t\t}\n\t});\n\n})(jQuery);\nreturn jQuery.tablesorter;}));\n","// Main javascript entry point\r\n// Should handle bootstrapping/starting application\r\n\r\n'use strict';\r\n\r\nimport 'match-media';\r\nimport $ from 'jquery';\r\nimport 'fancybox';\r\nimport 'jquery-match-height';\r\nimport 'slick-carousel';\r\nimport 'tablesorter';\r\nimport objectFitImages from 'object-fit-images';\r\nimport objectFitVideos from 'object-fit-videos';\r\nimport TableResponsive from '../_modules/table-responsive/table-responsive';\r\nimport CloneSelect from '../_modules/clone-select/clone-select';\r\nimport ViewController from '../_modules/view-controller/view-controller';\r\n\r\nimport NavTabsAnchor from '../_modules/molecules/nav-tabs-anchor/nav-tabs-anchor';\r\nimport SubscribeForm from '../_modules/molecules/subscribe-form/subscribe-form';\r\nimport Modal from '../_modules/organisms/modal/modal';\r\n\r\n// import SocialMedia from '../_modules/organisms/social-media/social-media';\r\nimport Carousel from '../_modules/organisms/carousel/carousel';\r\nimport SolutionsServices from '../_modules/organisms/solutions-services/solutions-services';\r\nimport InsightComponent from '../_modules/organisms/insight-component/insight-component';\r\nimport AccordionWrapper from '../_modules/organisms/accordion-wrapper/accordion-wrapper';\r\nimport ListingFilters from '../_modules/organisms/listing-filters/listing-filters';\r\nimport SiteHeader from '../_modules/organisms/site-header/site-header';\r\nimport Agenda from '../_modules/organisms/agenda/agenda';\r\nimport FeaturedSpeakers from '../_modules/organisms/featured-speakers/featured-speakers';\r\nimport NewsroomWrapper from '../_modules/organisms/newsroom-wrapper/newsroom-wrapper';\r\nimport ResellerLocator from '../_modules/organisms/reseller-locator/reseller-locator';\r\nimport ImageLinksWrapper from '../_modules/organisms/image-links-wrapper/image-links-wrapper';\r\nimport Mapper from '../_modules/organisms/mapper/mapper';\r\nimport Form from '../_modules/organisms/form/form';\r\nimport Tabs from '../_modules/organisms/tabs/tabs';\r\nimport TabCarousel from '../_modules/organisms/tab-carousel/tab-carousel';\r\nimport WffmAddRemoveFields from '../_modules/wffm-add-remove-fields/wffm-add-remove-fields';\r\nimport StoreLocator from '../_modules/organisms/store-locator/store-locator';\r\nimport AlipayForm from '../_modules/organisms/alipay-form/alipay-form';\r\nimport ProductFinder from '../_modules/organisms/product-finder/product-finder';\r\nimport ProductFinderCompare from '../_modules/organisms/product-finder-compare/product-finder-compare';\r\nimport ProductItem from '../_modules/molecules/product-item/product-item';\r\nimport QuestionItem from '../_modules/molecules/question-item/question-item';\r\n\r\n(function($){\r\n\t$(() => {\r\n\t\tlet config = {\r\n\t\t\tbreakpoints: {\r\n\t\t\t\tmidDesktop: 1366,\r\n\t\t\t\tdesktop: 1024,\r\n\t\t\t\ttablet: 768,\r\n\t\t\t\tlgMobile: 480\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//Polyfill for object-fit for images and videos\r\n\t\tobjectFitImages();\r\n\t\tobjectFitVideos();\r\n\r\n\t\t// Apply wrapper for table\r\n\t\tif ($('table').length) {\r\n\t\t\tnew TableResponsive();\r\n\t\t}\r\n\r\n\t\tif ($('.sorting-table').length) {\r\n\t\t\t$('.sorting-table').tablesorter();\r\n\t\t}\r\n\r\n\t\tnew CloneSelect();\r\n\t\tnew SiteHeader();\r\n\t\tnew Modal();\r\n\t\tnew Carousel();\r\n\t\tnew TabCarousel();\r\n\t\tnew NavTabsAnchor();\r\n\t\tnew AccordionWrapper();\r\n\t    new ImageLinksWrapper();\r\n\t\tnew Tabs();\r\n\r\n\t    if($('.subscribe-form').length){\r\n\t    \tnew SubscribeForm();\r\n\t    }\r\n\r\n\t\tif($('.event-agenda').length){\r\n\t\t\tnew Agenda();\r\n\t\t}\r\n\r\n\t\tif($('.event-featured-speakers-wrapper').length){\r\n\t\t\tnew FeaturedSpeakers();\r\n\t\t}\r\n\r\n\t    new Form();\r\n\r\n        if($('fieldset.CollapsibleFieldSet').length){\r\n    \t\tnew WffmAddRemoveFields();\r\n    \t}\r\n\r\n\t\tif($('.newsroom').length){\r\n\t\t\tnew NewsroomWrapper();\r\n\t\t}\r\n\r\n\t\tif($('.product-listing').length){\r\n\t        new ListingFilters('products');\r\n\t    }\r\n\r\n\t\tif($('.career-listing').length){\r\n\t        new ListingFilters('careers');\r\n\t    }\r\n\r\n\t    if($('.solution-services').length){\r\n\t    \tnew SolutionsServices();\r\n\t    }\r\n\r\n\t    if($('.insight').length){\r\n\t    \tnew ViewController();\r\n\t    \tnew InsightComponent();\r\n\t    }\r\n\r\n\t    if($('.success-stories-mapper').length){\r\n\t        new Mapper('story');\r\n\t    }\r\n\t    if($('.event-mapper').length){\r\n\t        new Mapper('event');\r\n\t    }\r\n\r\n\t    if($('.reseller-locator').length){\r\n\t\t\tif($('.google-locator').length){\r\n\t\t\t\tnew StoreLocator('google');\r\n\t\t\t}\r\n\r\n\t\t\telse if($('.baidu-locator').length){\r\n\t\t\t\tnew StoreLocator('baidu');\r\n\t\t\t}\r\n\r\n\t\t\telse if($('.naver-locator').length){\r\n\t\t\t\tnew StoreLocator('naver');\r\n\t\t\t}\r\n\r\n\t\t\telse {\r\n\t\t\t\tnew ResellerLocator();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif($('.alipay-form').length){\r\n\t\t\tnew AlipayForm();\r\n\t\t}\r\n\r\n\t\tif($('.product-finder').length){\r\n\t\t\tnew ProductFinder();\r\n\t\t}\r\n\r\n\t\tif($('.product-finder-compare').length){\r\n\t\t\tnew ProductFinderCompare(config);\r\n\t\t}\r\n\r\n\t\tif($('.product-item').length){\r\n\t\t\tnew ProductItem();\r\n\t\t}\r\n\r\n\t\tif($('.question-item').length){\r\n\t\t\tnew QuestionItem();\r\n\t\t}\r\n\r\n\t\t// match height //\r\n\t\t$('.match-height').matchHeight();\r\n\r\n\t\t/**\r\n\t\t * Focus outline handler\r\n\t\t */\r\n\t\t$('body').addClass().on('keydown', function(e){\r\n\t\t\tif(e.which === 9){\r\n\t\t\t\t$('body').removeClass('no-focus-outline');\r\n\t\t\t}\r\n\t\t}).on('mouseup', function(){\r\n\t\t\t$('body').addClass('no-focus-outline');\r\n\t\t});\r\n\r\n\t    /**\r\n\t\t * Back to top\r\n\t\t */\r\n\t\tlet backToTopText = $('#back-to-top').data('text');\r\n\t\tlet $wrapper = $('<div/>'),\r\n\t\t    $anchor = $('<i class=\"icon-angle-up\"></i><span class=\"label\">' + backToTopText + '</span>');\r\n\r\n\t\t$wrapper\r\n\t\t    .addClass('back-to-top')\r\n\t\t    .append($anchor);\r\n\r\n\t\t$('body').append($wrapper);\r\n\r\n\t\t/**\r\n\t\t * Bind Behaviours\r\n\t\t */\r\n\t\t$wrapper\r\n\t\t    .on('click', function(e){\r\n\t\t        $('html, body').stop().animate({'scrollTop': 0});\r\n\t\t        e.preventDefault();\r\n\t\t    });\r\n\r\n\t\tvar scrolling = function(){\r\n\t\t    var scrollTop = $(window).scrollTop();\r\n\r\n\t\t    if(scrollTop > $(window).height()) {\r\n\t\t        $wrapper.fadeIn();\r\n\t\t    } else {\r\n\t\t        $wrapper.fadeOut();\r\n\t\t\t}\r\n\r\n\t\t\tif (scrollTop > 80){\r\n\t\t\t\tif(!$('.sticky-buttons').hasClass('visible')){\r\n\t\t\t\t\t$('.sticky-buttons').addClass('visible');\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (scrollTop > $(document).height() - $(window).height() - 80) {\r\n\t\t\t\t\tif ($('.sticky-buttons').hasClass('visible')) {\r\n\t\t\t\t\t\t$('.sticky-buttons').removeClass('visible');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif ($('.sticky-buttons').hasClass('visible')) {\r\n\t\t\t\t\t$('.sticky-buttons').removeClass('visible');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * On Scroll\r\n\t\t */\r\n\t\t$(window).on('scroll.window', scrolling).trigger('scroll.window');\r\n\t});\r\n})(jQuery)\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\n\r\nexport default class CloneSelect {\r\n\tconstructor() {\r\n\r\n\t\tif($('.solutions-filter').length || $('.event-mapper').length || $('.success-stories-mapper').length || $('.reseller-locator__filters').length) {\r\n\t\t\tlet $select = $('select').not('.scfForm select');\r\n\r\n\t\t\t$select.map((i,ele) => {\r\n\t\t\t\tlet $this = $(ele);\r\n\r\n\t\t\t\tlet firstOption = $('option', $this).first().text(),\r\n\t\t\t\t\tfirstValue = $('option', $this).first().val(),\r\n\t\t\t\t\t_clone = `<div class=\"dropdown-copy\"><button type=\"button\" value=\"${firstValue}\">${firstOption}</button></div>`;\r\n\r\n\t\t\t\t$this.before(_clone);\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet $select = $('select').not('.scfForm select');\r\n\r\n\t\t\t$select.map((i,ele) => {\r\n\t\t\t\tlet $this = $(ele),\r\n\t\t\t\t\t$option = $('option', $this);\r\n\r\n\t\t\t\tlet firstOption = $('option', $this).first().text(),\r\n\t\t\t\t\tfirstValue = $('option', $this).first().val(),\r\n\t\t\t\t\t_clone = `<div class=\"dropdown-copy\"><button type=\"button\" value=\"${firstValue}\">${firstOption}</button><ul>`;\r\n\r\n\t\t\t\t$option.each(function() {\r\n\t\t\t\t\tlet text = $(this).text(),\r\n\t\t\t\t\t\tvalue = '';\r\n\r\n\t\t\t\t\tif($(this).attr('value')){\r\n\t\t\t\t\t\tvalue = $(this).attr('value');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet _optionClone = `<li><button type=\"button\" value=\"${value}\"><span>${text}</span></button></li>`;\r\n\t\t\t\t\t_clone += _optionClone;\r\n\t\t\t\t});\r\n\r\n\t\t\t\t_clone = `${_clone}</ul></div>`;\r\n\r\n\t\t\t\t$this.after(_clone);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\ttoggleDropdown($object){\r\n\t\t$object.toggle();\r\n\t}\r\n\r\n\tcloseDropdown($object){\r\n\t\t$object.hide();\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\nimport enquire from 'enquire.js';\r\nimport 'slick-carousel';\r\n\r\nexport default class CompareItem {\r\n\tconstructor(breakpoints) {\r\n\t\tlet $compareList = $('.compare-list');\r\n\r\n\t\t$('.compare-item__header > div').matchHeight();\r\n\t\t$('.compare-item__header > p').matchHeight();\r\n\r\n\t\tenquire.register('screen and (max-width: ' + (breakpoints.desktop - 1) + 'px)', {\r\n\t\t\tmatch: () => {\r\n\r\n\t\t\t\t// $compareList.on('afterChange', function (event, slick, currentSlide) {\r\n\t\t\t\t// \t$('.specrow1').matchHeight._update();\r\n\t\t\t\t// \t$('.specrow2').matchHeight._update();\r\n\t\t\t\t// \t$('.specrow3').matchHeight._update();\r\n\t\t\t\t// \t$('.specrow4').matchHeight._update();\r\n\t\t\t\t// \t$('.specrow5').matchHeight._update();\r\n\t\t\t\t// \t$('.specrow6').matchHeight._update();\r\n\t\t\t\t// \t$('.specrow7').matchHeight._update();\r\n\t\t\t\t// \t$('.specrow8').matchHeight._update();\r\n\t\t\t\t// \t$('.specrow9').matchHeight._update();\r\n\t\t\t\t// \t$('.specrow10').matchHeight._update();\r\n\t\t\t\t// \t$('.specrow11').matchHeight._update();\r\n\t\t\t\t// \t$('.specrow12').matchHeight._update();\r\n\t\t\t\t// \t$('.specrow13').matchHeight._update();\r\n\t\t\t\t// \t$('.specrow14').matchHeight._update();\r\n\t\t\t\t// \t$('.specrow15').matchHeight._update();\r\n\t\t\t\t// \t$('.specrow16').matchHeight._update();\r\n\t\t\t\t// \t$('.specrowlast').matchHeight._update();\r\n\t\t\t\t// });\r\n\r\n\t\t\t\t$compareList.slick({\r\n\t\t\t\t\tslidesToShow: 2,\r\n\t\t\t\t\tarrows: true,\r\n\t\t\t\t\tswipeToSlide: true,\r\n\t\t\t\t\tinfinite: false,\r\n\t\t\t\t\tprevArrow: '<button type=\"button\" class=\"slick-prev prev\"><span class=\"icon icon-angle-left\"></span></button>',\r\n\t\t\t\t\tnextArrow: '<button type=\"button\" class=\"slick-next next\"><span class=\"icon icon-angle-right\"></span></button>'\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tunmatch: () => {\r\n\t\t\t\t$compareList.slick('unslick');\r\n\t\t\t\t// $('.specrow1').matchHeight._update();\r\n\t\t\t\t// $('.specrow2').matchHeight._update();\r\n\t\t\t\t// $('.specrow3').matchHeight._update();\r\n\t\t\t\t// $('.specrow4').matchHeight._update();\r\n\t\t\t\t// $('.specrow5').matchHeight._update();\r\n\t\t\t\t// $('.specrow6').matchHeight._update();\r\n\t\t\t\t// $('.specrow7').matchHeight._update();\r\n\t\t\t\t// $('.specrow8').matchHeight._update();\r\n\t\t\t\t// $('.specrow9').matchHeight._update();\r\n\t\t\t\t// $('.specrow10').matchHeight._update();\r\n\t\t\t\t// $('.specrow11').matchHeight._update();\r\n\t\t\t\t// $('.specrow12').matchHeight._update();\r\n\t\t\t\t// $('.specrow13').matchHeight._update();\r\n\t\t\t\t// $('.specrow14').matchHeight._update();\r\n\t\t\t\t// $('.specrow15').matchHeight._update();\r\n\t\t\t\t// $('.specrow16').matchHeight._update();\r\n\t\t\t\t// $('.specrowlast').matchHeight._update();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\n\r\nexport default class ListingSorter {\r\n\tconstructor() {\r\n\r\n\t\tthis.name = 'listing-sorter';\r\n\t\t// console.log('%s module', this.name);\r\n\r\n\t\tthis.results = [];\r\n\r\n\t\tthis.$sortSelect = $('.listing-content__sort-result select');\r\n\r\n\t\tlet _this = this;\r\n\r\n\t\t_this.$sortSelect.on('change', function(){\r\n\t\t\tvar results = [].concat(_this.results); // to preserve default results\r\n\t\t\tresults = _this.toggleSort($(this).val(), results);\r\n\r\n\t\t\t_this.view.clear();\r\n\t\t\t_this.view.render(results, true);\r\n\t\t});\r\n\r\n\t\tlet $sorter = $('.listing-content__sort-result');\r\n\t\t$sorter.map((i, ele) => {\r\n\t\t\tlet $this = $(ele),\r\n\t\t\t\t$clone = $('.dropdown-copy', $this),\r\n\t\t\t\t$dropdown = $('ul', $this),\r\n\t\t\t\t$button = $('> button', $clone);\r\n\r\n\t\t\t$this.on('click', (e) => {\r\n\t\t\t\te.stopPropagation();\r\n\t\t\t\tthis.toggleDropdown($dropdown);\r\n\t\t\t});\r\n\r\n\t\t\tlet $option = $('li button', $dropdown);\r\n\r\n\t\t\t$option.map((j, ele) => {\r\n\t\t\t\tlet $this2 = $(ele);\r\n\r\n\t\t\t\t$this2.on('click', () => {\r\n\t\t\t\t\tlet value = $this2.val(),\r\n\t\t\t\t\t\ttext = $this2.text();\r\n\r\n\t\t\t\t\t$button.text(text);\r\n\t\t\t\t\t$button.val(value);\r\n\t\t\t\t\t$('select', $this).val(value);\r\n\t\t\t\t\t_this.$sortSelect.trigger('change');\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t$(window).on('click', () => {\r\n\t\t\tthis.closeDropdown($('ul', $sorter));\r\n    \t});\r\n\t}\r\n\r\n\ttoggleDropdown($object){\r\n\t\t$object.toggle();\r\n\t}\r\n\r\n\tcloseDropdown($object){\r\n\t\t$object.hide();\r\n\t}\r\n\r\n\tsetResults(results) {\r\n\t\tthis.results = results.slice().concat(); // Deep copy results from original data to reset sorting.\r\n\t}\r\n\r\n\tsetView(fn) {\r\n\t\tthis.view = fn;\r\n\t}\r\n\r\n\ttoggleSort(sortParam, results) {\r\n\t\tlet parameter = '',\r\n\t\t\tsortParameter = '',\r\n\t\t\tsortedResults = [];\r\n\r\n\t\tlet mergeSortTopDown = (array, parameter) => {\r\n\t\t\tif(array.length < 2) {\r\n\t\t\t\treturn array;\r\n\t\t\t}\r\n\r\n\t\t\tlet middle = Math.floor(array.length / 2);\r\n\t\t\tlet left = array.slice(0, middle);\r\n\t\t\tlet right = array.slice(middle);\r\n\r\n\t\t\treturn mergeTopDown(mergeSortTopDown(left, parameter), mergeSortTopDown(right, parameter), parameter);\r\n\t\t}\r\n\r\n\t\tlet mergeTopDown = (left, right, parameter) => {\r\n\t\t\tlet array = [];\r\n\r\n\t\t\twhile(left.length && right.length) {\r\n\t\t\t\tif(parameter == 'compareDate'){\r\n\t\t\t\t\tif(left[0][parameter] > right[0][parameter]) {\r\n\t\t\t\t\t\tarray.push(left.shift());\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tarray.push(right.shift());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif(left[0][parameter] < right[0][parameter]) {\r\n\t\t\t\t\t\tarray.push(left.shift());\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tarray.push(right.shift());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn array.concat(left.slice()).concat(right.slice());\r\n\t\t}\r\n\r\n\t\tlet customSort = (results, parameter) => {\r\n\t\t\tlet valid = [],\r\n\t\t\t\tinvalid = [];\r\n\r\n\t\t\tif(parameter == 'date'){\r\n\t\t\t\tfor(let i = 0; i < results.length; i++){\r\n\t\t\t\t\tif(new Date(results[i][parameter]) == 'Invalid Date'){\r\n\t\t\t\t\t\tinvalid.push(results[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tvalid.push(results[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor(let i = 0; i < valid.length; i++){\r\n\t\t\t\t\tvalid[i].compareDate = new Date(valid[i][parameter]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsortParameter = 'compareDate';\r\n\t\t\t\tvalid = mergeSortTopDown(valid.slice(), sortParameter);\r\n\t\t\t\tinvalid = mergeSortTopDown(invalid.slice(), 'name');\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif(parameter == 'recommended'){\r\n\t\t\t\t\tfor(let j = 0; j < results.length; j++){\r\n\t\t\t\t\t\tif(typeof results[j][parameter] !== 'undefined'){\r\n\t\t\t\t\t\t\tvalid.push(results[j]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tinvalid.push(results[j]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfor(let k = 0; k < results.length; k++){\r\n\t\t\t\t\t\tif(results[k][parameter] === true){\r\n\t\t\t\t\t\t\tvalid.push(results[k]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tinvalid.push(results[k]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsortParameter = 'name';\r\n\t\t\t\tvalid = mergeSortTopDown(valid.slice(), sortParameter);\r\n\t\t\t\tinvalid = mergeSortTopDown(invalid.slice(), sortParameter);\r\n\t\t\t}\r\n\r\n\t\t\t$.merge(valid, invalid);\r\n\r\n\t\t\treturn valid;\r\n\t\t}\r\n\r\n\t\tswitch(sortParam) {\r\n\t\t\tcase 'latest' :\r\n\t\t\t\tparameter = 'date';\r\n\t\t\t\tsortedResults = customSort(results, parameter);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t\t// results.sort(function(a,b){\r\n\t\t\t\t// \t\tif (new Date(a.date) == 'Invalid Date'){\r\n\t\t\t\t// \t\t\treturn 1;\r\n\t\t\t\t// \t\t}\r\n\t\t\t\t// \t\tif (new Date(b.date) == 'Invalid Date'){\r\n\t\t\t\t// \t\t\treturn -1;\r\n\t\t\t\t// \t\t}\r\n\t\t\t\t// \t\tif (new Date(a.date) < new Date(b.date)) {\r\n\t\t\t\t// \t\t\treturn 1;\r\n\t\t\t\t// \t\t}\r\n\t\t\t\t// \t\tif (new Date(a.date) > new Date(b.date)) {\r\n\t\t\t\t// \t\t\treturn -1;\r\n\t\t\t\t// \t\t}\r\n\t\t\t\t// \t\tif (new Date(a.date) == new Date(b.date)){\r\n\t\t\t\t// \t\t\treturn 0;\r\n\t\t\t\t// \t\t}\r\n\t\t\t\t// \t}\r\n\t\t\t\t// );\r\n\r\n\t\t\tcase 'promotion' :\r\n\t\t\t\tparameter = 'promoted';\r\n\t\t\t\tsortedResults = customSort(results, parameter);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t\t// results.sort(function(a,b){\r\n\t\t\t\t// \t\t// if(a.promoted == true && b.promoted == true) return 0;\r\n\t\t\t\t// \t\t// if(a.promoted == true && b.promoted == false) return -1;\r\n\t\t\t\t// \t\t// if(a.promoted == false && b.promoted == true) return 1;\r\n\t\t\t\t// \t\tif(a.promoted === b.promoted){\r\n\t\t\t\t// \t\t\treturn 0;\r\n\t\t\t\t// \t\t}\r\n\t\t\t\t// \t\telse{\r\n\t\t\t\t// \t\t\tif(a.promoted){\r\n\t\t\t\t// \t\t\t\treturn -1;\r\n\t\t\t\t// \t\t\t}\r\n\t\t\t\t// \t\t\telse{\r\n\t\t\t\t// \t\t\t\treturn 1;\r\n\t\t\t\t// \t\t\t}\r\n\t\t\t\t// \t\t}\r\n\t\t\t\t// \t}\r\n\t\t\t\t// );\r\n\r\n\t\t\tcase 'best seller' :\r\n\t\t\t\tparameter = 'bestseller';\r\n\t\t\t\tsortedResults = customSort(results, parameter);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t\t// results.sort(function(a,b){\r\n\t\t\t\t// \t\t// if(a.bestseller == true && b.bestseller == true) return 0;\r\n\t\t\t\t// \t\t// if(a.bestseller == true && b.bestseller == false) return -1;\r\n\t\t\t\t// \t\t// if(a.bestseller == false && b.bestseller == true) return 1;\r\n\t\t\t\t// \t\tif(a.bestseller === b.bestseller){\r\n\t\t\t\t// \t\t\treturn 0;\r\n\t\t\t\t// \t\t}\r\n\t\t\t\t// \t\telse{\r\n\t\t\t\t// \t\t\tif(a.bestseller){\r\n\t\t\t\t// \t\t\t\treturn -1;\r\n\t\t\t\t// \t\t\t}\r\n\t\t\t\t// \t\t\telse{\r\n\t\t\t\t// \t\t\t\treturn 1;\r\n\t\t\t\t// \t\t\t}\r\n\t\t\t\t// \t\t}\r\n\t\t\t\t// \t}\r\n\t\t\t\t// );\r\n\r\n\t\t\tcase 'recommended' :\r\n\t\t\t\tparameter = 'recommended';\r\n\t\t\t\tsortedResults = customSort(results, parameter);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t\t// results.sort(function(a,b){\r\n\t\t\t\t// \t\tif(typeof a.recommended !== 'undefined' && typeof b.recommended !== 'undefined') return 0;\r\n\t\t\t\t// \t\tif(typeof a.recommended !== 'undefined' && typeof b.recommended === 'undefined') return -1;\r\n\t\t\t\t// \t\tif(typeof a.recommended === 'undefined' && typeof b.recommended !== 'undefined') return 1;\r\n\t\t\t\t// \t}\r\n\t\t\t\t// );\r\n\t\t}\r\n\r\n\t\treturn sortedResults;\r\n\t}\r\n\r\n\t/**\r\n\t * Bubble promotion in results to the top\r\n\t */\r\n\tbubblePromotion() {\r\n\t\tlet temp;\r\n\r\n\t\tfor (let i = 0; i < this.results.length - 1; i++) {\r\n\r\n\t\t\tif(typeof this.results[i].promoted !== 'undefined') {\r\n\r\n\t\t\t\t for (var x = i; x > 0; x--) {\r\n\t\t\t\t\ttemp = this.results[x-1];\r\n\t\t\t\t\tthis.results[x-1] = this.results[x];\r\n\t\t\t\t\tthis.results[x] = temp;\r\n\t\t\t\t }\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\n\r\nexport default class NavTabsAnchor {\r\n\tconstructor() {\r\n\t\t// let $anchorTabs = $('.anchor-tabs')\r\n\t\tlet $anchor = $('.anchor-link');\r\n\r\n\t\tlet _listWrapper = '<div class=\"anchor-tabs\"><ul>';\r\n\r\n\t\tif($anchor.length){\r\n\t\t\t$anchor.map((i, ele) => {\r\n\t\t\t\tlet $this = $(ele);\r\n\r\n\t\t\t\tlet label = $this.data('label'),\r\n\t\t\t\t\thref = $this.attr('id');\r\n\r\n\t\t\t\tif(typeof href !== \"undefined\"){\r\n\t\t\t\t\tlet _append = `<li><a href=\"#${href}\">${label}</a></li>`;\r\n\t\t\t\t\t_listWrapper += _append;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t_listWrapper += '</ul></div>';\r\n\r\n\t\t\t$('.top-banner').append(_listWrapper);\r\n\r\n\t\t\tlet $anchorTabs = $('.anchor-tabs');\r\n\r\n\t\t\t$('a', $anchorTabs).on('click', function(e){\r\n\t\t\t\t// let navOffset = $('.site-header').height();\r\n\r\n\t\t\t\t// if($('.site-header').hasClass('fix')){\r\n\t\t\t\t// \tnavOffset = 138;\r\n\t\t\t\t// }\r\n\t\t\t\t// else {\r\n\t\t\t\t// \tnavOffset = 210;\r\n\t\t\t\t// }\r\n\r\n\t            e.preventDefault();\r\n\r\n\t            let $target = $($(this).attr('href'));\r\n\r\n\t            $('html, body').stop(true, true).animate({\r\n\t                scrollTop: $target.offset().top + $(window).scrollTop() - 100\r\n\t            }, 500);\r\n\t        });\r\n\t\t}\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\nimport 'jquery-match-height';\r\n\r\nexport default class ProductItem {\r\n\tconstructor() {\r\n\t\tlet $productItem = $('.product-item--wrap');\r\n\t\tlet itemImg = $('.product-item__img', $productItem),\r\n\t\t\titemTitle = $('h3', $productItem),\r\n\t\t\titemDesc = $('p', $productItem);\r\n\r\n\t\tif ($productItem.length) {\r\n\t\t\t$productItem.matchHeight();\r\n\t\t\titemImg.matchHeight();\r\n\t\t\titemTitle.matchHeight();\r\n\t\t\titemDesc.matchHeight();\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\nimport 'jquery-match-height';\r\n\r\nexport default class QuestionItem {\r\n\tconstructor() {\r\n\t\tthis.name = 'question-item';\r\n\t\tconsole.log('%s module', this.name.toLowerCase());\r\n\r\n\t\tlet $questionTitle = $('.question-item label span');\r\n\r\n\t\t$questionTitle.matchHeight();\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\n\r\nexport default class SubscribeForm {\r\n\tconstructor() {\r\n\t\tlet $subscribeSection = $('.subscribe-form'),\r\n\t\t\t$formGroup = $('.form-group', $subscribeSection);\r\n\r\n\t\t$formGroup.map((i,ele) => {\r\n\t\t\tlet $this = $(ele);\r\n\t\t\tlet $label = $('label', $this),\r\n\t\t\t\t$input = $('input', $this);\r\n\r\n\t\t\tlet placeholderText = $label.text();\r\n\r\n\t\t\t$input.attr('placeholder', placeholderText)\r\n\t\t});\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\n\r\nexport default class AccordionWrapper {\r\n\tconstructor() {\r\n\t\t// let $accordionWrapper = $('.accordions'),\r\n\t\tlet $accordion = $('.accordion');\r\n\r\n\t\t$accordion.map((i, ele) => {\r\n\t\t\tlet $this = $(ele),\r\n\t\t\t\t$button = $('.accordion-controller', $this);\r\n\r\n\t\t\t$button.on('click', () => {\r\n\t\t\t\t!$this.hasClass('open') ? this.open($this) : this.close($this);\r\n\t\t\t\t\r\n\t\t\t\tif ($this.hasClass('tab-carousel__accordion')){\r\n\t\t\t\t\t$('.tabbed-carousel__items', $this).slick('setPosition');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t});\r\n\t}\r\n\r\n\topen($accordion) {\r\n\t\tlet $content = $('.accordion__content', $accordion);\r\n\r\n\t\t$accordion.addClass('open');\r\n\t\t$content.show();\r\n\t}\r\n\r\n\tclose($accordion) {\r\n\t\tlet $content = $('.accordion__content', $accordion);\r\n\r\n\t\t$accordion.removeClass('open');\r\n\t\t$content.hide();\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\n\r\nexport default class Agenda {\r\n    constructor() {\r\n        this.name = 'agenda';\r\n        // console.log('%s module', this.name);\r\n\r\n        let $agendas = $('.event-agenda'),\r\n            _this = this;\r\n\r\n        $agendas.each(function(){\r\n            _this.init($(this));\r\n        });\r\n    }\r\n\r\n    init($obj) {\r\n        let $agenda = $obj,\r\n            $agendaTables = $('.event-agenda__day-table', $agenda),\r\n            $dayToggles = $('.day-toggle a', $agenda);\r\n\r\n        //Toggle agenda time table for the day\r\n        $dayToggles.on('click', function(e){\r\n            e.preventDefault();\r\n\r\n            let $this = $(this),\r\n                idx = $this.index(),\r\n                $agendaTable = $agendaTables.eq(idx),\r\n                $twinButtons =  $this.attr('class');\r\n\r\n            $dayToggles.removeClass('active');\r\n\r\n            $agendaTables.slideUp();\r\n            $agendaTable.stop().slideDown();\r\n\r\n            $('.' + $twinButtons).addClass('active');\r\n\r\n            $('html, body').stop().animate({'scrollTop': $agenda.offset().top});\r\n        });\r\n\r\n\r\n        //Setup Synopsis toggle\r\n        $('.synopsis', $agendaTables).each(function(){\r\n\r\n            let $this = $(this),\r\n                $toggle = $this.parent().find('.js-synopsis-toggle');\r\n\r\n            $this.hide();\r\n\r\n            $toggle.on('click', function(e){\r\n                e.preventDefault();\r\n\r\n                if($this.css('display') !== 'block') {\r\n                    $this.slideDown();\r\n                    $toggle.addClass('visible');\r\n                } else {\r\n                    $this.slideUp();\r\n                    $toggle.removeClass('visible');\r\n                }\r\n            });\r\n        });\r\n\r\n\r\n        // //Setup tabble accordion\r\n        // $('.event-agenda__day-table table thead').on('click', function(e){\r\n        //     e.preventDefault();\r\n\r\n        //     let $this = $(this),\r\n        //         $accordion = $this.next();\r\n\r\n        //     $accordion.not(':animated').slideToggle();\r\n        // });\r\n    }\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\n\r\nexport default class AlipayForm {\r\n\tconstructor() {\r\n\t\tlet $form = $('.alipay-form form'),\r\n\t\t\t$addInvoiceButton = $('button.addNewInvoice'),\r\n\t\t\t$newInvoiceFieldContainer = $('#newInvoice');\r\n\r\n\t\tlet $submitButton = $('button.submitForm', $form);\r\n\t\tlet $resetButton = $('button.reset', $form);\r\n\r\n\t\tlet invoiceFieldNumber = 2;\r\n\t\tlet allFieldsFilled = false;\r\n\r\n\t\tlet totalOrder = 5;\r\n\t\tlet selectedRadio = new Array(totalOrder);\r\n\t\tfor (let i = 0; i < totalOrder; i++)\r\n\t\t{\r\n\t\t  selectedRadio[i] = null;\r\n\t\t};\r\n\r\n\t\tselectedRadio[1] = document.getElementById(\"raproduct1_1\");\r\n\r\n\t\t// add new invoice\r\n\t\t$addInvoiceButton.on('click', function(e){\r\n\t\t\te.preventDefault();\r\n\r\n\t\t\taddNewInvoice();\r\n\r\n\t\t\t// if(invoiceFieldNumber <=5){\r\n\t\t\t// \tlet __invoiceFieldHTML = `<div><input class=\"has-outline\" id=\"product${invoiceFieldNumber}\" style=\"width:400px;\" name=\"product${invoiceFieldNumber}\" value='' hint=\"富士施乐订单合同号、发票号\" allownull=\"false\" size=\"36\"><br>\r\n\t\t\t// \t\t\t<input class=\"has-outline\" id=\"raproduct${invoiceFieldNumber}_2\" type=\"radio\" name=\"raproduct${invoiceFieldNumber}\" checked=\"\"><label for=\"raproduct${invoiceFieldNumber}_2\">发票号</label>\r\n\t\t\t// \t\t\t<input class=\"has-outline\" id=\"raproduct${invoiceFieldNumber}_1\" type=\"radio\" name=\"raproduct${invoiceFieldNumber}\"><label for=\"raproduct${invoiceFieldNumber}_1\">订单\\\\合同号</label></div>`;\r\n\t\t\t// \t$newInvoiceFieldContainer.append(__invoiceFieldHTML);\r\n\t\t\t// \tinvoiceFieldNumber++;\r\n\r\n\t\t\t// \tlet countInvoice = document.getElementById(\"hidCountInvoice\").value;\r\n\t\t\t// \tlet newCountInvoice = parseInt(countInvoice) + 1;\r\n\t\t\t// \tdocument.getElementById(\"hidCountInvoice\").value = newCountInvoice;\r\n\t\t\t// }\r\n\t\t\t// else {\r\n\t\t\t// \talert('最多只能有5个订单\\合同号、发票号');\r\n\t\t\t// }\r\n\t\t});\r\n\r\n\t\t$resetButton.on('click', function(e){\r\n\t\t\te.preventDefault();\r\n\t\t\t$(\"input, textarea\").val(\"\");\r\n\t\t\twindow.location.reload();\r\n\t\t});\r\n\r\n\t\t$form.on('submit', function(e){\r\n\t\t\t// e.preventDefault();\r\n\t\t\treturn checkForm(this);\r\n\t\t\t// let price = $('#price').val(),\r\n\t\t\t//  product = $('#product1').val(),\r\n\t\t\t//  customerName = $('#customerName').val(),\r\n\t\t\t//  phone = $('#txtPhone').val(),\r\n\t\t\t//  company = $('#customercompany').val();\r\n\r\n\t\t\t// if(!price || !product || !customerName || !phone || !company){\r\n\t\t\t//  alert('请填写应付总价。');\r\n\r\n\t\t\t//  if(!price){\r\n\t\t\t//      $('#price').focus();\r\n\t\t\t//      scrollToField($('#price'));\r\n\t\t\t//  }\r\n\t\t\t//  else if (!product) {\r\n\t\t\t//      $('#product1').focus();\r\n\t\t\t//      scrollToField($('#product1'));\r\n\t\t\t//  }\r\n\t\t\t//  else if (!customerName) {\r\n\t\t\t//      $('#customerName').focus();\r\n\t\t\t//      scrollToField($('#customerName'));\r\n\t\t\t//  }\r\n\t\t\t//  else if (!phone) {\r\n\t\t\t//      $('#txtPhone').focus();\r\n\t\t\t//      scrollToField($('#txtPhone'));\r\n\t\t\t//  }\r\n\t\t\t//  else {\r\n\t\t\t//      $('#customercompany').focus();\r\n\t\t\t//      scrollToField($('#customercompany'));\r\n\t\t\t//  }\r\n\r\n\t\t\t//  return false;\r\n\t\t\t// }\r\n\t\t});\r\n\r\n\t\tfunction addNewInvoice()\r\n\t\t{\r\n\t\t\tlet countInvoice = document.getElementById(\"hidCountInvoice\").value;\r\n\t\t\tif( countInvoice >= totalOrder ) {\r\n\t\t\t\t// max order count\r\n\t\t\t\talert(\"最多只能有\"+totalOrder+\"个订单\\合同号、发票号\");\r\n\t\t\t} else {\r\n\t\t\t\tlet newCountInvoice = parseInt(countInvoice) + 1;\r\n\t\t\t\tdocument.getElementById(\"hidCountInvoice\").value = newCountInvoice;\r\n\r\n\t\t\t\tlet newInput = document.createElement(\"input\");\r\n\t\t\t\tnewInput.type=\"text\";\r\n\t\t\t\tnewInput.name= \"product\" + newCountInvoice;\r\n\t\t\t\tnewInput.id=\"product\" + newCountInvoice;\r\n\t\t\t\tnewInput.value = \"\";\r\n\t\t\t\tnewInput.size = \"36\";\r\n\r\n\t\t\t\tlet prodSpan = document.getElementById(\"newInvoice\");\r\n\r\n\t\t\t\tlet br = document.createElement(\"p\");\r\n\t\t\t\tbr.style.marginBottom=\"10px\";\r\n\t\t\t\tprodSpan.appendChild(br);\r\n\t\t\t\tprodSpan.appendChild(newInput);\r\n\r\n\t\t\t\tlet span0 = document.createElement(\"span\");\r\n\t\t\t\tspan0.innerHTML = \"&nbsp;\";\r\n\t\t\t\tprodSpan.appendChild(span0);\r\n\r\n\t\t\t\tlet ra2 = document.createElement(\"input\");\r\n\t\t\t\tra2.type = \"radio\";\r\n\t\t\t\tra2.name = \"raproduct\" + newCountInvoice;\r\n\t\t\t\tra2.id = \"raproduct\" + newCountInvoice + \"_2\";\r\n\t\t\t\tra2.checked = \"checked\";\r\n\t\t\t\tra2.checked = true;\r\n\t\t\t\tselectedRadio[newCountInvoice] = ra2;\r\n\t\t\t\tra2.onclick = function() {\r\n\t\t\t\t\t  this.checked = true;\r\n\t\t\t\t\t  if (selectedRadio[newCountInvoice] != this) {\r\n\t\t\t\t\t\tselectedRadio[newCountInvoice].checked = false;\r\n\t\t\t\t\t\tselectedRadio[newCountInvoice] = this;\r\n\t\t\t\t\t  }\r\n\t\t\t\t};\r\n\t\t\t\tprodSpan.appendChild(ra2);\r\n\t\t\t\tlet span2 = document.createElement(\"span\");\r\n\t\t\t\tspan2.innerHTML = \"发票号\";\r\n\t\t\t\tprodSpan.appendChild(span2);\r\n\r\n\t\t\t\tlet ra = document.createElement(\"input\");\r\n\t\t\t\tra.type = \"radio\";\r\n\t\t\t\tra.name = \"raproduct\" + newCountInvoice;\r\n\t\t\t\tra.id = \"raproduct\" + newCountInvoice + \"_1\";\r\n\r\n\t\t\t\tra.onclick = function() {\r\n\t\t\t\t\t  this.checked = true;\r\n\t\t\t\t\t  if (selectedRadio[newCountInvoice] != this) {\r\n\t\t\t\t\t\tselectedRadio[newCountInvoice].checked = false;\r\n\t\t\t\t\t\tselectedRadio[newCountInvoice] = this;\r\n\t\t\t\t\t  }\r\n\t\t\t\t};\r\n\t\t\t\tprodSpan.appendChild(ra);\r\n\t\t\t\tlet span1 = document.createElement(\"span\");\r\n\t\t\t\tspan1.innerHTML = \"订单\\\\合同号\";\r\n\t\t\t\tprodSpan.appendChild(span1);\r\n\r\n\t\t\t\tdocument.getElementById(\"raproduct\" + newCountInvoice + \"_2\").checked = \"checked\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction checkForm(objform){\r\n\t\t\t// validate comapany\r\n\t\t\tlet comp = document.getElementsByName(\"CompanyName\");\r\n\r\n\r\n\t\t\t// validate price\r\n\t\t\tif (document.getElementById(\"price\").value == \"\")\r\n\t\t\t{\r\n\t\t\t\talert(\"请填写应付总价。\");\r\n\t\t\t\tdocument.getElementById(\"price\").focus();\r\n\t\t\t\treturn false;\r\n\t\t\t} else {\r\n\t\t\t\t// validate that price is numerical\r\n\t\t\t\tlet price = document.getElementById(\"price\").value,\r\n\t\t\t\t\t// reg=/^[0-9]+.?[0-9]*$/;\r\n\t\t\t\t\t// reg = /^\\d+(\\.\\d{0,2})?$/;\r\n\t\t\t\t\treg = /^(?:\\d+\\.\\d{1,2}|\\d+)$/;\r\n\r\n\t\t\t\tif( !reg.test(price) ) {\r\n\t\t\t\t\talert(\"您填写的应付总价格式不正确。\\n金额格式例如: 52.2或3\");\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Validate products\r\n\t\t\tif (document.getElementById(\"product1\").value == \"\")\r\n\t\t\t{\r\n\t\t\t\talert(\"请填写第一个富士施乐订单\\\\合同号、发票号。\");\r\n\t\t\t\tdocument.getElementById(\"product1\").focus();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t//\r\n\t\t\tlet count = document.getElementById(\"hidCountInvoice\").value;\r\n\t\t\tfor (let i = 1; i <= count; i++) {\r\n\t\t\t\tlet invpo = document.getElementById(\"product\" + i);\r\n\t\t\t\tlet invpoVal = String(invpo.value);\r\n\t\t\t\tif (invpoVal != \"\")\r\n\t\t\t\t{\r\n\t\t\t\t\tif (document.getElementById(\"raproduct\" + i +\"_1\").checked) {\r\n\t\t\t\t\t\tif (!isPoNo(invpoVal)) {\r\n\t\t\t\t\t\t\talert(\"订单\\\\合同号必须是3位字母加上10位数字！\");\r\n\t\t\t\t\t\t\tinvpo.focus();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (!isInvoiceNo(invpoVal)) {\r\n\t\t\t\t\t\t\talert(\"发票号必须是8位数字！\");\r\n\t\t\t\t\t\t\tinvpo.focus();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Validate name\r\n\t\t\tif (document.getElementById(\"customerName\").value == \"\")\r\n\t\t\t{\r\n\t\t\t\talert(\"请填写客户姓名。\");\r\n\t\t\t\tdocument.getElementById(\"customerName\").focus();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Validate phone number\r\n\t\t\tif (document.getElementById(\"txtPhone\").value == \"\")\r\n\t\t\t{\r\n\t\t\t\talert(\"请填写客户联系电话。\");\r\n\t\t\t\tdocument.getElementById(\"txtPhone\").focus();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// Validate phone number format\r\n\t\t\tlet phone = document.getElementById(\"txtPhone\").value;\r\n\t\t\tif (!isPhoneNo(phone)) {\r\n\t\t\t\talert(\"您填写的客户联系电话格式不正确。\\n必须全是数字！\");\r\n\t\t\t\tdocument.getElementById(\"txtPhone\").focus();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Validate customer company\r\n\t\t\tif (document.getElementById(\"customercompany\").value == \"\")\r\n\t\t\t{\r\n\t\t\t\talert(\"请填写客户公司名称。\");\r\n\t\t\t\tdocument.getElementById(\"customercompany\").focus();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (!SummaryProduct())\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction SummaryProduct() {\r\n\t\t\tlet productAll = new Array();\r\n\t\t\tlet count = document.getElementById(\"hidCountInvoice\").value;\r\n\t\t\tfor (let i = 1; i <= count; i++) {\r\n\t\t\t\tlet invpo = document.getElementById(\"product\" + i);\r\n\t\t\t\tlet invpoVal = String(invpo.value);\r\n\t\t\t\tif (invpoVal != \"\") {\r\n\t\t\t\t\tif (document.getElementById(\"raproduct\" + i + \"_1\").checked) {\r\n\t\t\t\t\t\tproductAll.push( \"PONo-\" + invpoVal.toUpperCase() );\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tproductAll.push( \"InvoiceNo-\" + invpoVal );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tproductAll = productAll.join(\"|\");\r\n\r\n\t\t\tlet customerName = document.getElementById(\"customerName\").value;\r\n\t\t\tlet customerTel = document.getElementById(\"txtPhone\").value;\r\n\t\t\tlet customerCompany = document.getElementById(\"customercompany\").value;\r\n\t\t\tproductAll = \"客户姓名-\" + customerName +\"|电话-\" + customerTel +\"|公司-\" +customerCompany + \"|\" + productAll;\r\n\t\t\t//productAll = \"客户信息-\" + customerName +\"-\" + customerTel +\"-\" +custmerCompany + \"|\" + productAll;\r\n\r\n\t\t\tif (productAll.length > 128) {\r\n\t\t\t\talert(\"一次输入的发票号码太多，请清除几条记录。\");\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tdocument.getElementById(\"hidproduct\").value = productAll;\r\n\t\t\tdocument.getElementById(\"hidbody\").value = \"\";\r\n\t\t\t//document.getElementById(\"hidbody\").value =\"客户姓名: \"&customerName&\"; 客户联系电话: \"&customerTel&\"; 客户公司名称: \"&custmerCompany;\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// function scrollToField($target){\r\n\t\t//  $('html, body').animate({\r\n\t\t//      scrollTop: $target.offset().top - 150\r\n\t\t//  }, 500);\r\n\t\t// }\r\n\r\n\t\t// Validate invoice number format function\r\n\t\tfunction isInvoiceNo(inv) {\r\n\t\t\tlet re = /^\\d{8}$/;\r\n\t\t\tif (!re.test(inv)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Validate invoice format function\r\n\t\tfunction isPoNo(inv) {\r\n\t\t\tlet re = /^[A-Za-z]{3}\\d{10}$/;\r\n\t\t\tif (!re.test(inv)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Validate phone number format function\r\n\t\tfunction isPhoneNo(inv) {\r\n\t\t\tlet re = /^[0-9]*$/;\r\n\t\t\tif (!re.test(inv)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\nimport 'jquery-match-height';\r\nimport 'slick-carousel';\r\n\r\nexport default class Carousel {\r\n\tconstructor() {\r\n\t\t$('.carousel').map((i, ele) => {\r\n\t\t\tlet $this = $(ele);\r\n\r\n\t\t\t$('.carousel__items', $this).slick({\r\n\t\t\t\tslidesToShow: 3,\r\n\t\t\t\tdots: true,\r\n\t\t\t\tarrows: false,\r\n\t\t\t\tinfinite: false,\r\n\t\t\t\tswipe: false,\r\n\t\t\t\tappendDots: $('.carousel__dots', $this),\r\n\t\t\t\tresponsive: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbreakpoint: 768,\r\n\t\t\t\t\t\tsettings: {\r\n\t\t\t\t\t\t\tslidesToShow: 1,\r\n\t\t\t\t\t\t\tslidesToScroll: 1,\r\n\t\t\t\t\t\t\tswipe: true,\r\n\t\t\t\t\t\t\tinfinite: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t$('.two-col-carousel').map((i, ele) => {\r\n\t\t\tlet $this = $(ele);\r\n\r\n\t\t\t$('.two-col-carousel__items', $this).slick({\r\n\t\t\t\tslidesToShow: 2,\r\n\t\t\t\tdots: false,\r\n\t\t\t\tarrows: true,\r\n\t\t\t\tinfinite: true,\r\n\t\t\t\tappendDots: $('.two-col-carousel__dots', $this),\r\n\t\t\t\tprevArrow: '<button type=\"button\" class=\"slick-prev prev\"><span>Previous</span></button>',\r\n\t\t\t\tnextArrow: '<button type=\"button\" class=\"slick-next next\"><span>Next</span></button>',\r\n\t\t\t\tresponsive: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbreakpoint: 768,\r\n\t\t\t\t\t\tsettings: {\r\n\t\t\t\t\t\t\tdots: true,\r\n\t\t\t\t\t\t\tarrows: false,\r\n\t\t\t\t\t\t\tslidesToShow: 1,\r\n\t\t\t\t\t\t\tslidesToScroll: 1,\r\n\t\t\t\t\t\t\tswipe: true,\r\n\t\t\t\t\t\t\tinfinite: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t$('.three-four-carousel').map((i, ele) => {\r\n\t\t\tlet $this = $(ele);\r\n\t\t\t$('.three-four-carousel__items', $this).slick({\r\n\t\t\t\tslidesToShow: 1,\r\n\t\t\t\tdots: false,\r\n\t\t\t\tarrows: true,\r\n\t\t\t\tinfinite: true,\r\n\t\t\t\tappendDots: $('.three-four-carousel__dots', $this),\r\n\t\t\t\tprevArrow: '<button type=\"button\" class=\"slick-prev prev\"><span>Previous</span></button>',\r\n\t\t\t\tnextArrow: '<button type=\"button\" class=\"slick-next next\"><span>Next</span></button>',\r\n\t\t\t\tresponsive: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbreakpoint: 768,\r\n\t\t\t\t\t\tsettings: {\r\n\t\t\t\t\t\t\tdots: true,\r\n\t\t\t\t\t\t\tarrows: false,\r\n\t\t\t\t\t\t\tslidesToShow: 1,\r\n\t\t\t\t\t\t\tslidesToScroll: 1,\r\n\t\t\t\t\t\t\tswipe: true,\r\n\t\t\t\t\t\t\tinfinite: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t$('.tabbed-carousel').map((i,ele) => {\r\n\t\t\tlet $this = $(ele);\r\n\r\n\t\t\t$('.tabbed-carousel__items', $this).slick({\r\n\t\t\t\tslidesToShow: 4,\r\n\t\t\t\tdots: false,\r\n\t\t\t\tarrows: true,\r\n\t\t\t\tinfinite: true,\r\n\t\t\t\tappendDots: $('.tabbed-carousel__dots', $this),\r\n\t\t\t\tprevArrow: '<button type=\"button\" class=\"slick-prev prev\"><span>Previous</span></button>',\r\n\t\t\t\tnextArrow: '<button type=\"button\" class=\"slick-next next\"><span>Next</span></button>',\r\n\t\t\t\tresponsive: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbreakpoint: 768,\r\n\t\t\t\t\t\tsettings: {\r\n\t\t\t\t\t\t\tdots: true,\r\n\t\t\t\t\t\t\tarrows: false,\r\n\t\t\t\t\t\t\tslidesToShow: 1,\r\n\t\t\t\t\t\t\tslidesToScroll: 1,\r\n\t\t\t\t\t\t\tswipe: true,\r\n\t\t\t\t\t\t\tinfinite: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\nimport 'slick-carousel';\r\nimport fancybox from 'fancybox';\r\n\r\nexport default class FeaturedSpeakers {\r\n\tconstructor() {\r\n\t\t$('.event-featured-speakers__speaker').matchHeight();\r\n\r\n\t\t$('.bio-popup').map((i, ele) => {\r\n\t\t    let $this = $(ele),\r\n\t\t        $parent = $this.parents('.event-featured-speakers__speaker');\r\n\r\n\t\t    let _bioHTML = $('.event-speakers__bio', $parent).html();\r\n\r\n\t\t    _bioHTML = '<div class=\"event-speakers__bio\">' + _bioHTML + '</div>';\r\n\r\n\t\t    $this.on('click', function(e){\r\n\t\t        e.preventDefault();\r\n\t\t        $.fancybox.open(_bioHTML);\r\n\t\t    });\r\n\r\n\t\t});\r\n\t}\r\n}\r\n","'use strict';\r\nimport $ from 'jquery';\r\n\r\nexport default class Form {\r\n\tconstructor() {\r\n\r\n\t\tlet $eventCheckList = $('.events-form-checklist');\r\n\r\n\t\t$('.checkbox label', $eventCheckList).each(function() {\r\n\t\t\tlet textLabel = $(this).text();\r\n\t\t\tlet regexPatt = /\\[(.*?)\\]/g;\r\n\r\n\t\t\t//get time\r\n\t\t\tlet time = textLabel.match(regexPatt);\r\n\r\n\t\t\t//remove the time from text\r\n\t\t\tlet newText = textLabel.replace(regexPatt, '');\r\n\r\n\t\t\t//empty original string\r\n\t\t\tlet inputHTML = $(this).find('input').empty();\r\n\t\t\t$(this).html(inputHTML);\r\n\r\n\t\t\t//remove brackets\r\n\t\t\tlet newTime = time[0].replace('[', '');\r\n\t\t\tnewTime = newTime.replace(']', '');\r\n\r\n\t\t\t//generate new html\r\n\t\t\tlet newHTML = '<span class=\"event-form-time\">' + newTime + '</span><span class=\"event-form-detail\">' + newText + '</span>';\r\n\t\t\t$(this).find('input').after(newHTML);\r\n\t\t});\r\n\r\n\t\tlet $checkbox = $('.checkbox');\r\n\r\n\t\t$checkbox.map((i, ele) => {\r\n\t\t\tlet $this = $(ele);\r\n\r\n\t\t\tlet $formGroup = $this.parent();\r\n\r\n\t\t\tif(!$('> label', $formGroup).length){\r\n\t\t\t\t$($formGroup).find('.checkbox').addClass('required');\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\n\r\nexport default class ImageLinksWrapper {\r\n\tconstructor() {\r\n\t\tlet $imageLinksWrapper = $('.image-links-wrapper'),\r\n\t\t\t$imageLinks = $('.link-image', $imageLinksWrapper);\r\n\r\n\t\tif($imageLinks.length >= 4){\r\n\t\t\t$imageLinks.map((i, ele) => {\r\n\t\t\t\tlet $this = $(ele);\r\n\r\n\t\t\t\t$this.addClass('float');\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nimport doT from 'dot';\r\nimport $ from 'jquery';\r\n\r\nexport default class InsightComponent {\r\n\tconstructor() {\r\n\t\tlet $insightFilter = $('.insights-filter'),\r\n\t\t\t$filter = $('.filter-item', $insightFilter).not('.filter-item--reset'),\r\n\t\t\t$reset = $('.filter-item--reset .btn-reset', $insightFilter),\r\n\t\t\t$insightContent = $('.insight__content .column-row'),\r\n\t\t\t$copy = $('.dropdown-copy', $insightFilter);\r\n\r\n        this.$insightFilter = $insightFilter;\r\n\t\tthis.$filter = $filter;\r\n\t\tthis.$reset = $reset;\r\n\t\tthis.data = {};\r\n\t\tthis.loadLimit    = 9;\r\n\t\tthis.currpage     = 1;\r\n\t\tthis.results = [];\r\n\t\tthis.endpoint = $('.insight__content').data('endpoint');\r\n\r\n        $filter.map((i, ele) => {\r\n\t\t\tlet $this = $(ele),\r\n\t\t\t\t$clone = $('.dropdown-copy', $this),\r\n\t\t\t\t$dropdown = $('ul', $this),\r\n\t\t\t\t$button = $('> button', $clone);\r\n\r\n\t\t\t$this.on('click', (e) => {\r\n\t\t\t\te.stopPropagation();\r\n\t        \t$('ul', $filter).not($dropdown).hide();\r\n\t\t\t\tthis.toggleDropdown($dropdown);\r\n\t\t\t});\r\n\r\n\t\t\tlet $option = $('li button', $dropdown);\r\n\r\n\t\t\t$option.map((j, ele) => {\r\n\t\t\t\tlet $this2 = $(ele);\r\n\r\n\t\t\t\t$this2.on('click', () => {\r\n\t\t\t\t\tlet value = $this2.val(),\r\n\t\t\t\t\t\ttext = $this2.text();\r\n\r\n\t\t\t\t\t$button.text(text);\r\n\t\t\t\t\t$button.val(value);\r\n\r\n\t\t\t\t\tlet fieldname = $('select', $this).attr('name');\r\n\r\n\t\t\t\t\tthis.data[fieldname] = value;\r\n\r\n\t\t\t\t\t$insightContent.empty();\r\n\t\t\t\t\tthis.getResult(this.endpoint, this.data, renderResults);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t$(window).on('click', () => {\r\n\t        $('ul', $filter).hide();\r\n\t    });\r\n\r\n\r\n        let renderResults = (response) => {\r\n\t\t\tlet insightTemplate = $('#dotInsightTemplate').html(),\r\n\t\t\t\t_content = '';\r\n\r\n\t\t\tlet _this = this,\r\n\t\t\t    lowerLimit = (this.currpage - 1) * this.loadLimit,\r\n\t\t\t    upperLimit = this.currpage * this.loadLimit,\r\n\t\t\t    pageResults = [],\r\n\t\t\t    interval = 200;\r\n\r\n\t\t\tthis.results = response;\r\n\r\n\t\t\tfor(let i = lowerLimit; i < upperLimit; i++) {\r\n\t\t\t    if(typeof _this.results[i] !== 'undefined'){\r\n\t\t\t        pageResults.push(_this.results[i]);\r\n\t\t\t    }\r\n\t\t\t}\r\n\r\n\t\t\t$insightContent.append(doT.template(insightTemplate)(pageResults));\r\n\r\n\t\t\t$('.card-tiles').matchHeight();\r\n\r\n\t\t\t/**\r\n\t\t\t * Fade In\r\n\t\t\t */\r\n\t\t\t$('.result', this.resultsCont).each(function(){\r\n\t\t\t    let $this = $(this);\r\n\r\n\t\t\t    if($this.hasClass('visible')) return;\r\n\r\n\t\t\t    setTimeout(function(){\r\n\t\t\t        $this.addClass('visible');\r\n\r\n\t\t\t    }, interval);\r\n\r\n\t\t\t    interval = interval + 100;\r\n\t\t\t});\r\n\r\n\t\t\tif(this.currpage === 1){\r\n\t\t\t\tthis.currpage++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$('.show-more').on('click', (e) => {\r\n\t\t    e.preventDefault();\r\n\r\n\t\t    renderResults(this.results);\r\n\t\t    this.toggleLoadMore();\r\n\t\t});\r\n\r\n\r\n\r\n\t\t$reset.on('click', () => {\r\n\t\t\tthis.data = {};\r\n\t\t\tthis.resetFilters();\r\n\t\t\t$insightContent.empty();\r\n\t\t\tthis.getResult(this.endpoint, this.data, renderResults);\r\n\t\t});\r\n\r\n\t\t// render on load\r\n\t\tthis.getResult(this.endpoint, this.data, renderResults);\r\n\t}\r\n\r\n\ttoggleLoadMore() {\r\n\t    let _this = this;\r\n\r\n\t    if(_this.currpage * _this.loadLimit < _this.results.length) {\r\n\t        _this.currpage++;\r\n\r\n\t        $('.show-more').show();\r\n\t    } else {\r\n\t        $('.show-more').hide();\r\n\t    }\r\n\t}\r\n\r\n\ttoggleDropdown($object){\r\n\t\t$object.toggle();\r\n\t}\r\n\r\n\tresetFilters() {\r\n\t\t$('select').map((i, ele) => {\r\n\t\t\tlet $this = $(ele);\r\n\r\n\t\t\t$this.val(null).change();\r\n\t\t});\r\n\r\n\t\tthis.$filter.map((j,ele) => {\r\n\t\t\tlet defaultText = $('li button', $(ele)).first().text(),\r\n\t\t\t\tdefaultValue = $('li button', $(ele)).first().val();\r\n\r\n\t\t\t$('.dropdown-copy > button', $(ele)).text(defaultText);\r\n\t\t\t$('.dropdown-copy > button', $(ele)).val(defaultValue);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Ajax call to endpoint\r\n\t */\r\n\tgetResult(url, data, cb) {\r\n\t\tthis.currpage = 1;\r\n\t    $.ajax({\r\n\t        url,\r\n\t        data,\r\n\t        dataType: 'json',\r\n\t        cache: false\r\n\t    }).done(cb);\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\n// import listingCategories from '../../molecules/listing-categories/listing-categories';\r\nimport sorter from '../../molecules/listing-sorter/listing-sorter';\r\nimport listingResults from '../../organisms/listing-results/listing-results';\r\n\r\nexport default class ListingFilters {\r\n    constructor(type, isDebug) {\r\n        this.name = 'listing-filters';\r\n        this.$listingSideFilters = $('.listing-side-filters');\r\n        this.$filterGroups       = $('.filter-group' , this.$listingSideFilters);\r\n        this.resultViewer        = new listingResults();\r\n\r\n        if(type === \"products\" && $('.product-listing').length) {\r\n            this.dataEndpoint = $('.listing-content').data('endpoint');\r\n            this.$categoryField = $('#categoryField');\r\n            this.sorter = new sorter();\r\n            this.setupFilters();\r\n            this.listProducts();\r\n        }\r\n        else if(type === \"careers\" && $('.career-listing').length) {\r\n            this.dataEndpoint = $('.listing-content').data('endpoint');\r\n            // this.dataEndpoint = (isDebug) ? '/assets/fuji-xerox/api/career-listing.json' : '/api/GetCareerListing';\r\n            this.setupFilters();\r\n            this.listJobs();\r\n        }\r\n    }\r\n\r\n    listJobs() {\r\n        let _this = this;\r\n\r\n        if(!_this.$filterGroups.length) return;\r\n\r\n        let $clearSelectionBtn = $('.clear-filters-selection-btn', _this.$listingSideFilters),\r\n            $filterForm = $('.submit-btn', _this.$listingSideFilters).parents('form');\r\n\r\n         // CLear Selections\r\n        $clearSelectionBtn.on('click', function(e){\r\n            e.preventDefault();\r\n\r\n            $('input', _this.$listingSideFilters).prop('checked', false);\r\n\r\n            _this.fetchJobs($filterForm);\r\n        });\r\n\r\n        // Submit filter options\r\n        $filterForm.on('submit', function(e){\r\n            e.preventDefault();\r\n\r\n            var $form = $(this);\r\n\r\n            _this.fetchJobs($form);\r\n        });\r\n\r\n        $('input[type=checkbox]').on('change', () => {\r\n            $filterForm.trigger('submit');\r\n        });\r\n\r\n       _this.fetchJobs( $('.submit-btn', _this.$listingSideFilters).parents('form'), true);\r\n    }\r\n\r\n    fetchJobs($form) {\r\n        let _this = this,\r\n            formData = $form.serialize(),\r\n            results,\r\n            parseJobs = (data) => {\r\n                _this.resultViewer.clear();\r\n\r\n                results = data.results.slice().concat();\r\n\r\n                _this.resultViewer.render(results);\r\n            };\r\n\r\n        _this.getResult(_this.dataEndpoint, parseJobs, formData);\r\n    }\r\n\r\n    listProducts() {\r\n        let _this = this;\r\n\r\n        if(!_this.$filterGroups.length) return;\r\n\r\n        // _this.listingCategories = new listingCategories(_this);\r\n\r\n        let $clearSelectionBtn = $('.clear-filters-selection-btn', _this.$listingSideFilters),\r\n            $filterForm = $('.submit-btn', _this.$listingSideFilters).parents('form');\r\n\r\n        // CLear Selections\r\n        $clearSelectionBtn.on('click', function(e){\r\n            e.preventDefault();\r\n\r\n            $('input', _this.$listingSideFilters).prop('checked', false);\r\n\r\n            _this.fetchProducts($filterForm);\r\n        });\r\n\r\n        // Submit filter options\r\n        $filterForm.on('submit', function(e){\r\n            e.preventDefault();\r\n\r\n            var $form = $(this);\r\n\r\n            _this.fetchProducts($form);\r\n        });\r\n\r\n        // trigger submit on checkbox click\r\n        $('input[type=checkbox]').on('change', () => {\r\n            $filterForm.trigger('submit');\r\n        });\r\n\r\n        // let $firstChild = $('li', '.categories-toggle').first().find('a');\r\n        _this.fetchProducts( $('.submit-btn', _this.$listingSideFilters).parents('form'), true);\r\n\r\n        // if($firstChild.hasClass('active')){\r\n        // }\r\n    }\r\n\r\n\r\n    /**\r\n     * setup Filters\r\n     */\r\n    setupFilters() {\r\n        let _this = this;\r\n\r\n        // Toggle filter groups\r\n        _this.$filterGroups.each(function(){\r\n            let $this = $(this),\r\n                $filterSubgroups = $('.filter-subgroup', $this),\r\n                $advancedFilters = $('.advanced-filters', $this),\r\n                $advancedFiltersToggle = $('.advanced-options-toggle', $this);\r\n\r\n            // Toggle advanced filters\r\n            if($advancedFilters.length) {\r\n                $advancedFiltersToggle.on('click', function(e){\r\n                    e.preventDefault();\r\n\r\n                    if($advancedFilters.css('display') === 'block') {\r\n                        $advancedFilters.slideUp();\r\n                        // $('.icon', $advancedFiltersToggle)\r\n                        //     .addClass('icon-plus')\r\n                        //     .removeClass('icon-minus');\r\n                    } else {\r\n                        $advancedFilters.slideDown();\r\n                        // $('.icon', $advancedFiltersToggle)\r\n                        //     .addClass('icon-minus')\r\n                        //     .removeClass('icon-plus');\r\n                    }\r\n                });\r\n            }\r\n\r\n            //For each filters\r\n            $filterSubgroups.each(function(){\r\n                var $subgroup = $(this),\r\n                    $fields = $('.filter-subgroup__fields', $subgroup),\r\n                    $toggle = $('h4', $subgroup);\r\n\r\n                if($subgroup.index() === 0) {\r\n                    $fields.parent().addClass('open');\r\n                    $fields.show();\r\n                    // $toggle.append($('<i class = \"icon icon-minus\"/>'));\r\n                } else {\r\n                    // $toggle.append($('<i class = \"icon icon-plus\"/>'));\r\n                }\r\n\r\n                $toggle.attr('tabindex', 0);\r\n\r\n                // Collapse/expand the fields\r\n                $toggle.on('click keypress', function(){\r\n                    var $this = $(this),\r\n                        $filters = $this.parent().parent();\r\n\r\n                    if($fields.css('display') === 'none') {\r\n                        $('.filter-subgroup__fields', $filters).parent().removeClass('open');\r\n                        $('.filter-subgroup__fields', $filters).stop().slideUp();\r\n                        // $('h4 .icon', $subgroup.parent())\r\n                        //     .removeClass('icon-minus')\r\n                        //     .addClass('icon-plus');\r\n\r\n                        $fields.parent().addClass('open');\r\n                        $fields.stop().slideDown();\r\n\r\n                        // $('.icon', $toggle)\r\n                        //     .removeClass('icon-plus')\r\n                        //     .addClass('icon-minus');\r\n                    } else {\r\n                        $fields.parent().removeClass('open');\r\n                        $fields.stop().slideUp();\r\n                        // $('.icon', $toggle)\r\n                        //     .removeClass('icon-minus')\r\n                        //     .addClass('icon-plus');\r\n                    }\r\n                });\r\n\r\n                // Check/uncheck all inputs in a group with scope 'all'\r\n                $('input[type=\"checkbox\"]', $fields).each(function(){\r\n                    var $cb = $(this);\r\n\r\n                    if($cb.data('scope') === 'all') {\r\n\r\n                        $cb.on('change', function(){\r\n                           if($cb[0].checked) {\r\n                                $('input[type=\"checkbox\"]', $fields).prop('checked', true);\r\n                            } else {\r\n                                $('input[type=\"checkbox\"]', $fields).prop('checked', false);\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Switch filter menu\r\n     */\r\n    swapMenu(classname, categoryValue) {\r\n        let _this = this;\r\n\r\n        _this.$categoryField.val(categoryValue);\r\n        _this.$filterGroups.hide();\r\n\r\n        $(classname, _this.$listingSideFilters).show();\r\n\r\n        _this.fetchProducts( $('.submit-btn', _this.$listingSideFilters).parents('form'), true);\r\n    }\r\n\r\n    /**\r\n     * Fetch products\r\n     */\r\n    fetchProducts($form, categoryChange) {\r\n        categoryChange = categoryChange || false;\r\n\r\n        let _this = this,\r\n            formData = $form.serialize(),\r\n            results,\r\n            parseProducts = (data) => {\r\n                _this.resultViewer.clear();\r\n\r\n                results = data.results.slice().concat();\r\n\r\n                if (typeof window.recommendedProducts !== 'undefined') {\r\n                    // Get recommended products' id and update to existing result json\r\n                    var recommendedProductIds = [];\r\n\r\n                    recommendedProducts.forEach(function(product, index) {\r\n                        recommendedProductIds.push(product.id);\r\n                    });\r\n\r\n                    results.forEach(function(result, index){\r\n                        if ($.inArray(result.productid, recommendedProductIds) > -1) {\r\n                            result['recommended'] = true;\r\n                        };\r\n                    });\r\n                }\r\n\r\n                // _this.resultViewer.render(results, categoryChange);\r\n                _this.sorter.setResults(results);\r\n                _this.sorter.setView(_this.resultViewer);\r\n                $('.listing-content__sort-result select').trigger('change');\r\n            };\r\n        _this.getResult(_this.dataEndpoint, parseProducts, formData);\r\n    }\r\n\r\n\r\n    /**\r\n     * Ajax call to endpoint\r\n     */\r\n    getResult(endpoint, cb, data) {\r\n\r\n        $.ajax({\r\n            url: endpoint,\r\n            data: data,\r\n            dataType: 'json',\r\n            cache: false\r\n        }).done(cb);\r\n    }\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\nimport doT from 'dot';\r\nimport 'jquery-match-height';\r\n\r\nexport default class ListingResults {\r\n    constructor() {\r\n        this.name         = 'listing-results';\r\n        this.$status      = $('.listing-content__result-status');\r\n        this.$loader      = $('.loader-animation', this.$status);\r\n        this.loadLimit    = 10;\r\n        this.currpage     = 1;\r\n        this.resultUlEl   = $('.listing-content__results');\r\n        this.results = [];\r\n\r\n        let _this = this;\r\n\r\n        if($('#results-template').length) {\r\n            _this.resultTempFn = doT.template($('#results-template').html());\r\n        }\r\n\r\n        // Load more results\r\n        $('.js-load-more').on('click', function(e){\r\n            e.preventDefault();\r\n\r\n            _this.parsePage(_this.currpage);\r\n            _this.toggleLoadMore();\r\n        });\r\n    }\r\n\r\n    render(results, categoryChange) {\r\n        let _this = this,\r\n            $status = _this.$status;\r\n\r\n        _this.results = results; //Set result set\r\n\r\n        if(results.length > 0) {\r\n            if (!categoryChange) {\r\n                $('.total-results', $status).text(results.length);\r\n                $('.success-msg', $status).slideDown();\r\n            } else {\r\n                $('.success-msg', $status).slideUp();\r\n            }\r\n            $('.error-msg', $status).slideUp();\r\n\r\n           _this.currpage = 1\r\n\r\n           _this.parsePage(_this.currpage);\r\n           _this.toggleLoadMore();\r\n        } else {\r\n            $('.error-msg', $status).slideDown();\r\n            $('.total-results', $status).text(0);\r\n            $('.success-msg', $status).slideUp();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Toggle load more button visibility\r\n     */\r\n    toggleLoadMore() {\r\n        let _this = this;\r\n\r\n        if(_this.currpage * _this.loadLimit < _this.results.length) {\r\n            _this.currpage++;\r\n\r\n            $('.load-more').show();\r\n        } else {\r\n            $('.load-more').hide();\r\n        }\r\n    }\r\n\r\n    parsePage(page) {\r\n        let _this = this,\r\n            lowerLimit = (page - 1) * this.loadLimit,\r\n            upperLimit = page * this.loadLimit,\r\n            pageResults = {\"results\" : []},\r\n            interval = 200;\r\n\r\n        for(let i = lowerLimit; i < upperLimit; i++) {\r\n            if(typeof _this.results[i] !== 'undefined')\r\n                pageResults.results.push(_this.results[i]);\r\n        }\r\n\r\n        _this.resultUlEl\r\n            .append(_this.resultTempFn({ results: pageResults.results }));\r\n\r\n        $('.listing-content__results > li').matchHeight();\r\n\r\n        /**\r\n         * Fade In\r\n         */\r\n        $('li', _this.resultUlEl).each(function(){\r\n            let $this = $(this);\r\n\r\n            if($this.hasClass('visible')) return;\r\n\r\n            setTimeout(function(){\r\n                $this.addClass('visible');\r\n\r\n            }, interval);\r\n\r\n            interval = interval + 25;\r\n        });\r\n    }\r\n\r\n    clear() {\r\n        this.resultUlEl.empty();\r\n        this.$loader.css({'display': ''});\r\n    }\r\n}\r\n","'use strict';\r\n\r\nimport doT from 'dot';\r\nimport jsonQuery from 'json-query';\r\nimport Cookies from 'js-cookie';\r\nimport $ from 'jquery';\r\n\r\nexport default class Mapper {\r\n    // constructor(type, isDebug) {\r\n    constructor(type) {\r\n        this.name = 'mapper';\r\n\r\n        if($('#results-template').length) {\r\n            this.resultTempFn = doT.template($('#results-template').html());\r\n        }\r\n\r\n        // if(type === 'solution') {\r\n        //     this.optionTempFn = doT.template(\"{{~it.data :value:index}}<option value= \\\"{{=value.id}}\\\">{{=value.name}}</option>{{~}}\");\r\n        //     this.mapSolution();\r\n\r\n        // } else if(type === 'story') {\r\n        if(type === 'story') {\r\n            this.$loadMoreCont = $('.js-load-more');\r\n            this.filters = {\r\n                \"country\"  : $('#countryFilter'),\r\n                \"solution\" : $('#solutionFilter'),\r\n                \"product\"  : $('#productFilter'),\r\n                \"industry\" : $('#industryFilter'),\r\n                \"year\"     : $('#yearFilter')\r\n            };\r\n            this.cookieName = \"storyFilter\";\r\n            // this.endpoint = (isDebug) ? '/assets/fuji-xerox/api/story-results.json' : '/api/GetStoryListing';\r\n            this.endpoint = $('.success-stories-mapper__results').data('endpoint');\r\n            this.pageSize = $('.success-stories-mapper__results').data('pagesize');\r\n            this.mapper = $('.success-stories-mapper');\r\n            this.resultsCont = $('.success-stories-mapper__results', this.mapper);\r\n            this.noResults = $('.listing-content__result-status .msg');\r\n\r\n            this.mapStory();\r\n\r\n            let $copy = $('.dropdown-copy', this.mapper);\r\n\r\n            $copy.map((i, ele) => {\r\n                let $this = $(ele),\r\n                    $select = $this.next(),\r\n                    $button = $this.find('button');\r\n\r\n                $select.on('click', (e) => {\r\n                    e.stopPropagation();\r\n\r\n                    if (!$this.hasClass('active')){\r\n                        $this.addClass('active');\r\n                    }\r\n                    else {\r\n                        $this.removeClass('active');\r\n                    }\r\n\r\n                    $('.dropdown-copy').not($this).removeClass('active');\r\n                });\r\n\r\n                $select.on('change', () => {\r\n                    let $option = $select.find(':selected');\r\n\r\n                    $select.prev().find('button').text($option.text());\r\n                });\r\n\r\n                $(window).on('click', () => {\r\n                    if ($this.hasClass('active')){\r\n                        $this.removeClass('active');\r\n                    }\r\n                });\r\n            })\r\n\r\n        } else if(type === 'event') {\r\n            this.$loadMoreCont = $('.js-load-more');\r\n            this.filters = {\r\n                \"country\"  : $('#countryFilter'),\r\n                \"industry\" : $('#industryFilter'),\r\n                \"year\"     : $('#yearFilter'),\r\n                \"month\"    : $('#monthFilter')\r\n            };\r\n            this.cookieName = \"eventFilter\";\r\n            // this.endpoint = (isDebug) ? '/assets/fuji-xerox/api/event-results.json' : '/api/GetEventsListing';\r\n            this.endpoint = $('.event-mapper__results').data('endpoint');\r\n            this.pageSize = $('.event-mapper__results').data('pagesize');\r\n            this.mapper = $('.event-mapper');\r\n            this.resultsCont = $('.event-mapper__results', this.mapper);\r\n            this.noResults = $('.result-status .msg');\r\n\r\n            this.mapStory();\r\n\r\n            let $copy = $('.dropdown-copy', this.mapper);\r\n\r\n            $copy.map((i, ele) => {\r\n                let $this = $(ele),\r\n                    $select = $this.next(),\r\n                    $button = $this.find('button');\r\n\r\n                $select.on('click', (e) => {\r\n                    e.stopPropagation();\r\n\r\n                    if (!$this.hasClass('active')){\r\n                        $this.addClass('active');\r\n                    }\r\n                    else {\r\n                        $this.removeClass('active');\r\n                    }\r\n\r\n                    $('.dropdown-copy').not($this).removeClass('active');\r\n                });\r\n\r\n                $select.on('change', () => {\r\n                    let $option = $select.find(':selected');\r\n\r\n                    $select.prev().find('button').text($option.text());\r\n                });\r\n\r\n                $(window).on('click', () => {\r\n                    if ($this.hasClass('active')){\r\n                        $this.removeClass('active');\r\n                    }\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    mapStory() {\r\n        let _this = this,\r\n            $mapper =this.mapper;\r\n\r\n        // _this.startIndex = 1;\r\n        _this.pageNo = 1;\r\n        _this.pageSize = this.pageSize;\r\n\r\n        if(!$mapper.length) return;\r\n\r\n        let resultEndpoint = _this.endpoint,\r\n            filters = _this.filters,\r\n            $mapperResults = _this.resultsCont;\r\n\r\n        _this.$clearFilterBtn = $('.btn-reset', $mapper);\r\n\r\n        // Reset Button\r\n        _this.$clearFilterBtn.on('click', function(e){\r\n            e.preventDefault();\r\n\r\n            for(var key in filters) {\r\n                let $filter = filters[key];\r\n\r\n                $filter\r\n                    .val($('option:first-child', filters).val())\r\n                    .prev()\r\n                    .find('button')\r\n                    .text($('option:selected', $filter).text());\r\n            }\r\n\r\n            clearView();\r\n\r\n            _this.pageNo = 1;\r\n\r\n            _this.getResult(resultEndpoint, parseResults, getData(), _this.pageNo, _this.pageSize);\r\n        });\r\n\r\n        // Load more button\r\n        $('.js-load-more').on('click', function(e){\r\n            e.preventDefault();\r\n\r\n            _this.pageNo++;\r\n\r\n            let data = getData(e);\r\n\r\n            _this.getResult(resultEndpoint, parseResults, getData(e), _this.pageNo, _this.pageSize);\r\n        });\r\n\r\n\r\n        // Setup filters\r\n        for(var key in filters) {\r\n            let $filter = filters[key];\r\n\r\n            $filter.on('change.filter', function(){\r\n                let value = $('option:selected', $filter).attr('value');\r\n\r\n                clearView();\r\n                _this.pageNo = 1;\r\n\r\n                if(value !== \"\" && typeof value !== \"undefined\") {\r\n                    Cookies.set( _this.cookieName, JSON.stringify(getData()), true);\r\n                }\r\n\r\n                _this.getResult(resultEndpoint, parseResults, getData(), _this.pageNo, _this.pageSize);\r\n\r\n            });\r\n        }\r\n\r\n        // Process results\r\n        let parseResults = (data) => {\r\n            let evalStr = _this.resultTempFn({ snippets: data.results }),\r\n                interval = 200;\r\n\r\n            $mapperResults.children('div:first-child').append($(evalStr));\r\n\r\n            if(data.results.length == 0){\r\n                _this.noResults.show();\r\n                this.$loadMoreCont.hide();\r\n            }\r\n            else {\r\n                _this.noResults.hide();\r\n                this.$loadMoreCont.show();\r\n            }\r\n\r\n            // _this.startIndex = data.endIndex + 1;\r\n            // _this.page = data.page;\r\n\r\n            // _this.toggleLoadMore(data.count, data.endIndex);\r\n            _this.toggleLoadMore(_this.pageNo, data.totalPage);\r\n\r\n            $('.card-tiles').matchHeight();\r\n\r\n            /**\r\n             * Fade In\r\n             */\r\n            $('.result', this.resultsCont).each(function(){\r\n                let $this = $(this);\r\n\r\n                if($this.hasClass('visible')) return;\r\n\r\n                setTimeout(function(){\r\n                    $this.addClass('visible');\r\n                    // $('.thumbnail', $this).swapImage({breakpoint: 768, reverse: true});\r\n\r\n                }, interval);\r\n\r\n                interval = interval + 50;\r\n            });\r\n        };\r\n\r\n        // Get Filter Data\r\n        let getData = (excludeIndex) => {\r\n            let data = {};\r\n\r\n            //Exclude for cookie\r\n            // if(excludeIndex) {\r\n            //     data.startIndex = _this.startIndex\r\n            //     data.page = _this.page;\r\n            // }\r\n\r\n            for(var key in filters) {\r\n                let $filter = filters[key];\r\n                data[key] = $('option:selected', $filter).attr('value')\r\n            }\r\n\r\n            return data;\r\n        };\r\n\r\n        // Clear list\r\n        let clearView = () => {\r\n            Cookies.remove(_this.cookieName);\r\n            $mapperResults.children('div:first-child').empty();\r\n            // _this.startIndex = 1;\r\n            _this.page = 1;\r\n        };\r\n\r\n        // Parse Cookies data\r\n        let parseCookies = (obj) => {\r\n            for(var key in obj) {\r\n                let $filter = filters[key],\r\n                    id = obj[key];\r\n\r\n                if(typeof id !== 'undefined') {\r\n\r\n                    $filter\r\n                        .val(id)\r\n                        .prev()\r\n                        .find('button')\r\n                        .text($('option:selected', $filter).text())\r\n                }\r\n            }\r\n        };\r\n\r\n        // Bootstrap function\r\n        {\r\n            let cookie = Cookies.get(_this.cookieName);\r\n\r\n            if(typeof cookie !== 'undefined') {\r\n                parseCookies(JSON.parse(cookie));\r\n            }\r\n\r\n            _this.getResult(resultEndpoint, parseResults, getData(), _this.pageNo, _this.pageSize);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Toggle Loadmore\r\n     */\r\n    toggleLoadMore(pageCount, totalPage) {\r\n\r\n        if(pageCount > totalPage - 1){\r\n            this.$loadMoreCont.hide();\r\n        } else {\r\n            this.$loadMoreCont.show();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ajax call to endpoint\r\n     */\r\n    getResult(endpoint, cb, data, page, pageSize) {\r\n        let postData = {\r\n            page,\r\n            pageSize\r\n        };\r\n\r\n        $.extend(postData, data);\r\n\r\n        $.ajax({\r\n            url: endpoint,\r\n            data: postData,\r\n            dataType: 'json',\r\n            cache: false\r\n        }).done(cb);\r\n    }\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\n\r\nexport default class Modal {\r\n    constructor() {\r\n        this.name = 'modal';\r\n        // console.log('%s module', this.name);\r\n\r\n        let $modals   = $('.modal'),\r\n            $html     = $('html'),\r\n            // $fixedEle = $('.side-menu, .quick-links'),\r\n            $win      = $(window),\r\n            resizeTimeout;\r\n\r\n        /*\r\n         * Find all modal markup\r\n         * and append to the end of the document if not already a direct child of 'body'\r\n         */\r\n        $('.modal').each(function(){\r\n            var $this = $(this);\r\n\r\n            if(!$this.parent().is('body')) {\r\n                $('body').append($this);\r\n            }\r\n        });\r\n\r\n\r\n        (function(){\r\n            if(!$modals.length) return;\r\n\r\n            $modals.each(function(){\r\n                var $modal = $(this),\r\n                    $closeBtn = $('.modal-close-button a', $modal);\r\n\r\n                $closeBtn.on('click', function(e){\r\n                    e.preventDefault();\r\n\r\n                    $modal.fadeOut(function(){\r\n                         // $html.removeClass('fancybox-margin fancybox-lock');\r\n                         // $fixedEle.removeClass('fancybox-margin');\r\n                         clearInterval(resizeTimeout);\r\n                    });\r\n                    // $('.site-header').css('position', 'fixed');\r\n                    $('body').css({'overflow': ''});\r\n                });\r\n            });\r\n\r\n            $win.on('resize.modalbox scroll.modalbox', function(){\r\n                var scrollTop      =  $win.scrollTop(),\r\n                    viewportHeight = $win.innerHeight();\r\n\r\n                $modals.css({ 'top': scrollTop, 'height': viewportHeight });\r\n\r\n            }).trigger('resize.modalbox');\r\n        }());\r\n\r\n        /**\r\n         * Modal Box Trigger\r\n         */\r\n        $('body').on('click', '.modalbox', function(e){\r\n            e.preventDefault();\r\n\r\n            var $link = $(this),\r\n                $target = $($link.attr('href')),\r\n                productid = $link.data('productid'),\r\n                iframeURL = $link.data('iframe');\r\n\r\n            // $html.addClass('fancybox-margin fancybox-lock');\r\n            // $.each($fixedEle, function() {\r\n            //     if ($(this).css('position') == 'fixed') {\r\n            //         $(this).addClass('fancybox-margin');\r\n            //     }\r\n            // });\r\n            // $('.site-header').css('position', 'relative');\r\n            $('body').css({'overflow': 'hidden'});\r\n            $win.trigger('resize.modalbox');\r\n            $target.fadeIn();\r\n\r\n            if(typeof productid !== 'undefined') {\r\n                $('#productId').val(productid);\r\n                $('#productField').val($('.product-name', $link.closest('.desc')).text());\r\n                $target.find('.modal-form').html('<iframe src=\"' + iframeURL + '\" />');\r\n                $('iframe').on('load', function() {\r\n                    clearInterval(resizeTimeout);\r\n                    var iframe = this,\r\n                    oriHeight = $(this.contentWindow.document.body).height();\r\n                    this.style.height = ($(this.contentWindow.document.body).height() + 37) + 'px';\r\n                    // console.log('here');\r\n\r\n                    resizeTimeout = setInterval(function() {\r\n                        if ($(iframe.contentWindow.document.body).height() != oriHeight) {\r\n                            iframe.style.height = ($(iframe.contentWindow.document.body).height() + 37) + 'px';\r\n                            clearInterval(resizeTimeout);\r\n                        }\r\n                    }, 200);\r\n                });\r\n\r\n            } else {\r\n                $('#productId').val('undefined');\r\n            }\r\n        });\r\n    }\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\nimport enquire from 'enquire.js';\r\nimport doT from 'dot';\r\nimport 'jquery-match-height';\r\n\r\nexport default class NewsroomWrapper {\r\n\tconstructor() {\r\n\t\tthis.name = 'newsroom';\r\n\t\t// console.log('%s module', this.name);\r\n\r\n\t\tlet $newsroom = $('.newsroom'),\r\n\t\t    $newsListing = $('.newsroom-listing', $newsroom),\r\n\t\t    // corporateNewsURL = $newsListing.data('corporate'),\r\n\t\t    // standardNewsURL = $newsListing.data('standard');\r\n\t\t    corporateNewsURL = '/api/getNewsByCategory',\r\n\t\t    standardNewsURL = '/api/getNewsByCategory';\r\n\r\n\t\tenquire.register(\"screen and (max-width: 767px)\", {\r\n\t\t    match: function(){\r\n\t\t        $('.newsroom-featured').append( $('.panel-blog'));\r\n\t\t    },\r\n\r\n\t\t    unmatch: function(){\r\n\t\t        $('.newsroom-featured .column-row:nth-child(2)').prepend( $('.panel-blog'));\r\n\t\t    }\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * On page load\r\n\t\t */\r\n\t    var $corporateNews    = $('.corporate-news', $newsListing),\r\n\t        $standardNews     = $('.standard-news', $newsListing),\r\n\t        $yearFilter       = $('.newsroom-listing__sort-result select', $newsListing),\r\n\t        corporateNewsPage = 1,\r\n\t        standardNewsPage  = 1,\r\n\t        corporateEnd      = false,\r\n\t        standardEnd       = false,\r\n\t        source            = $('#results-template').html(),\r\n\t        template          = doT.template(source);\r\n\r\n        $('.no-result').css({'display': 'none'});\r\n        loadNews('standard', standardNewsURL, $standardNews, standardNewsPage);\r\n        loadNews('corporate', corporateNewsURL, $corporateNews, corporateNewsPage);\r\n\r\n        $('.newsroom-featured__block .desc, .newsroom-featured__download-block .desc').matchHeight();\r\n        $('.newsroom-featured > .col-sm-7, .newsroom-featured > .col-sm-5').matchHeight();\r\n        $('.newsroom-featured__block .desc, .newsroom-featured__download-block .desc').matchHeight._afterUpdate = function() {\r\n            $('.newsroom-featured > .col-sm-7, .newsroom-featured > .col-sm-5').matchHeight();\r\n        };\r\n\r\n\t    /**\r\n\t     * load more standard news\r\n\t     */\r\n\t    $('.js-load-more', $standardNews).on('click', function(e) {\r\n\t        e.preventDefault();\r\n\r\n\t        loadNews('standard', standardNewsURL, $standardNews, standardNewsPage);\r\n\r\n\t        $(this).blur();\r\n\t    });\r\n\r\n\t    /**\r\n\t     * load more corporate news\r\n\t     */\r\n\t    $('.js-load-more', $corporateNews).on('click', function(e) {\r\n\t        e.preventDefault();\r\n\r\n\t        loadNews('corporate', corporateNewsURL, $corporateNews, corporateNewsPage);\r\n\r\n\t        $(this).blur();\r\n\t    });\r\n\r\n\r\n\t    /**\r\n\t     * Load all news sections\r\n\t     */\r\n\t    $('.js-load-all', $newsroom).on('click', function(e){\r\n\t        e.preventDefault();\r\n\r\n\t        loadNews('standard', standardNewsURL, $standardNews, standardNewsPage);\r\n\t        loadNews('corporate', corporateNewsURL, $corporateNews, corporateNewsPage);\r\n\r\n\t        $(this).blur();\r\n\t    });\r\n\r\n\t    let $sorter = $('.newsroom-listing__sort-result'),\r\n\t        $sortSelect = $('.newsroom-listing__sort-result select');\r\n\r\n\t    $sorter.map((i, ele) => {\r\n\t        let $this = $(ele),\r\n\t            $clone = $('.dropdown-copy', $this),\r\n\t            $dropdown = $('ul', $this),\r\n\t            $button = $('> button', $clone);\r\n\r\n\t        $button.on('click', (e) => {\r\n\t            e.stopPropagation();\r\n\t            $dropdown.toggle();\r\n\t        });\r\n\r\n\t        let $option = $('li button', $dropdown);\r\n\r\n\t        $option.map((j, ele) => {\r\n\t            let $this2 = $(ele);\r\n\r\n\t            $this2.on('click', () => {\r\n\t                let value = $this2.val(),\r\n\t                    text = $this2.text();\r\n\r\n\t                $button.text(text);\r\n\t                $button.val(value);\r\n\t                $('select', $this).val(value);\r\n\t                $sortSelect.trigger('change');\r\n\t            });\r\n\t        });\r\n\t    });\r\n\r\n\t    $(window).on('click', () => {\r\n\t        $('ul', $sorter).hide();\r\n\t    });\r\n\r\n\t    /**\r\n\t     * On year archive filter\r\n\t     */\r\n\t     $yearFilter.on('change', function(){\r\n\t        $('.news-results', $standardNews).empty();\r\n\t        $('.news-results', $corporateNews).empty();\r\n\r\n\t        corporateNewsPage = 1;\r\n\t        standardNewsPage  = 1;\r\n\r\n\t        loadNews('standard', standardNewsURL, $standardNews, standardNewsPage);\r\n\t        loadNews('corporate', corporateNewsURL, $corporateNews, corporateNewsPage);\r\n\t    });\r\n\r\n\t    function loadNews(type, url, $newsObj, pageNum) {\r\n\r\n\t        var $btn = $('.js-load-more', $newsObj);\r\n\r\n\t        $('.loader-animation', $newsObj).css({'display': 'inline-block'});\r\n\t        $.ajax({\r\n\t            url: url,\r\n\t            data: {'category': $newsObj.data('category'), 'page': pageNum, 'year': $yearFilter.val()},\r\n\t            dataType: 'json',\r\n\t            cache: false\r\n\t        }).done(function(data) {\r\n\t            var pageCount,\r\n\t                $noMoreResult = $('.no-result');\r\n\r\n\t            $('.loader-animation', $newsObj).css({'display': ''});\r\n\r\n\t            // Type of news request\r\n\t            if(type === 'standard') {\r\n\t                standardNewsPage++;\r\n\t                pageCount = standardNewsPage;\r\n\t            } else {\r\n\t                corporateNewsPage++;\r\n\t                pageCount = corporateNewsPage;\r\n\t            }\r\n\r\n\t            // Append results if end page is not reached\r\n\t            if(pageCount - 2 < parseInt(data.totalPage)) {\r\n\t                $('.news-results', $newsObj).append(template({news: data.news}));\r\n\t            } else {\r\n\t                $('.no-result', $newsObj).css({'display': 'inline-block'});\r\n\r\n\t                setTimeout(function(){\r\n\t                    $noMoreResult.slideUp(function(){\r\n\t                        $('.no-result', $newsObj).css({'display': 'none'});\r\n\t                    });\r\n\t                }, 2000);\r\n\t            }\r\n\r\n\t            if(pageCount > parseInt(data.totalPage)){\r\n\t                $btn.hide();\r\n\t            } else {\r\n\t                $btn.show();\r\n\t            }\r\n\t        });\r\n\t    }\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\nimport 'jquery-match-height';\r\nimport enquire from 'enquire.js';\r\nimport 'slick-carousel';\r\n\r\nimport CompareItem from '../../molecules/compare-item/compare-item';\r\n\r\nexport default class ProductFinderCompare {\r\n\tconstructor(config) {\r\n\t\tconst { breakpoints } = config;\r\n\r\n\t\tnew CompareItem(breakpoints);\r\n\r\n\t\tlet $compareWrap = $('.product-finder-compare'),\r\n\t\t\trow1 = $('.specrow-1', $compareWrap),\r\n\t\t\trow2 = $('.specrow-2', $compareWrap),\r\n\t\t\trow3 = $('.specrow-3', $compareWrap),\r\n\t\t\trow4 = $('.specrow-4', $compareWrap),\r\n\t\t\trow5 = $('.specrow-5', $compareWrap),\r\n\t\t\trow6 = $('.specrow-6', $compareWrap),\r\n\t\t\trow7 = $('.specrow-7', $compareWrap),\r\n\t\t\trow8 = $('.specrow-8', $compareWrap),\r\n\t\t\trow9 = $('.specrow-9', $compareWrap),\r\n\t\t\trow10 = $('.specrow-10', $compareWrap),\r\n\t\t\trow11 = $('.specrow-11', $compareWrap),\r\n\t\t\trow12 = $('.specrow-12', $compareWrap),\r\n\t\t\trow13 = $('.specrow-13', $compareWrap),\r\n\t\t\trow14 = $('.specrow-14', $compareWrap),\r\n\t\t\trow15 = $('.specrow-15', $compareWrap),\r\n\t\t\trow16 = $('.specrow-16', $compareWrap),\r\n\t\t\trowlast = $('.specrow-last', $compareWrap),\r\n\t\t\trow1Title = $('h3', row1),\r\n\t\t\trow1Desc = $('p', row1);\r\n\r\n\t\tif ($compareWrap.length) {\r\n\t\t\trow1.matchHeight();\r\n\t\t\trow2.matchHeight();\r\n\t\t\trow3.matchHeight();\r\n\t\t\trow4.matchHeight();\r\n\t\t\trow5.matchHeight();\r\n\t\t\trow6.matchHeight();\r\n\t\t\trow7.matchHeight();\r\n\t\t\trow8.matchHeight();\r\n\t\t\trow9.matchHeight();\r\n\t\t\trow10.matchHeight();\r\n\t\t\trow11.matchHeight();\r\n\t\t\trow12.matchHeight();\r\n\t\t\trow13.matchHeight();\r\n\t\t\trow14.matchHeight();\r\n\t\t\trow15.matchHeight();\r\n\t\t\trow16.matchHeight();\r\n\t\t\trowlast.matchHeight();\r\n\t\t\trow1Title.matchHeight();\r\n\t\t\trow1Desc.matchHeight();\r\n\t\t}\r\n\r\n\t\t$('.compare__footer--back button').on('click', function(e){\r\n\t\t\te.preventDefault();\r\n\t\t\twindow.location.href = $(this).attr('href');\r\n\t\t});\r\n\r\n\t\t$('.compare__footer--startover button').on('click', function(e){\r\n\t\t\te.preventDefault();\r\n\t\t\tlocalStorage.removeItem(\"id\");\r\n\t\t\tlocalStorage.removeItem(\"state\");\r\n\t\t\tlocalStorage.removeItem(\"date\");\r\n\t\t\twindow.location.href = $(this).attr('href');\r\n\t\t});\r\n\r\n\r\n\t\t\r\n\t\t\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\nimport ProductItem from '../../molecules/product-item/product-item';\r\nimport doT from 'dot';\r\nimport Cookies from 'js-cookie';\r\n\r\nexport default class ProductFinder {\r\n\tconstructor() {\r\n\r\n\t\tthis.productItem = new ProductItem();\r\n\r\n\t\tlet $productFinder =  $('.product-finder'),\r\n\t\t\t$restartBtn = $('.btn-startover', $productFinder);\r\n\r\n\t\tlet printers = JSON.parse($('#printerData').html());\r\n\t\tlet qstn1Data = [],\r\n\t\t\tqstn2Data = [],\r\n\t\t\tqstn3Data = [],\r\n\t\t\tqstn4Data = [],\r\n\t\t\tqstn5Data = [],\r\n\t\t\tsteps = 1;\r\n\r\n\t\tlet q1SelectedValue = \"\";\r\n\t\tlet selectedComparedProduct = [];\r\n\t\tlet selectedFeatures = [];\r\n\t\tlet finalData = [];\r\n\r\n\t\tlet state = {};\r\n\t\tlet idLStorage = localStorage.getItem('id') ? localStorage.getItem('id').split(',') : [];\r\n\t\tlet stateLStorage = localStorage.getItem('state') ? JSON.parse(JSON.parse(localStorage.getItem('state'))) : {};\r\n\t\tlet dateStorage = localStorage.getItem('date');\r\n\r\n\t\t// let cookiesStorage = Cookies.get('id')?Cookies.get('id').split(',') : [];\r\n\t\t// let cookiesState = Cookies.get('state')?JSON.parse(Cookies.get('state')) : {};\r\n\r\n\t\t// let cookiesState = Cookies.get('state');\r\n\t\t// console.log('state', cookiesState);\r\n\t\t// console.log('json', JSON.parse(Cookies.get('state')));\r\n\r\n\t\t// if(Cookies.get('state')) {\r\n\t\t// \tif(cookiesState.steps === 6){\r\n\t\t// \t\tqstn1Data = cookiesState.qstn1Data,\r\n\t\t// \t\tqstn2Data = cookiesState.qstn2Data,\r\n\t\t// \t\tqstn3Data = cookiesState.qstn3Data,\r\n\t\t// \t\tqstn4Data = cookiesState.qstn4Data,\r\n\t\t// \t\tqstn5Data = cookiesState.qstn5Data,\r\n\t\t// \t\tsteps = cookiesState.steps;\r\n\t\t// \t\tq1SelectedValue = cookiesState.q1SelectedValue;\r\n\t\t// \t\t//selectedComparedProduct = cookiesState.selectedComparedProduct;\r\n\t\t// \t\tselectedFeatures = cookiesState.selectedFeatures;\r\n\t\t// \t\tfinalData = cookiesState.finalData;\r\n\r\n\r\n\t\t// \t\tlet printerListingMarkup = doT.template($('#listingPrinterContainer').html())(finalData);\r\n\t\t// \t\t$('.product-item__list').html(printerListingMarkup);\r\n\r\n\t\t// \t\t$('.match-height').matchHeight();\r\n\r\n\t\t// \t\tshowPrinterListing(finalData);\r\n\t\t// \t\tproductChecked();\r\n\t\t// \t\t$('.product-finder__footer--back').show();\r\n\t\t// \t\t$('.product-finder__footer--right').show();\r\n\t\t// \t\t//$('.product-finder__footer--right .btn-findprinter').siblings('.btn-compareprinter').show();\r\n\t\t// \t\t$('.product-finder__footer--right .btn-findprinter').removeClass('is-shown');\r\n\r\n\t\t// \t\tlet resultTxt = $('.finder-results__desc span.txt').data('results');\r\n\t\t// \t\t\t$('.finder-results__desc span.num').html(`${finalData.length}`);\r\n\t\t// \t\t\t$('.finder-results__desc span.txt').html(`${resultTxt}`);\r\n\r\n\t\t// \t\tif ( finalData.length <= 0) {\r\n\t\t// \t\t\t$('.product-finder__empty').show();\r\n\t\t// \t\t\t$('.product-finder-results').removeClass('is-active');\r\n\t\t// \t\t\t$('.product-finder-results').hide();\r\n\t\t// \t\t\t// $('.finder-results__desc h2').html(`<span>${finalData.length}</span> printer fit your needs`);\r\n\t\t// \t\t} else {\r\n\t\t// \t\t\t$('.product-finder__empty').hide();\r\n\t\t// \t\t\t// $('.finder-results__desc span').html(finalData.length);\r\n\t\t// \t\t\t// $('.finder-results__desc h2').html(`<span>${finalData.length}</span> printers fit your needs`);\r\n\t\t// \t\t}\r\n\t\t// \t}\r\n\t\t// }\r\n\r\n\t\tlet currentDate = new Date();\r\n\t\tlet todayDate = Date.now();\r\n\r\n\t\tif(localStorage.getItem('date')) {\r\n\r\n\t\t\tlet localStorageDate = localStorage.getItem('date');\r\n\r\n\t\t\t// compare todayDate and localStorageDate\r\n\t\t\t\r\n\t\t\tlet diffTime = Math.abs(todayDate - localStorageDate);\r\n\t\t\tlet diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); \r\n\r\n\r\n\r\n\t\t\tconsole.log('diffDays', diffDays);\r\n\r\n\t\t\t// if more than 2 days\r\n\t\t\tif (diffDays >= 2) {\r\n\t\t\t\t// remove localStorage values for other things\r\n\t\t\t\t// remove localStorage value for date\r\n\t\t\t\tlocalStorage.removeItem(\"id\");\r\n\t\t\t\tlocalStorage.removeItem(\"state\");\r\n\t\t\t\tlocalStorage.removeItem(\"date\");\r\n\r\n\r\n\t\t\t}\r\n\t\t\t\r\n\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\t\r\n\t\t\tconsole.log('todayDate', todayDate);\r\n\r\n\t\t\tlocalStorage.setItem('date', todayDate);\r\n\r\n\t\t}\r\n\r\n\t\tif(localStorage.getItem('state') !== null){\r\n\t\t\tif(stateLStorage.steps === 6){\r\n\t\t\t\tqstn1Data = stateLStorage.qstn1Data,\r\n\t\t\t\tqstn2Data = stateLStorage.qstn2Data,\r\n\t\t\t\tqstn3Data = stateLStorage.qstn3Data,\r\n\t\t\t\tqstn4Data = stateLStorage.qstn4Data,\r\n\t\t\t\tqstn5Data = stateLStorage.qstn5Data,\r\n\t\t\t\tsteps = stateLStorage.steps;\r\n\t\t\t\tq1SelectedValue = stateLStorage.q1SelectedValue;\r\n\t\t\t\t//selectedComparedProduct = stateLStorage.selectedComparedProduct;\r\n\t\t\t\tselectedFeatures = stateLStorage.selectedFeatures;\r\n\t\t\t\tfinalData = stateLStorage.finalData;\r\n\r\n\r\n\t\t\t\tlet printerListingMarkup = doT.template($('#listingPrinterContainer').html())(finalData);\r\n\t\t\t\t$('.product-item__list').html(printerListingMarkup);\r\n\r\n\t\t\t\t$('.match-height').matchHeight();\r\n\r\n\t\t\t\tshowPrinterListing(finalData);\r\n\t\t\t\tproductChecked();\r\n\t\t\t\t$('.product-finder__footer--back').show();\r\n\t\t\t\t$('.product-finder__footer--right').show();\r\n\t\t\t\t//$('.product-finder__footer--right .btn-findprinter').siblings('.btn-compareprinter').show();\r\n\t\t\t\t$('.product-finder__footer--right .btn-findprinter').removeClass('is-shown');\r\n\r\n\t\t\t\tlet resultTxt = $('.finder-results__desc span.txt').data('results');\r\n\t\t\t\t\t$('.finder-results__desc span.num').html(`${finalData.length}`);\r\n\t\t\t\t\t$('.finder-results__desc span.txt').html(`${resultTxt}`);\r\n\r\n\t\t\t\tif ( finalData.length <= 0) {\r\n\t\t\t\t\t$('.product-finder__empty').show();\r\n\t\t\t\t\t$('.product-finder-results').removeClass('is-active');\r\n\t\t\t\t\t$('.product-finder-results').hide();\r\n\t\t\t\t\t// $('.finder-results__desc h2').html(`<span>${finalData.length}</span> printer fit your needs`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$('.product-finder__empty').hide();\r\n\t\t\t\t\t// $('.finder-results__desc span').html(finalData.length);\r\n\t\t\t\t\t// $('.finder-results__desc h2').html(`<span>${finalData.length}</span> printers fit your needs`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// restart finder\r\n\t\t$restartBtn.on('click', (e) => {\r\n\t\t\te.preventDefault();\r\n\t\t\tlocalStorage.removeItem(\"id\");\r\n\t\t\tlocalStorage.removeItem(\"state\");\r\n\t\t\tlocalStorage.removeItem(\"date\");\r\n\t\t\t// Cookies.remove(\"id\");\r\n\t\t\t// Cookies.remove(\"state\");\r\n\t\t\twindow.location.reload();\r\n\t\t\t$(\"html,body\").animate({scrollTop: 0}, 100);\r\n\r\n\t\t\t//all radio to prop check false\r\n\r\n\t\t});\r\n\r\n\r\n\t\t//printer results number\r\n\t\t// $('.product-finder__footer--results span').text(printers.length);\r\n\t\tfooterResult(printers);\r\n\t\t//hide back button on 1st question\r\n\r\n\t\t$(`.question1 input[name=\"business-size\"]`).on('change', e => {\r\n\t\t\tlet value = $(`.question1 input[name=\"business-size\"]:checked`).val();\r\n\r\n\t\t\t//if (value == 'small') show question list\r\n\r\n\t\t\tqstn1Data = [];\r\n\t\t\tq1SelectedValue = value;\r\n\r\n\t\t\tfor ( let i = 0; i < printers.length; i++) {\r\n\t\t\t\tif ( printers[i][`q${steps}`] == value ) {\r\n\t\t\t\t\tqstn1Data.push(printers[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// noPrinter(qstn1Data);\r\n\t\t\t// $('.product-finder__footer--results span').text(qstn1Data.length);\r\n\t\t\tfooterResult(qstn1Data);\r\n\t\t\tif(qstn1Data.length === 0) return false;\r\n\r\n\t\t\tsteps++;\r\n\t\t\tprocessQuestion(steps);\r\n\r\n\r\n\r\n\t\t\t//check if array is 0 , write function\r\n\t\t});\r\n\r\n\t\t$(`.question2 input[name=\"functionality\"]`).on('change', e => {\r\n\t\t\tlet value = $(`.question2 input[name=\"functionality\"]:checked`).val();\r\n\r\n\t\t\tqstn2Data = [];\r\n\r\n\t\t\tfor ( let i = 0; i < qstn1Data.length; i++) {\r\n\t\t\t\tif ( qstn1Data[i][`q${steps}`] == value ) {\r\n\t\t\t\t\tqstn2Data.push(qstn1Data[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// noPrinter(qstn2Data);\r\n\t\t\tfooterResult(qstn2Data);\r\n\t\t\t// $('.product-finder__footer--results span').text(qstn2Data.length);\r\n\t\t\tif(qstn2Data.length === 0) return false;\r\n\r\n\t\t\tsteps++;\r\n\t\t\tprocessQuestion(steps);\r\n\r\n\r\n\t\t});\r\n\r\n\t\t$(`.question3 input[name=\"colour\"]`).on('change', e => {\r\n\t\t\tlet value = $(`.question3 input[name=\"colour\"]:checked`).val();\r\n\r\n\t\t\tqstn3Data = [];\r\n\r\n\t\t\tfor ( let i = 0; i < qstn2Data.length; i++) {\r\n\t\t\t\tif ( qstn2Data[i][`q${steps}`] == value ) {\r\n\t\t\t\t\tqstn3Data.push(qstn2Data[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// noPrinter(qstn3Data);\r\n\t\t\t// $('.product-finder__footer--results span').text(qstn3Data.length);\r\n\t\t\tfooterResult(qstn3Data);\r\n\t\t\tif(qstn3Data.length === 0) return false;\r\n\r\n\t\t\tsteps++;\r\n\t\t\tprocessQuestion(steps);\r\n\r\n\r\n\t\t\t// check page 1 value to display correct question in page 4\r\n\t\t\tcheckQ1ToDisplayQ4();\r\n\r\n\t\t\thideQ4NoResultOptions();\r\n\r\n\r\n\t\t});\r\n\r\n\t\t$(`.question4 input[name=\"quantity\"]`).on('change', e => {\r\n\t\t\tlet value = $(`.question4 input[name=\"quantity\"]:checked`).val();\r\n\r\n\t\t\tqstn4Data = [];\r\n\r\n\t\t\t// for ( let i = 0; i < qstn3Data.length; i++) {\r\n\t\t\t// \tif ( qstn3Data[i][`q${steps}`] == value ) {\r\n\t\t\t// \t\tqstn4Data.push(qstn3Data[i]);\r\n\t\t\t// \t}\r\n\t\t\t// }\r\n\r\n\t\t\t// for ( let i = 0; i < qstn3Data.length; i++ ) {\r\n\t\t\t// \tif ($(`.question4 input[value=\"${qstn3Data[i].q4}\"]:checked`)) {\r\n\r\n\t\t\t// \t\tqstn4Data.push(qstn3Data[i]);\r\n\r\n\t\t\t// \t\tconsole.log($(`.question4 input[value=\"${qstn3Data[i].q4}\"]:checked`));\r\n\t\t\t// \t}\r\n\t\t\t// }\r\n\r\n\r\n\t\t\tqstn3Data.forEach((obj)=>{\r\n\t\t\t\tlet found = obj.q4.some(item => item === value);\r\n\t\t\t\t// console.log(value);\r\n\r\n\t\t\t\t// console.log('found', found, obj.q4);\r\n\t\t\t\tif(found) qstn4Data.push(obj);\r\n\r\n\t\t\t});\r\n\r\n\r\n\t\t\t// noPrinter(qstn4Data);\r\n\t\t\t// $('.product-finder__footer--results span').text(qstn4Data.length);\r\n\t\t\tfooterResult(qstn4Data);\r\n\t\t\tif(qstn4Data.length === 0) return false;\r\n\r\n\t\t\tsteps++;\r\n\t\t\tprocessQuestion(steps);\r\n\r\n\t\t\t// if(qstn4Data.length > 0){\r\n\t\t\t// \t$('.product-finder__footer .btn-findprinter').addClass('is-shown');\r\n\t\t\t// } else {\r\n\t\t\t// \t$('.product-finder__footer .btn-findprinter').removeClass('is-shown');\r\n\t\t\t// }\r\n\r\n\t\t});\r\n\r\n\t\t$(`.question5 input[name=\"feature\"]`).on('click', e => {\r\n\t\t\tlet $btnSubmit = $('.product-finder__footer .btn-findprinter');\r\n\t\t\tlet checkedBox = $(`.question5 input[name=\"feature\"]`);\r\n\r\n\t\t\tlet $this = $(e.target);\r\n\t\t\tlet checked = $this.val();\r\n\t\t\tif ($this.is(':checked')) {\r\n\t\t\t\tselectedFeatures.push(checked);\r\n\t\t\t\t$('.product-finder__footer .btn-findprinter').addClass('is-shown');\r\n\t\t\t} else {\r\n\t\t\t\tselectedFeatures.splice($.inArray(checked, selectedFeatures), 1);\r\n\t\t\t\t$('.product-finder__footer .btn-findprinter').removeClass('is-shown');\r\n\t\t\t}\r\n\r\n\t\t\tlet filteredData = [];\r\n\r\n\t\t\tqstn4Data.forEach((obj)=>{\r\n\t\t\t\tlet found = obj.q5.some(item => selectedFeatures.indexOf(item));\r\n\t\t\t\t// console.log('found', found, obj.q5);\r\n\t\t\t\tif(found) filteredData.push(obj);\r\n\t\t\t});\r\n\r\n\r\n\r\n\t\t\tif(selectedFeatures.length === 0){\r\n\t\t\t\tfilteredData = qstn4Data;\r\n\t\t\t}\r\n\r\n\t\t\t// footerResult(filteredData);\r\n\r\n\t\t\tfinalData = filteredData;\r\n\t\t\tfooterResult(filteredData);\r\n\t\t\t// $('.product-finder__footer--results span').text(filteredData.length);\r\n\r\n\t\t\tif(qstn4Data.length > 0) {\r\n\t\t\t\tsteps = 5;\r\n\t\t\t\thidePrinterListing();\r\n\t\t\t\t$btnSubmit.addClass('is-shown');\r\n\t\t\t} else {\r\n\t\t\t\t$btnSubmit.removeClass('is-shown');\r\n\t\t\t}\r\n\r\n\t\t\t// console.log('featuredData', filteredData);\r\n\t\t});\r\n\r\n\r\n\r\n\t\t// show printers listing\r\n\t\t$('.product-finder__footer--right .btn-findprinter').on('click', function(e) {\r\n\t\t\te.preventDefault();\r\n\r\n\r\n\r\n\t\t\tlet printerListingMarkup = doT.template($('#listingPrinterContainer').html())(finalData);\r\n\t\t\t$('.product-item__list').html(printerListingMarkup);\r\n\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\t$('.match-height').matchHeight();\r\n\t\t\t}, 600);\r\n\r\n\r\n\t\t\tshowPrinterListing(finalData);\r\n\r\n\t\t\tproductChecked();\r\n\t\t\tselectedComparedProduct = [];\r\n\t\t\tsteps = 6;\r\n\r\n\t\t\tif ( finalData.length == 0) {\r\n\t\t\t\t$('.product-finder__empty').show();\r\n\t\t\t\t$('.product-finder-results').removeClass('is-active');\r\n\t\t\t\t$('.product-finder-results').hide();\r\n\t\t\t\t// $('.finder-results__desc h2').html(`<span>${finalData.length}</span> printer fit your needs`);\r\n\t\t\t} else if ( finalData.length >= 2) {\r\n\t\t\t\t$('.product-finder__empty').hide();\r\n\t\t\t\t// $('.finder-results__desc h2').html(`<span>${finalData.length}</span> printers fit your needs`);\r\n\t\t\t\t// $('.finder-results__desc .num').html(finalData.length);\r\n\t\t\t\tlet resultTxt = $('.finder-results__desc span.txt').data('results');\r\n\t\t\t\t$('.finder-results__desc span.num').html(`${finalData.length}`);\r\n\t\t\t\t$('.finder-results__desc span.txt').html(`${resultTxt}`);\r\n\t\t\t} else if (finalData.length == 1) {\r\n\t\t\t\tlet idSelected = finalData[0].id;\r\n\r\n\t\t\t\t// let idStr = finalData.id;\r\n\t\t\t\t// window.location.href = `/product-finder-compare?id=${idSelected}`;\r\n\t\t\t\twindow.location.href = `${$('.product-finder-section').data('url')}?id=${idSelected}`;\r\n\t\t\t}\r\n\r\n\t\t\t$(this).removeClass('is-shown');\r\n\r\n\t\t});\r\n\r\n\t\t\r\n\r\n\t\t$('.btn-compareprinter').on('click', function() {\r\n\t\t\tstate = {\r\n\t\t\t\tqstn1Data,\r\n\t\t\t\tqstn2Data,\r\n\t\t\t\tqstn3Data,\r\n\t\t\t\tqstn4Data,\r\n\t\t\t\tqstn5Data,\r\n\t\t\t\tsteps: steps,\r\n\t\t\t\tq1SelectedValue,\r\n\t\t\t\tselectedComparedProduct,\r\n\t\t\t\tselectedFeatures,\r\n\t\t\t\tfinalData\r\n\t\t\t}\r\n\r\n\t\t\tlet stateStr = JSON.stringify(state);\r\n\t\t\tlet idStr = selectedComparedProduct.toString();\r\n\t\t\tlocalStorage.setItem('id', JSON.stringify(idStr))\r\n\t\t\tlocalStorage.setItem('state', JSON.stringify(stateStr));\r\n\r\n\t\t\t// Cookies.set('id', JSON.stringify(idStr), { expires: 7 });\r\n\t\t\t// Cookies.set('state', JSON.stringify(stateStr), { expires: 7 });\r\n\t\t\twindow.location.href = `${$('.product-finder-section').data('url')}?id=${idStr}`;\r\n\t\t\t// window.location.href = \"/product-finder-compare?id=\" + idStr;\r\n\r\n\t\t});\r\n\r\n\t\t// back to prev question\r\n\t\t$('.product-finder__footer--back button').on('click', function(e){\r\n\t\t\te.preventDefault();\r\n\r\n\t\t\t$('.product-finder__empty').hide();\r\n\r\n\t\t\tsteps--;\r\n\t\t\t$(`[data-stepno=${steps}]`).addClass('is-active');\r\n\r\n\t\t\t$('.product-finder__question input[type=\"radio\"]:checked').prop('checked', false);\r\n\t\t\t$('.product-finder__question input[type=\"checkbox\"]:checked').prop('checked', false);\r\n\r\n\r\n\t\t\t$(`.product-finder__question.is-active`).fadeOut(function(){\r\n\t\t\t\t$(this).removeClass('is-active');\r\n\t\t\t\t$('.steps-list .is-active').removeClass('is-active');\r\n\r\n\t\t\t\t$(`.steps-list [data-stepno=${steps}]`).addClass('is-active');\r\n\t\t\t\t$(`.product-finder__question[data-stepno=${steps}]`).addClass('is-active');\r\n\t\t\t\t$(`.product-finder__question[data-stepno=${steps}]`).delay(400).fadeIn();\r\n\t\t\t});\r\n\r\n\t\t\t$('.product-finder-results.is-active').fadeOut(function(){\r\n\t\t\t\t$(this).removeClass('is-active');\r\n\t\t\t});\r\n\r\n\t\t\thidePrinterListing();\r\n\r\n\t\t\t// reset selected features from page 5\r\n\t\t\tselectedFeatures = [];\r\n\r\n\t\t\tswitch(steps){\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tfooterResult(printers);\r\n\t\t\t\t\t$('.product-finder__footer--back').hide();\r\n\t\t\t\t\t$('.product-finder__footer--right').hide();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tfooterResult(qstn1Data);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tfooterResult(qstn2Data);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tfooterResult(qstn3Data);\r\n\t\t\t\t\tcheckQ1ToDisplayQ4();\r\n\t\t\t\t\t$('.product-finder__footer .btn-findprinter').removeClass('is-shown');\r\n\t\t\t\t\tcheckQ1ToDisplayQ4();\r\n\t\t\t\t\thideQ4NoResultOptions();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tfooterResult(qstn4Data);\r\n\t\t\t\t\t$('.product-finder__footer--right .btn-compareprinter').hide();\r\n\t\t\t\t\tif($(`.question5 input[name=\"feature\"]:checked`).length > 0){\r\n\t\t\t\t\t\t$('.product-finder__footer--right .btn-findprinter').addClass('is-shown');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\tfooterResult(qstn5Data);\r\n\r\n\t\t\t\t\tif ( qstn5Data.length <= 0) {\r\n\t\t\t\t\t\t$('.product-finder__empty').show();\r\n\t\t\t\t\t\t$('.product-finder-results').removeClass('is-active');\r\n\t\t\t\t\t\t$('.product-finder-results').hide();\r\n\t\t\t\t\t\t// $('.finder-results__desc h2').html(`<span>${finalData.length}</span> printer fit your needs`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tfunction processQuestion(steps) {\r\n\t\t\t// set active step and questions\r\n\t\t\t$(`[data-stepno=${steps}]`).addClass('is-active');\r\n\r\n\t\t\t$(`.product-finder__question.is-active`).fadeOut(function(){\r\n\t\t\t\t$(this).removeClass('is-active');\r\n\t\t\t\t$('.steps-list .is-active').removeClass('is-active');\r\n\t\t\t\tsetTimeout(function() {\r\n\t\t\t\t\t$(`.product-finder__question[data-stepno=${steps}]`).fadeIn();\r\n\t\t\t\t}, 100);\r\n\r\n\t\t\t\t$(`.steps-list [data-stepno=${steps}]`).addClass('is-active');\r\n\t\t\t\t$(`.product-finder__question[data-stepno=${steps}]`).addClass('is-active');\r\n\t\t\t\t$(`.product-finder__question[data-stepno=${steps}]`).delay(400).fadeIn();\r\n\t\t\t});\r\n\r\n\t\t\t$('.product-finder__footer--back').show();\r\n\t\t\t$('.product-finder__footer--right').show();\r\n\t\t}\r\n\r\n\t\tfunction showPrinterListing(results) {\r\n\t\t\tlet $productItem = $('.product-item'),\r\n\t\t\t\titemTitle = $('h3', $productItem),\r\n\t\t\t\titemDesc = $('p', $productItem);\r\n\r\n\t\t\tif ($productItem.length) {\r\n\t\t\t\titemTitle.matchHeight();\r\n\t\t\t\titemDesc.matchHeight();\r\n\t\t\t}\r\n\r\n\t\t\tif ( `${results.length}` <= 0) {\r\n\t\t\t\t$(`.product-finder__question.is-active`).fadeOut(function(){\r\n\t\t\t\t\t$(this).removeClass('is-active');\r\n\t\t\t\t});\r\n\t\t\t\t$('.product-finder__footer--results').hide();\r\n\t\t\t\t$('.product-finder__steps').hide();\r\n\t\t\t} else {\r\n\t\t\t\t$('.product-finder__steps').hide();\r\n\t\t\t\t$('.product-finder__footer--results').hide();\r\n\t\t\t\t$('.product-finder-results').delay(400).fadeIn();\r\n\t\t\t\t$('.product-finder-results').addClass('is-active');\r\n\r\n\t\t\t\t$(`.product-finder__question.is-active`).fadeOut(function(){\r\n\t\t\t\t\t$(this).removeClass('is-active');\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction footerResult(results) {\r\n\t\t\t// if ( results.length <= 1) {\r\n\t\t\t// \t// $('.finder-results__desc span').text(qstn5Data.length);\r\n\t\t\t// \t$('.product-finder__footer--results p').html(`<span>${results.length}</span> printer fit your needs`);\r\n\t\t\t// } else {\r\n\t\t\t// \t$('.product-finder__footer--results p').html(`<span>${results.length}</span> printers fit your needs`);\r\n\r\n\t\t\t// }\r\n\t\t\tlet resultTxt = $('.product-finder__footer--results span.txt').data('results');\r\n\t\t\t\t$('.product-finder__footer--results span.num').html(` ${results.length}`);\r\n\t\t\t\t$('.product-finder__footer--results span.txt').html(` ${resultTxt}`);\r\n\t\t}\r\n\r\n\t\tfunction productChecked() {\r\n\t\t\tlet $productList = $('.product-finder-results'),\r\n\t\t\t\t$checkbox = $('.product-item input', $productList),\r\n\t\t\t\t$compareBtn = $('.btn-compareprinter');\r\n\r\n\t\t\t$checkbox.map((i, ele) => {\r\n\t\t\t\tlet $this = $(ele),\r\n\t\t\t\t\t$checked = $('.product-item input[type=checkbox]:checked');\r\n\r\n\t\t\t\tif (!$checked.length) {\r\n\t\t\t\t\t$compareBtn.attr(\"disabled\", true);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$compareBtn.attr(\"disabled\", false);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$this.on('change', function() {\r\n\t\t\t\t\tlet $checkbox = $('.product-item input[type=checkbox]'),\r\n\t\t\t\t\t\t$checked = $('.product-item input[type=checkbox]:checked');\r\n\r\n\t\t\t\t\t$compareBtn.attr(\"disabled\", false);\r\n\r\n\t\t\t\t\tif ($checked.length >= 4) {\r\n\t\t\t\t\t\t$('.alert-compare').removeClass('hidden');\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$('.alert-compare').addClass('hidden');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ($checked.length >= 5) {\r\n\t\t\t\t\t\t$this.prop('checked', false);\r\n\t\t\t\t\t\tlet alertTxt = $('.product-finder-results .alert-compare').data('text');\r\n\t\t\t\t\t\talert(`${alertTxt}`);\r\n\t\t\t\t\t\t$('.finder-results__desc .alert-compare').removeClass('hidden');\r\n\t\t\t\t\t\t$('.finder-results__desc .alert-compare').html('alertTxt');\r\n\t\t\t\t\t\t// $('.finder-results__desc').css('color', '#d92231');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// push selected product into array\r\n\t\t\t\t\tlet checked = $this.val();\r\n\t\t\t\t\tif ($this.is(':checked')) {\r\n\t\t\t\t\t\tselectedComparedProduct.push(checked);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tselectedComparedProduct.splice($.inArray(checked, selectedComparedProduct), 1);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(selectedComparedProduct.length > 0){\r\n\t\t\t\t\t\t$('.product-finder__footer--right .btn-compareprinter').show();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$('.product-finder__footer--right .btn-compareprinter').hide();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// console.log('selectedComparedProduct', selectedComparedProduct);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tfunction hidePrinterListing() {\r\n\t\t\t$('.product-finder__footer--results').show();\r\n\t\t\t$('.product-finder__steps').show();\r\n\t\t\t$('.product-finder-results').fadeOut(function() {\r\n\t\t\t\t$(this).removeClass('is-active');\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tfunction noPrinter(qstnData) {\r\n\t\t\tif ( `${qstnData}`.length <= 0 ){\r\n\t\t\t\t$('.product-finder__empty').show();\r\n\t\t\t\t$('.product-finder__footer--right .btn-compareprinter').hide();\r\n\t\t\t\t$('.product-finder__footer--right .btn-findprinter').removeClass('is-shown');\r\n\t\t\t\t$('.product-finder__footer--results').hide();\r\n\t\t\t\t$('.product-finder__footer--back').hide();\r\n\r\n\t\t\t\t$(`.product-finder__question.is-active`).fadeOut(function(){\r\n\t\t\t\t\t$(this).removeClass('is-active');\r\n\t\t\t\t\t$('.steps-list .is-active').removeClass('is-active');\r\n\r\n\t\t\t\t\t$('.product-finder__steps').hide();\r\n\t\t\t\t});\r\n\r\n\t\t\t\t//$('.product-finder__footer--back').hide();\r\n\r\n\t\t\t\tsteps;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// function getCookie(cname) {\r\n\t\t// \tvar name = cname + \"=\";\r\n\t\t// \tvar ca = document.cookie.split(';');\r\n\r\n\t\t// \tfor(var i = 0; i < ca.length; i++) {\r\n\t\t// \t\tvar c = ca[i];\r\n\r\n\t\t// \t\twhile (c.charAt(0) == ' ') {\r\n\t\t// \t\t\tc = c.substring(1);\r\n\t\t// \t\t}\r\n\r\n\t\t// \t\tif (c.indexOf(name) == 0) {\r\n\t\t// \t\t\treturn c.substring(name.length, c.length);\r\n\t\t// \t\t}\r\n\t\t// \t}\r\n\r\n\t\t// \treturn \"\";\r\n\t\t// }\r\n\r\n\t\tfunction checkQ1ToDisplayQ4(){\r\n\t\t\t$('.q4').removeClass('active').hide();\r\n\t\t\tif(q1SelectedValue === 'small' || q1SelectedValue === 'medium'){\r\n\t\t\t\t$('.q4a').addClass('active').show();\r\n\t\t\t} else {\r\n\t\t\t\t$('.q4b').addClass('active').show();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction hideQ4NoResultOptions(){\r\n\t\t\tlet questions = $('.question4 .active input[name=\"quantity\"]');\r\n\t\t\t$(questions).parent().removeClass('show');\r\n\t\t\tfor(let i = 0, len = questions.length; i<len; i++){\r\n\t\t\t\t// let value = $(questions[i]).val();\r\n\t\t\t\t// let array = qstn3Data.filter((obj) => obj.q4 === value);\r\n\t\t\t\t// if(array.length === 0) {\r\n\t\t\t\t// \t$(questions[i]).parent().addClass('hidden');\r\n\t\t\t\t// }\r\n\r\n\t\t\t\tlet value = $(questions[i]).val();\r\n\r\n\t\t\t\tfor ( let i = 0; i < qstn3Data.length; i++) {\r\n\t\t\t\t\tlet q4Data = qstn3Data[i].q4;\r\n\r\n\t\t\t\t\tfor ( let j = 0; j < q4Data.length; j++) {\r\n\t\t\t\t\t\tlet q4Value = q4Data[j];\r\n\r\n\t\t\t\t\t\tif ($(`.question4 .active input[value=\"${q4Value}\"]`).hasClass('show')) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t$(`.question4 .active input[value=\"${q4Value}\"]`).parent().addClass('show');\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\nimport doT from 'dot';\r\n\r\nexport default class ResellerLocator {\r\n\tconstructor() {\r\n\t\tlet $copy = $('.dropdown-copy', this.mapper),\r\n\t\t\t$reseller = $('.reseller-locator'),\r\n\t\t\t$partner = $('.reseller-partners', $reseller),\r\n\t\t\t$partnerContent = $('.reseller-partners--content', $partner),\r\n\t\t\t$resellerFilter = $('.reseller-locator__filters', $reseller),\r\n\t\t\t$resellerSearch = $('.btn-reseller-search', $resellerFilter),\r\n\t\t\t$resellerNear = $('.btn-reseller-near', $resellerFilter),\r\n\t\t\turl = $partner.data('endpoint'),\r\n\t\t\tnearMe = $partner.data('radius'),\r\n\t\t\tcheckLocation = $reseller.data('locator'),\r\n\t\t\tapikey = $reseller.data('apikey'),\r\n\t\t\tmap;\r\n\r\n\t\tthis.filters = {\r\n\t\t\t\"reseller\"  : $('#resellerFilter'),\r\n\t\t\t\"location\" : $('#locationFilter')\r\n\t\t};\r\n\r\n\t\tthis.mapper = $('.reseller-locator__filters');\r\n\t\tthis.$partnerContent = $partnerContent;\r\n\t\tthis.appendMapScripts(checkLocation, apikey);\r\n\r\n\t\t// get reseller data from HTML JSON\r\n\t\tlet resellerItem = JSON.parse($('#resellerData').html());\r\n\r\n\t\t$copy.map((i, ele) => {\r\n\t\t\tlet $this = $(ele),\r\n\t\t\t\t$select = $this.next(),\r\n\t\t\t\t$button = $this.find('button');\r\n\r\n\t\t\t$select.on('click', (e) => {\r\n\t\t\t\te.stopPropagation();\r\n\r\n\t\t\t\tif (!$this.hasClass('active')){\r\n\t\t\t\t\t$this.addClass('active');\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t$this.removeClass('active');\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$('.dropdown-copy').not($this).removeClass('active');\r\n\t\t\t});\r\n\r\n\t\t\t$select.on('change', () => {\r\n\t\t\t\tlet $option = $select.find(':selected');\r\n\r\n\t\t\t\t$select.prev().find('button').text($option.text());\r\n\t\t\t});\r\n\r\n\t\t\t$(window).on('click', () => {\r\n\t\t\t\tif ($this.hasClass('active')){\r\n\t\t\t\t\t$this.removeClass('active');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t$resellerSearch.on('click', (e) => {\r\n\t\t\te.preventDefault();\r\n\r\n\t\t\tlet $locationFilter = $('#locationFilter'),\r\n\t\t\t\t$locationVal = $locationFilter.val(),\r\n\t\t\t\t// $resellerFilter = $('#resellerFilter'),\r\n\t\t\t\t// $resellerVal = $resellerFilter.val(),\r\n\t\t\t\tcheckSelect = false;\r\n\r\n\t\t\t// if ($resellerVal === \"\") {\r\n\t\t\t// \t$('.error-msg-reseller').addClass('is-active');\r\n\t\t\t// \tcheckSelect = true;\r\n\t\t\t// } else {\r\n\t\t\t// \t$('.error-msg-reseller').removeClass('is-active');\r\n\t\t\t// }\r\n\r\n\t\t\tif ($locationVal === \"\") {\r\n\t\t\t\t$('.error-msg-location').addClass('is-active');\r\n\t\t\t\tcheckSelect = true;\r\n\t\t\t} else {\r\n\t\t\t\t$('.error-msg-location').removeClass('is-active');\r\n\t\t\t}\r\n\r\n\t\t\tif (checkSelect) { return false; }\r\n\r\n\t\t\tlet mapOptions = {\r\n\t\t\t\tzoom: 12,\r\n\t\t\t\tmapTypeId: google.maps.MapTypeId.ROADMAP\r\n\t\t\t};\r\n\r\n\t\t\tmap = new google.maps.Map(document.getElementById(\"resellerMap\"), mapOptions);\r\n\r\n\t\t\tlet storeExists = [],\r\n\t\t\t\tresellerCount = $('.resellers-count'),\r\n\t\t\t\tcount = 0,\r\n\t\t\t\tbound = new google.maps.LatLngBounds();\r\n\r\n\t\t\tlet tooltip = new google.maps.InfoWindow({\r\n\t\t\t\tmaxWidth: 200\r\n\t\t\t});\r\n\r\n\t\t\t$.each( resellerItem, function( key, data ) {\r\n\t\t\t\tif (key === $locationVal) {\r\n\t\t\t\t\t$.each( data, function( k, v ) {\r\n\t\t\t\t\t\tstoreExists.push(v);\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\tlet position = new google.maps.LatLng(v.lat, v.long);\r\n\t\t\t\t\t\tlet marker = new google.maps.Marker({\r\n\t\t\t\t\t\t\tposition: position,\r\n\t\t\t\t\t\t\tmap: map,\r\n\t\t\t\t\t\t\ttitle: \"<div class='map-pop-up' style = 'height:auto;width:200px'><strong>\" + v.name +\r\n\t\t\t\t\t\t\t\t\t\"</strong><br />\" + v.address\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tmarker.addListener('click', () => {\r\n\t\t\t\t\t\t\ttooltip.setContent(marker.title);\r\n\t\t\t\t\t\t\ttooltip.open(map, marker);\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tmap.addListener('click', () => {\r\n\t\t\t\t\t\t\ttooltip.close();\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tbound.extend(new google.maps.LatLng(v.lat, v.long));\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif(storeExists.length){\r\n\t\t\t\tmap.panTo(bound.getCenter());\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (navigator.geolocation) {\r\n\t\t\t\t\tnavigator.geolocation.getCurrentPosition(function(p) {\r\n\t\t\t\t\t\tvar pos = {\r\n\t\t\t\t\t\t\tlat: p.coords.latitude,\r\n\t\t\t\t\t\t\tlng: p.coords.longitude\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\tlet myPos = new google.maps.LatLng(pos.lat, pos.lng);\r\n\r\n\t\t\t\t\t\tmap.panTo(myPos);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$('.reseller-map').removeClass('reseller-nodisplay');\r\n\t\t\t$('.reseller-partners').removeClass('reseller-nodisplay');\r\n\t\t\t$('.resellers-count').html(count);\r\n\t\t\trenderResults(storeExists);\r\n\t\t});\r\n\r\n\t\t$resellerNear.on('click', (e) => {\r\n\t\t\te.preventDefault();\r\n\r\n\t\t\tlet storeExists = [],\r\n\t\t\t\tradius = nearMe,\r\n\t\t\t\tcount = 0,\r\n\t\t\t\tbound = new google.maps.LatLngBounds();\r\n\r\n\t\t\tlet tooltip = new google.maps.InfoWindow({\r\n\t\t\t\tmaxWidth: 200\r\n\t\t\t});\r\n\r\n\t\t\tif (navigator.geolocation) {\r\n\t\t\t\tnavigator.geolocation.getCurrentPosition(function (p) {\r\n\t\t\t\t\tlet LatLng = new google.maps.LatLng(p.coords.latitude, p.coords.longitude);\r\n\t\t\t\t\tlet mapOptions = {\r\n\t\t\t\t\t\tcenter: LatLng,\r\n\t\t\t\t\t\tzoom: 12,\r\n\t\t\t\t\t\tmapTypeId: google.maps.MapTypeId.ROADMAP\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tmap = new google.maps.Map(document.getElementById(\"resellerMap\"), mapOptions);\r\n\r\n\t\t\t\t\t$.each( resellerItem, function( key, data ) {\r\n\t\t\t\t\t\t$.each( data, function( k, v ) {\r\n\t\t\t\t\t\t\tlet position = new google.maps.LatLng(v.lat, v.long),\r\n\t\t\t\t\t\t\t\tdistance = google.maps.geometry.spherical.computeDistanceBetween(position, LatLng),\r\n\t\t\t\t\t\t\t\tdistanceInKm = ((Math.round(distance / 100) / 10) <= radius) ? 'exists' : '';\r\n\r\n\t\t\t\t\t\t\tif (distanceInKm === \"exists\") {\r\n\t\t\t\t\t\t\t\tstoreExists.push(v);\r\n\t\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\t\tlet marker = new google.maps.Marker({\r\n\t\t\t\t\t\t\t\t\tposition: position,\r\n\t\t\t\t\t\t\t\t\tmap: map,\r\n\t\t\t\t\t\t\t\t\ttitle: \"<div class='map-pop-up' style = 'height:auto;width:200px'><strong>\" + v.name +\r\n\t\t\t\t\t\t\t\t\t\t\t\"</strong><br />\" + v.address\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tmarker.addListener('click', () => {\r\n\t\t\t\t\t\t\t\t\ttooltip.setContent(marker.title);\r\n\t\t\t\t\t\t\t\t\ttooltip.open(map, marker);\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tmap.addListener('click', () => {\r\n\t\t\t\t\t\t\t\t\ttooltip.close();\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tbound.extend(new google.maps.LatLng(v.lat, v.long) );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// });\r\n\r\n\t\t\t\t\tif(storeExists.length){\r\n\t\t\t\t\t\tmap.panTo(bound.getCenter());\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tmap.panTo(LatLng);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t$('.reseller-map').removeClass('reseller-nodisplay');\r\n\t\t\t\t\t$('.reseller-partners').removeClass('reseller-nodisplay');\r\n\t\t\t\t\t$('.resellers-count').html(count);\r\n\t\t\t\t\trenderResults(storeExists);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$(document).on('click','.btn-map-show',function(e){\r\n\t\t\te.preventDefault();\r\n\r\n\t\t\tlet $target = $('.reseller-map');\r\n\r\n\t\t\t $('html, body').stop(true, true).animate({\r\n\t\t\t    scrollTop: $target.offset().top - 100\r\n\t\t\t}, 500);\r\n\r\n\t\t\tlet $this = $(this),\r\n\t\t\t\tlat = $this.data('lat'),\r\n\t\t\t\tlong = $this.data('long');\r\n\r\n\t\t\tlet showMarker = (data) => {\r\n\t\t\t\tlet position = new google.maps.LatLng(lat, long);\r\n\r\n\t\t\t\tmap.setZoom(15);\r\n\t\t\t\tmap.panTo(position);\r\n\t\t\t}\r\n\r\n\t\t\tshowMarker();\r\n\r\n\t\t});\r\n\r\n\t\tfunction renderResults(data) {\r\n\t\t\tlet resellerTemplate = $('#reseller-template').html();\r\n\t\t\tlet resellerContent = '';\r\n\r\n\t\t\tresellerContent = doT.template(resellerTemplate)(data);\r\n\r\n\t\t\t$partnerContent.html(resellerContent);\r\n\r\n\t\t\tlet\t$first = $('.partner-item').first();\r\n\t\t\tlet textWidth = $('.partner-item__detail .label', $first).first().width();\r\n\r\n\t\t\t$('.partner-item__detail .label', $first).each(function() {\r\n\t\t\t\tif(textWidth < $(this).width()){\r\n\t\t\t\t\ttextWidth = $(this).width();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttextWidth = textWidth;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlet padding = textWidth + 10;\r\n\t\t\t$('.padded').css('padding-left', padding + 'px');\r\n\r\n\t\t\tlet faxTextWidth = $('.partner-item__detail.fax .label').width();\r\n\t\t\tfaxTextWidth += 10;\r\n\t\t\t$('.padded-fax').css('padding-left', faxTextWidth + 'px');\r\n\t\t}\r\n\t}\r\n\r\n\tappendMapScripts(checkLocation, apikey) {\r\n\t\tlet scriptStr = '/maps/api/js?libraries=geometry&key=';\r\n\t\tscriptStr = checkLocation + scriptStr + apikey;\r\n\r\n\t\tlet script = document.createElement('script');\r\n\t\tscript.type = 'text/javascript';\r\n\t\tscript.src = scriptStr;\r\n\t\tdocument.body.appendChild(script);\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\nimport enquire from 'enquire.js';\r\nimport 'jquery-match-height';\r\n\r\nexport default class SiteHeader {\r\n\tconstructor() {\r\n\t\tlet $siteHeader = $('.site-header'),\r\n\t\t\t$nav = $('.main-nav', $siteHeader),\r\n\t\t\t$mainNav = $('.main', $nav),\r\n\t\t\t$contactNav = $('.share-contact', $nav),\r\n\t\t\t$hasChild = $('.has-children', $nav),\r\n\t\t\t$searchBar = $('.search-bar', $siteHeader);\r\n\r\n\t\tlet timer;\r\n\r\n\t\t$('.megamenu__products .nav-level3 li').matchHeight();\r\n\r\n\t\t$('.btn-nav-menu', $siteHeader).on('click', () => {\r\n\t\t\tif(!$siteHeader.hasClass('open')){\r\n\t\t\t\t$searchBar.removeClass('open');\r\n\t\t\t\t$siteHeader.addClass('open');\r\n\t\t\t\t$nav.addClass('slideout');\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t$siteHeader.removeClass('open');\r\n\t\t\t\t$('.slideout').removeClass('slideout');\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$('.btn-mobile-search', $siteHeader).on('click', () => {\r\n\t\t\tif(!$searchBar.hasClass('open')){\r\n\t\t\t\t$siteHeader.removeClass('open');\r\n\t\t\t\t$('.slideout').removeClass('slideout');\r\n\t\t\t\t$searchBar.addClass('open');\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t$searchBar.removeClass('open');\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$('> a', $hasChild).map((i,ele) => {\r\n\t\t\tlet $anchor = $(ele);\r\n\r\n\t\t\t$anchor.on('click', (e) => {\r\n\t\t\t\tif($anchor.next().length){\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t}\r\n\t\t\t\t$anchor.next().addClass('slideout');\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t$('button', $hasChild).map((i,ele) => {\r\n\t\t\tlet $this = $(ele);\r\n\r\n\t\t\t$this.on('click', () => {\r\n\t\t\t\t$this.parent().parent().removeClass('slideout');\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t$(window).on('scroll', function(){\r\n\t\t\tlet browserHeight = $(window).height(),\r\n\t\t\t\tdocumentHeight = $(document).height();\r\n\r\n\t\t\tif(!$siteHeader.hasClass('fix')){\r\n\t\t\t\tif((documentHeight - browserHeight) > 200){\r\n\t\t\t\t\tif($(window).scrollTop() > 50){\r\n\t\t\t\t\t\t$siteHeader.addClass('fix');\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\t$siteHeader.removeClass('fix');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif($(window).scrollTop() < 50){\r\n\t\t\t\t\t$siteHeader.removeClass('fix');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$('.nav-level1 > li').on('mouseenter focusin', function(){\r\n\t\t\tlet $thisIn = $(this);\r\n\t\t\tclearTimeout(timer);\r\n\r\n\t\t\t$thisIn.siblings().removeClass('hover');\r\n\r\n\t\t\ttimer = setTimeout(function(){\r\n\t\t\t\t$thisIn.addClass('hover');\r\n\t\t\t}, 650);\r\n\t\t}).on('mouseleave', function(){\r\n\t\t\tlet $thisOut = $(this);\r\n\r\n\t\t\tclearTimeout(timer);\r\n\t\t\t$thisOut.removeClass('hover');\r\n\t\t});\r\n\r\n\t\t$('.nav-level1 > li:last-child a').last().on('focusout', function(){\r\n\t\t\tlet $thisOut = $(this).closest('.hover');\r\n\r\n\t\t\tclearTimeout(timer);\r\n\t\t\t$thisOut.removeClass('hover');\r\n\t\t});\r\n\r\n\t\tenquire.register(\"screen and (min-width: 992px)\", {\r\n\t\t    match : function() {\r\n\t\t    \t$('.slideout').each(function(){\r\n\t\t    \t\t$(this).removeClass('slideout');\r\n\t\t    \t});\r\n\t\t    \t$siteHeader.removeClass('open');\r\n\r\n\t\t    \t$('> a', $hasChild).map((i,ele) => {\r\n\t\t    \t\tlet $anchor = $(ele);\r\n\r\n\t\t    \t\t$anchor.off('click');\r\n\t\t    \t});\r\n\r\n\t\t    \t$('.nav-level1 > li').on('mouseenter', function(){\r\n\t\t    \t\tlet $thisIn = $(this);\r\n\t\t    \t\tclearTimeout(timer);\r\n\r\n\t\t    \t\ttimer = setTimeout(function(){\r\n\t\t    \t\t\t$thisIn.addClass('hover');\r\n\t\t    \t\t}, 650);\r\n\t\t    \t}).on('mouseleave', function(){\r\n\t\t    \t\tlet $thisOut = $(this);\r\n\r\n\t\t    \t\tclearTimeout(timer);\r\n\t\t    \t\t$thisOut.removeClass('hover');\r\n\t\t    \t});\r\n\t\t    },\r\n\t\t    unmatch : function() {\r\n\t\t    \t$('> a', $hasChild).map((i,ele) => {\r\n\t\t    \t\tlet $anchor = $(ele);\r\n\r\n\t\t    \t\t$anchor.on('click', (e) => {\r\n\t\t    \t\t\tif($anchor.next().length){\r\n\t\t    \t\t\t\te.preventDefault();\r\n\t\t    \t\t\t}\r\n\t\t    \t\t\t$anchor.next().addClass('slideout');\r\n\t\t    \t\t});\r\n\t\t    \t});\r\n\r\n\t\t    \t$('.nav-level1 > li').off('mouseenter').off('mouseleave');\r\n\r\n\t\t    \t$('button', $hasChild).map((i,ele) => {\r\n\t\t    \t\tlet $this = $(ele);\r\n\r\n\t\t    \t\t$this.on('click', () => {\r\n\t\t    \t\t\t$this.parent().parent().removeClass('slideout');\r\n\t\t    \t\t});\r\n\t\t    \t});\r\n\t\t    }\r\n\t\t});\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nimport doT from 'dot';\r\nimport jsonQuery from 'json-query';\r\nimport Cookies from 'js-cookie';\r\nimport $ from 'jquery';\r\n\r\nexport default class SolutionsServices {\r\n\tconstructor() {\r\n\t\tlet $solutionFilter = $('.solutions-filter'),\r\n\t\t\t$filter = $('.filter-item', $solutionFilter).not('.filter-item--reset'),\r\n\t\t\t$reset = $('.filter-item--reset .btn-reset', $solutionFilter),\r\n\t\t\t$copy = $('.dropdown-copy', $solutionFilter);\r\n\r\n\t\tthis.loadLimit    = 9;\r\n\t\tthis.currpage     = 1;\r\n\t\tthis.results = [];\r\n\t\tthis.resultTempFn = doT.template($('#dotSolutionsTemplate').html());\r\n\t\tthis.optionTempFn = doT.template(\"{{~it.data :value:index}}<option value= \\\"{{=value.id}}\\\">{{=value.name}}</option>{{~}}\");\r\n        this.resultsCont = $('.solution-services__content', $('.solution-services'));\r\n        this.mapSolution();\r\n\r\n        $copy.map((i, ele) => {\r\n        \tlet $this = $(ele),\r\n        \t\t$select = $this.next(),\r\n        \t\t$button = $this.find('button');\r\n\r\n\t        $select.on('click', (e) => {\r\n\t\t\t\te.stopPropagation();\r\n\r\n\t\t\t\tif (!$this.hasClass('active')){\r\n\t        \t\t$this.addClass('active');\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t        \t\t$this.removeClass('active');\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$('.dropdown-copy').not($this).removeClass('active');\r\n\t        });\r\n\r\n\t\t\t$select.on('change', () => {\r\n\t\t\t\tlet $option = $select.find(':selected');\r\n\r\n\t\t\t\t$select.prev().find('button').text($option.text());\r\n\t\t\t});\r\n\r\n\t\t\t$(window).on('click', () => {\r\n\t\t\t\tif ($this.hasClass('active')){\r\n\t\t\t\t\t$this.removeClass('active');\r\n\t\t\t\t}\r\n\t\t\t});\r\n        })\r\n\t}\r\n\r\n\tmapSolution() {\r\n\t    let _this = this,\r\n\t    \t$solutionFilter = $('.solutions-filter'),\r\n\t        $mapper = $('.solution-mapper');\r\n\r\n\t    let resultEndpoint = $('.solution-services__content').data('endpoint'),\r\n\t    \toptionsEndpoint = $('.solutions-filter').data('endpoint'),\r\n\t        $mapperResults       = $('.solution-services__content .column-row'),\r\n\t        selectionData = {},\r\n\t        filters = {\r\n\t            \"industry\"   : $('#industryFilter'),\r\n\t            \"department\" : $('#departmentFilter'),\r\n\t            \"service\"    : $('#serviceFilter'),\r\n\t            \"business\"   : $('#businessFilter')\r\n\t        },\r\n\t        labels = {\r\n\t            \"industry\"   : $('#industryFilter').data('label'),\r\n\t            \"department\" : $('#departmentFilter').data('label'),\r\n\t            \"service\"    : $('#serviceFilter').data('label'),\r\n\t            \"business\"   : $('#businessFilter').data('label')\r\n\t        }\r\n\r\n\t    _this.$clearFilterBtn = $('.filter-item--reset .btn-reset', $solutionFilter);\r\n\r\n\t    // Reset filters\r\n\t    _this.$clearFilterBtn.on('click', function(e){\r\n\t        e.preventDefault();\r\n\r\n\t        filters.industry\r\n\t            .val($('option:first-child', filters.industry).val())\r\n\t            .trigger('change');\r\n\r\n\t        hideFilters('industry');\r\n            clearResults();\r\n            resetDropdownText();\r\n\t    });\r\n\r\n\t    // Setup filters\r\n\t    for(var key in filters) {\r\n\t        let $filter = filters[key];\r\n\r\n\r\n\t        $filter.data('key', key);\r\n\r\n\t        $filter.on('change.filter', function(){\r\n\t            let value = $('option:selected', $filter).attr('value'),\r\n\t                dataKey = $filter.data('key'),\r\n\t                data = {\r\n\t                    industry: $('option:selected', filters.industry).attr('value'),\r\n\t                    department: $('option:selected', filters.department).attr('value'),\r\n\t                    service: $('option:selected', filters.service).attr('value'),\r\n\t                    business: $('option:selected', filters.business).attr('value')\r\n\t                };\r\n\r\n\t            if(value !== \"\" && typeof value !== \"undefined\") {\r\n\t                updateFilterOnChange(dataKey, value);\r\n\t                Cookies.set('solutionFilters', JSON.stringify(data));\r\n\t            } else {\r\n\t                hideFilters(dataKey);\r\n\r\n\t                if(dataKey === 'industry') {\r\n\t                    $mapperResults.empty;\r\n\r\n\t                    return;\r\n\t                }\r\n\t            }\r\n\t            _this.resetPage();\r\n\t            $mapperResults.empty();\r\n\t            _this.getResult(resultEndpoint, parseResults, data);\r\n\t        });\r\n\t    }\r\n\r\n\t    // Parse filters option data\r\n\t    let parseFilters = (data) => {\r\n\t        selectionData = data;\r\n\r\n\t        let cookie = Cookies.get('solutionFilters');\r\n\r\n\t        _this.updateOptions(selectionData.industries, filters.industry, labels.industry);\r\n\r\n\t        if(typeof cookie !== 'undefined') {\r\n\t            parseCookies(JSON.parse(cookie));\r\n\t        } else {\r\n\t            clearResults();\r\n\t        }\r\n\t    };\r\n\r\n\t    // Parse Cookies data\r\n\t    let parseCookies = (obj) => {\r\n\t        let $lastFilter = {};\r\n\r\n\t        for(var key in obj) {\r\n\t            let $filter = filters[key],\r\n\t                id = obj[key];\r\n\r\n\t            if(typeof id !== 'undefined') {\r\n\t                updateFilterOnChange(key, id);\r\n\r\n\t                $filter\r\n\t                    .val(id)\r\n\t                    .prev()\r\n\t                    .find('button')\r\n\t                    .text($('option:selected', $filter).text())\r\n\r\n\t                $lastFilter = $filter\r\n\t            }\r\n\t        }\r\n\r\n\t        $lastFilter.trigger('change.filter');\r\n\t    };\r\n\r\n\t    // Clear Results\r\n\t    let clearResults = () => {\r\n\t    \tlet data = {\r\n\t    \t    queryAll: 'true'\r\n\t    \t}\r\n\r\n\t        _this.resetPage();\r\n\t        $mapperResults.empty();\r\n\t    \t_this.getResult(resultEndpoint, parseResults, data);\r\n\t        Cookies.remove('solutionFilters');\r\n\t    };\r\n\r\n\t    // Parse Result set\r\n\t    let parseResults = (data) => {\r\n\t        let solutionsTemplate = $('#dotSolutionsTemplate').html(),\r\n\t        \t_content = '';\r\n\r\n\t        let _this = this,\r\n\t            lowerLimit = (_this.currpage - 1) * _this.loadLimit,\r\n\t            upperLimit = _this.currpage * _this.loadLimit,\r\n\t            pageResults = [],\r\n\t            interval = 200;\r\n\r\n\t        _this.results = data;\r\n\r\n\t        for(let i = lowerLimit; i < upperLimit; i++) {\r\n\t            if(typeof _this.results[i] !== 'undefined'){\r\n\t                pageResults.push(_this.results[i]);\r\n\t            }\r\n\t        }\r\n\r\n\t        if(_this.results.length > 9) {\r\n\t\t        $('.show-more').show();\r\n\t\t    } else {\r\n\t\t        $('.show-more').hide();\r\n\t\t    }\r\n\r\n\t        $mapperResults.append(doT.template(solutionsTemplate)(pageResults));\r\n\r\n\t        $('.card-tiles').matchHeight();\r\n\r\n\t        /**\r\n\t         * Fade In\r\n\t         */\r\n\t        $('.result', this.resultsCont).each(function(){\r\n\t            let $this = $(this);\r\n\r\n\t            if($this.hasClass('visible')) return;\r\n\r\n\t            setTimeout(function(){\r\n\t                $this.addClass('visible');\r\n\t                // $('.thumbnail', $this).swapImage({breakpoint: 768, reverse: true});\r\n\r\n\t            }, interval);\r\n\r\n\t            interval = interval + 50;\r\n\t        });\r\n\r\n\t        if(_this.currpage === 1){\r\n\t        \t_this.currpage++;\r\n\t        }\r\n\t    };\r\n\r\n\t    // Update the next filter\r\n\t    let updateFilterOnChange = (key, id) => {\r\n\t        let dataset = {};\r\n\r\n\t        switch(key) {\r\n\t            case 'industry':\r\n\t                dataset = jsonQuery('industries[id=' + id +'].departments', {data: selectionData}).value;\r\n\t                _this.updateOptions(dataset, filters.department, labels.department);\r\n\t                break;\r\n\r\n\t            case 'department':\r\n\t                dataset = jsonQuery('industries.departments[id=' + id +'].services', {data: selectionData}).value;\r\n\t                _this.updateOptions(dataset, filters.service, labels.service);\r\n\t                break;\r\n\r\n\t            case 'service':\r\n\t                dataset = jsonQuery('industries.departments.services[id=' + id +'].businesses', {data: selectionData}).value;\r\n\t                _this.updateOptions(dataset, filters.business, labels.business);\r\n\t                break;\r\n\t        }\r\n\t    };\r\n\r\n\t    // Hide the filters\r\n\t    let hideFilters = (key) => {\r\n\t        switch(key) {\r\n\t            case 'industry':\r\n\t                filters.department\r\n\t                    .val(null)\r\n\t                    .parent().fadeOut();\r\n\t                /* falls through */\r\n\t            case 'department':\r\n\t                filters.service\r\n\t                    .val(null)\r\n\t                    .parent().fadeOut();\r\n\t                /* falls through */\r\n\t            case 'service':\r\n\t                filters.business\r\n\t                    .val(null)\r\n\t                    .parent().fadeOut();\r\n\t                /* falls through */\r\n\t            default:\r\n\t                break;\r\n\t        }\r\n\t    };\r\n\r\n\t    let resetDropdownText = () => {\r\n\t    \t$('.filter-item:not(\".filter-item--reset\")').map((i, ele) => {\r\n\t    \t\tlet $this = $(ele);\r\n\r\n\t    \t\tlet defaultLabel = $this.find('select option:first-child').text();\r\n\t    \t\t$this.find('.dropdown-copy button').text(defaultLabel);\r\n\t    \t});\r\n\t    }\r\n\r\n\t    //Load more tiles\r\n\t    $('.show-more').on('click', (e) => {\r\n\t        e.preventDefault();\r\n\r\n\t        parseResults(this.results);\r\n\t        this.toggleLoadMore();\r\n\t    });\r\n\r\n\t    _this.getResult(optionsEndpoint, parseFilters);\r\n\t}\r\n\r\n\tupdateOptions(context, $filter, label) {\r\n\t    let evalStr = this.optionTempFn({data: context});\r\n\r\n\t    $filter\r\n\t        .html(evalStr)\r\n\t        .prepend($('<option val = \"\" selected>' + label + '</option>'))\r\n\t        .parent()\r\n\t        .fadeIn();\r\n\t}\r\n\r\n\ttoggleLoadMore() {\r\n\t    let _this = this;\r\n\r\n\t    if(_this.currpage * _this.loadLimit < _this.results.length) {\r\n\t        _this.currpage++;\r\n\r\n\t        $('.show-more').show();\r\n\t    } else {\r\n\t        $('.show-more').hide();\r\n\t    }\r\n\t}\r\n\r\n\tresetPage() {\r\n\t\tlet _this = this;\r\n\r\n\t\t_this.currpage = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Ajax call to endpoint\r\n\t */\r\n\tgetResult(endpoint, cb, data) {\r\n\t    let postData = {};\r\n\r\n\t    $.extend(postData, data);\r\n\r\n\t    $.ajax({\r\n\t        url: endpoint,\r\n\t        data: postData,\r\n\t        dataType: 'json',\r\n\t        cache: false\r\n\t    }).done(cb);\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\nimport jsonQuery from 'json-query';\r\nimport doT from 'dot';\r\n\r\nexport default class StoreLocator {\r\n\tconstructor(type) {\r\n\t\t// START: Append map script into body\r\n\t\t// let mapurl = $('.reseller-locator').data('mapurl'),\r\n\t\t// \tapikey = $('.reseller-locator').data('mapkey');\r\n\r\n\t\t// if (type === 'google'){\r\n\t\t// \tmapurl = ($('.reseller-locator').data('mapurl')) ? $('.reseller-locator').data('mapurl') : 'https://maps.googleapis.com/maps/api/js?libraries=geometry&key=';\r\n\t\t// \tapikey = ($('.reseller-locator').data('mapkey')) ? $('.reseller-locator').data('mapkey') : 'AIzaSyC3RU1ehPFevI1uGes49wIpZKhR7KHwrcI';\r\n\r\n\t\t// \tthis.appendMapScripts(mapurl, apikey);\r\n\t\t// } else if (type === 'baidu'){\r\n\t\t// \tmapurl = ($('.reseller-locator').data('mapurl')) ? $('.reseller-locator').data('mapurl') : 'http://api.map.baidu.com/api?v=2.0&ak=';\r\n\t\t// \tapikey = ($('.reseller-locator').data('mapkey')) ? $('.reseller-locator').data('mapkey') : 'GoR7N5kE8U0TVvsai7e6MO6d7iElyhQR';\r\n\r\n\t\t// \tthis.appendMapScripts(mapurl, apikey);\r\n\t\t// } else {\r\n\t\t// \tmapurl = ($('.reseller-locator').data('mapurl')) ? $('.reseller-locator').data('mapurl') : 'https://openapi.map.naver.com/openapi/v3/maps.js?clientId=';\r\n\t\t// \tapikey = ($('.reseller-locator').data('mapkey')) ? $('.reseller-locator').data('mapkey') : 'YwbCpVG1dKxBUanw9Q8M';\r\n\r\n\t\t// \tthis.appendMapScripts(mapurl, apikey);\r\n\t\t// }\r\n\t\t// END\r\n\r\n\r\n\t\t// Definitions\r\n\t\tlet _this = this,\r\n\t\t\t$resellerFilter = $('.reseller-locator__filters'),\r\n\t\t\t$resellerSearch = $('.btn-reseller-search', $resellerFilter);\r\n\r\n\t\tlet\tprovinceData = JSON.parse($('#provinceData').html()),\r\n\t\t\tproductData = JSON.parse($('#productData').html());\r\n\r\n\t\t_this.optionTemplate = doT.template(\"{{~it.data :selectOption:index}}<option value= \\\"{{=selectOption.value}}\\\">{{=selectOption.name}}</option>{{~}}\");\r\n\r\n\r\n\t\t// START: Filter UI event handlers\r\n\t\tlet $copy = $('.dropdown-copy', $resellerFilter);\r\n\t\t$copy.map((i, ele) => {\r\n\t\t\tlet $this = $(ele),\r\n\t\t\t\t$select = $this.next(),\r\n\t\t\t\t$button = $this.find('button');\r\n\r\n\t\t\t$select.on('click', (e) => {\r\n\t\t\t\te.stopPropagation();\r\n\r\n\t\t\t\tif (!$this.hasClass('active')){\r\n\t\t\t\t\t$this.addClass('active');\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t$this.removeClass('active');\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$('.dropdown-copy').not($this).removeClass('active');\r\n\t\t\t});\r\n\r\n\t\t\t$select.on('change', () => {\r\n\t\t\t\tlet $option = $select.find(':selected');\r\n\r\n\t\t\t\t$select.prev().find('button').text($option.text());\r\n\t\t\t});\r\n\r\n\t\t\t$(window).on('click', () => {\r\n\t\t\t\tif ($this.hasClass('active')){\r\n\t\t\t\t\t$this.removeClass('active');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t\t// END\r\n\r\n\r\n\t\t// START: Remove all active class on dropdown on ESC key press\r\n\t\t$(document).keyup(function(e) {\r\n\t\t\tif (e.keyCode == 27) {\r\n\t\t\t\t$('.active', $resellerFilter).removeClass('active');\r\n\t\t\t}\r\n\t\t});\r\n\t\t// END\r\n\r\n\r\n\t\t// START: Change city options based on province selected\r\n\t\tlet cityLabel = $('#cityFilter').parent().data('label');\r\n\r\n\t\t$('#provinceFilter').on('change', function(){\r\n\t\t\tlet $this = $(this),\r\n\t\t\t\tvalue = $this.find('option:selected').val(),\r\n\t\t\t\tdata = {};\r\n\r\n\t\t\tdata = jsonQuery('province[value=' + value + '].cities', {data: provinceData}).value;\r\n\r\n\t\t\t_this.updateOptions(data, $('#cityFilter'), cityLabel, _this.optionTemplate);\r\n\t\t});\r\n\t\t// END\r\n\r\n\t\t// START: Change product options based on category selected\r\n\t\tlet productLabel = $('#productFilter').parent().data('label');\r\n\r\n\t\t$('#categoryFilter').on('change', function(){\r\n\t\t\tlet $this = $(this),\r\n\t\t\t\tvalue = $this.find('option:selected').val(),\r\n\t\t\t\tdata = {};\r\n\r\n\t\t\tdata = jsonQuery('product[value=' + value + '].products', {data: productData}).value;\r\n\r\n\t\t\t_this.updateOptions(data, $('#productFilter'), productLabel, _this.optionTemplate);\r\n\t\t});\r\n\t\t// END\r\n\r\n\t\t// START: Switch view\r\n\t\t$('.switch-view').on('click', function(e){\r\n\t\t\te.preventDefault();\r\n\r\n\t\t\tif($('.reseller-partners--content').hasClass('hide')){\r\n\t\t\t\tif ($('#resellerMap').length) {\r\n\t\t\t\t\t$('#resellerMap').removeClass('hide');\r\n\t\t\t\t}\r\n\t\t\t\t$('.reseller-partners--content').removeClass('hide');\r\n\t\t\t\t$('.reseller-partners--list').addClass('hide');\r\n\t\t\t\t$resellerSearch.trigger('click');\r\n\t\t\t\t_this.setPaddings();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif ($('#resellerMap').length) {\r\n\t\t\t\t\t$('#resellerMap').addClass('hide');\r\n\t\t\t\t}\r\n\t\t\t\t$('.reseller-partners--content').addClass('hide');\r\n\t\t\t\t$('.reseller-partners--list').removeClass('hide');\r\n\t\t\t}\r\n\t\t});\r\n\t\t// END\r\n\r\n\r\n\t\t// START: Validation check and API call on search\r\n\t\t$resellerSearch.on('click', (e) => {\r\n\t\t\te.preventDefault();\r\n\r\n\t\t\tlet $provinceFilter = $('#province'),\r\n\t\t\t\tprovince = $('#provinceFilter').val(),\r\n\t\t\t\t$cityFilter = $('#city'),\r\n\t\t\t\tcity = $('#cityFilter').val(),\r\n\t\t\t\t$resellerFilter = $('#reseller'),\r\n\t\t\t\tresellerType = $('#resellerFilter').val(),\r\n\t\t\t\t$categoryFilter = $('#category'),\r\n\t\t\t\tproductCategory = $('#categoryFilter').val(),\r\n\t\t\t\t$productFilter = $('#product'),\r\n\t\t\t\tproductName = $('#productFilter').val(),\r\n\t\t\t\t$dealerFilter = $('#dealer'),\r\n\t\t\t\tdealerName = $('#dealerSearch').val(),\r\n\t\t\t\tfilterValidated = false,\r\n\t\t\t\turl = $('.reseller-locator').data('endpoint'),\r\n\t\t\t\tdata = {};\r\n\r\n\t\t\t// test naver\r\n\t\t\t// url = '/assets/fuji-xerox/api/new-reseller2.json';\r\n\r\n\t\t\tif (province === \"\") {\r\n\t\t\t\t$('.error-msg', $provinceFilter).addClass('active');\r\n\t\t\t} else {\r\n\t\t\t\t$('.error-msg', $provinceFilter).removeClass('active');\r\n\t\t\t\tfilterValidated = true;\r\n\t\t\t}\r\n\r\n\t\t\tif(filterValidated){\r\n\t\t\t\tdata = { province, city, resellerType, productCategory, productName, dealerName };\r\n\r\n\t\t\t\tif (type === 'google'){\r\n\t\t\t\t\t_this.getResults(url, data, _this.processMapResults, type);\r\n\t\t\t\t} else if (type === 'baidu'){\r\n\t\t\t\t\t_this.getResults(url, data, _this.processMapResults, type);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// console.log('naver');\r\n\t\t\t\t\t_this.getResults(url, data, _this.processMapResults, type);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tappendMapScripts(mapurl, apikey) {\r\n\t\tlet scriptStr = mapurl + apikey;\r\n\r\n\t\tlet script = document.createElement('script');\r\n\t\tscript.type = 'text/javascript';\r\n\t\tscript.src = scriptStr;\r\n\t\t// document.getElementsByTagName('head')[0].appendChild(script);\r\n\t\tdocument.body.appendChild(script);\r\n\t}\r\n\r\n\tprocessMapResults(data, type) {\r\n\t\trenderResults(data);\r\n\r\n\t\tif($('#resellerMap').length){\r\n\t\t\tif (type === 'google'){\r\n\t\t\t\tif($('.switch-view').hasClass('hide')){\r\n\t\t\t\t\t$('.switch-view').removeClass('hide');\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif($('#resellerMap').hasClass('hide')){\r\n\t\t\t\t\tif (!$('.reseller-partners--content').hasClass('hide')){\r\n\t\t\t\t\t\t$('#resellerMap').removeClass('hide');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Map options\r\n\t\t\t\tlet map,\r\n\t\t\t\t\tbound = new google.maps.LatLngBounds(),\r\n\t\t\t\t\ttooltip = new google.maps.InfoWindow({\r\n\t\t\t\t\t\tmaxWidth: 200\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tmapOptions = {\r\n\t\t\t\t\t\tzoom: 12,\r\n\t\t\t\t\t\tmapTypeId: google.maps.MapTypeId.ROADMAP\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\tmap = new google.maps.Map(document.getElementById(\"resellerMap\"), mapOptions);\r\n\r\n\t\t\t\tif(data.length){\r\n\t\t\t\t\tdata.forEach(function(store, index){\r\n\t\t\t\t\t\t// START: Create marker and add marker\r\n\t\t\t\t\t\tlet position = new google.maps.LatLng(store.lat, store.long);\r\n\t\t\t\t\t\tlet marker = new google.maps.Marker({\r\n\t\t\t\t\t\t\tposition: position,\r\n\t\t\t\t\t\t\tmap: map,\r\n\t\t\t\t\t\t\ttitle: \"<div class='map-pop-up' style = 'height:auto;width:200px'><strong>\" + store.name +\r\n\t\t\t\t\t\t\t\t\t\"</strong><br />\" + store.address\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t// END\r\n\r\n\t\t\t\t\t\t// START: Make info window for each marker and add to map\r\n\t\t\t\t\t\tmarker.addListener('click', () => {\r\n\t\t\t\t\t\t\ttooltip.setContent(marker.title);\r\n\t\t\t\t\t\t\ttooltip.open(map, marker);\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tmap.addListener('click', () => {\r\n\t\t\t\t\t\t\ttooltip.close();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t// END\r\n\r\n\t\t\t\t\t\tbound.extend(new google.maps.LatLng(store.lat, store.long));\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tmap.panTo(bound.getCenter());\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif(!$('.switch-view').hasClass('hide')){\r\n\t\t\t\t\t\t$('.switch-view').addClass('hide');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(!$('#resellerMap').hasClass('hide')){\r\n\t\t\t\t\t\t$('#resellerMap').addClass('hide');\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// if (navigator.geolocation) {\r\n\t\t\t\t\t// \tnavigator.geolocation.getCurrentPosition(function(p) {\r\n\t\t\t\t\t// \t\tlet pos = {\r\n\t\t\t\t\t// \t\t\tlat: p.coords.latitude,\r\n\t\t\t\t\t// \t\t\tlng: p.coords.longitude\r\n\t\t\t\t\t// \t\t};\r\n\r\n\t\t\t\t\t// \t\tlet myPos = new google.maps.LatLng(pos.lat, pos.lng);\r\n\r\n\t\t\t\t\t// \t\tmap.panTo(myPos);\r\n\t\t\t\t\t// \t});\r\n\t\t\t\t\t// }\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// START: Show on map button handler\r\n\t\t\t\t$(document).on('click','.btn-map-show',function(e){\r\n\t\t\t\t\te.preventDefault();\r\n\r\n\t\t\t\t\tlet $target = $('.reseller-map');\r\n\r\n\t\t\t\t\t $('html, body').stop(true, true).animate({\r\n\t\t\t\t\t\tscrollTop: $target.offset().top - 100\r\n\t\t\t\t\t}, 500);\r\n\r\n\t\t\t\t\tlet $this = $(this),\r\n\t\t\t\t\t\tlat = $this.data('lat'),\r\n\t\t\t\t\t\tlong = $this.data('long');\r\n\r\n\t\t\t\t\tlet showMarker = (data) => {\r\n\t\t\t\t\t\tlet position = new google.maps.LatLng(lat, long);\r\n\r\n\t\t\t\t\t\tmap.setZoom(15);\r\n\t\t\t\t\t\tmap.panTo(position);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tshowMarker();\r\n\t\t\t\t});\r\n\t\t\t\t// END\r\n\r\n\t\t\t} else if (type === 'baidu'){\r\n\t\t\t\tif($('.switch-view').hasClass('hide')){\r\n\t\t\t\t\t$('.switch-view').removeClass('hide');\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($('#resellerMap').hasClass('hide')) {\r\n\t\t\t\t\tif (!$('.reseller-partners--content').hasClass('hide')) {\r\n\t\t\t\t\t\t$('#resellerMap').removeClass('hide');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet map = new BMap.Map(\"resellerMap\"),\r\n\t\t\t\t\tbounds = map.getBounds(),\r\n\t\t\t\t\tpoints = [];\r\n\r\n\t\t\t\tif(data.length){\r\n\t\t\t\t\tmap.enableScrollWheelZoom();\r\n\t\t\t\t\tmap.enableContinuousZoom();\r\n\r\n\t\t\t\t\tdata.forEach(function(store, index){\r\n\t\t\t\t\t\t// START: Create marker and add marker\r\n\t\t\t\t\t\tlet point = new BMap.Point(store.long, store.lat),\r\n\t\t\t\t\t\t\tmarker = new BMap.Marker(point);\r\n\r\n\t\t\t\t\t\tbounds.extend(point);\r\n\t\t\t\t\t\tpoints.push(point);\r\n\r\n\t\t\t\t\t\tlet opts = {\r\n\t\t\t\t\t\t\twidth: 200,\r\n\t\t\t\t\t\t\theight: 100,\r\n\t\t\t\t\t\t\ttitle : store.name\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet content = store.address;\r\n\r\n\t\t\t\t\t\tmap.addOverlay(marker);\r\n\t\t\t\t\t\t// END\r\n\r\n\t\t\t\t\t\t// START: Make info window for each marker and add to map\r\n\t\t\t\t\t\tmarker.addEventListener('click', function(e){\r\n\t\t\t\t\t\t\tlet p = e.target;\r\n\r\n\t\t\t\t\t\t\tlet point = new BMap.Point(p.getPosition().lng, p.getPosition().lat);\r\n\r\n\t\t\t\t\t\t\tlet infoWindow = new BMap.InfoWindow(content, opts);\r\n\t\t\t\t\t\t\tmap.openInfoWindow(infoWindow, point);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t// END\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// map.centerAndZoom(bounds.getCenter(), 13);\r\n\t\t\t\t\tmap.setViewport(points);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif(!$('.switch-view').hasClass('hide')){\r\n\t\t\t\t\t\t$('.switch-view').addClass('hide');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(!$('#resellerMap').hasClass('hide')){\r\n\t\t\t\t\t\t$('#resellerMap').addClass('hide');\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// let geolocation = new BMap.Geolocation();\r\n\t\t\t\t\t// geolocation.getCurrentPosition(function(r){\r\n\t\t\t\t\t// \tif(this.getStatus() == BMAP_STATUS_SUCCESS){\r\n\t\t\t\t\t// \t\tlet mk = new BMap.Marker(r.point);\r\n\t\t\t\t\t// \t\tmap.addOverlay(mk);\r\n\t\t\t\t\t// \t\tmap.centerAndZoom(r.point, 13);\r\n\t\t\t\t\t// \t}\r\n\t\t\t\t\t// \telse {\r\n\t\t\t\t\t// \t\treturn;\r\n\t\t\t\t\t// \t}\r\n\t\t\t\t\t// },{enableHighAccuracy: true});\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// START: Show on map button handler\r\n\t\t\t\t$(document).on('click','.btn-map-show',function(e){\r\n\t\t\t\t\te.preventDefault();\r\n\r\n\t\t\t\t\tlet $target = $('.reseller-map');\r\n\r\n\t\t\t\t\t $('html, body').stop(true, true).animate({\r\n\t\t\t\t\t\tscrollTop: $target.offset().top - 100\r\n\t\t\t\t\t}, 500);\r\n\r\n\t\t\t\t\tlet $this = $(this),\r\n\t\t\t\t\t\tlat = $this.data('lat'),\r\n\t\t\t\t\t\tlong = $this.data('long');\r\n\r\n\t\t\t\t\tlet showMarker = (data) => {\r\n\t\t\t\t\t\tlet position = new BMap.Point(long, lat);\r\n\r\n\t\t\t\t\t\tmap.setZoom(15);\r\n\t\t\t\t\t\tmap.panTo(position);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tshowMarker();\r\n\t\t\t\t});\r\n\r\n\t\t\t} else {\r\n\t\t\t\tif($('.switch-view').hasClass('hide')){\r\n\t\t\t\t\t$('.switch-view').removeClass('hide');\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($('#resellerMap').hasClass('hide')) {\r\n\t\t\t\t\tif (!$('.reseller-partners--content').hasClass('hide')) {\r\n\t\t\t\t\t\t$('#resellerMap').removeClass('hide');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet map,\r\n\t\t\t\t\tbound,\r\n\t\t\t\t\ttooltip = new naver.maps.InfoWindow({\r\n\t\t\t\t\t\tmaxWidth: 200\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tmapOptions = {\r\n\t\t\t\t\t\tzoom: 6,\r\n\t\t\t\t\t\tmapTypeId: naver.maps.MapTypeId.NORMAL\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmarkers = [],\r\n\t\t\t\t\tinfoWindows = [],\r\n\t\t\t\t\tpoints = [];\r\n\r\n\t\t\t\tmap = new naver.maps.Map('resellerMap', mapOptions);\r\n\r\n\t\t\t\tif(data.length){\r\n\t\t\t\t\tlet minLat = data[0].lat,\r\n\t\t\t\t\t\tmaxLat = data[0].lat,\r\n\t\t\t\t\t\tminLong = data[0].long,\r\n\t\t\t\t\t\tmaxLong = data[0].long;\r\n\r\n\t\t\t\t\tdata.forEach(function(store, index){\r\n\t\t\t\t\t\t// START: Create marker and add marker\r\n\t\t\t\t\t\tlet position = new naver.maps.LatLng(store.lat, store.long);\r\n\t\t\t\t\t\tlet marker = new naver.maps.Marker({\r\n\t\t\t\t\t\t\tmap: map,\r\n\t\t\t\t\t\t\tposition: position,\r\n\t\t\t\t\t\t\ttitle: \"<div class='map-pop-up' style = 'height:auto;width:200px'><strong>\" + store.name +\r\n\t\t\t\t\t\t\t\t\t\"</strong><br />\" + store.address\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t// END\r\n\r\n\t\t\t\t\t\tpoints.push(position);\r\n\r\n\t\t\t\t\t\t// START: Get min/max bound\r\n\t\t\t\t\t\tif(minLat <= store.lat){\r\n\t\t\t\t\t\t\tminLat = minLat;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tminLat = store.lat\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(minLong <= store.long){\r\n\t\t\t\t\t\t\tminLong = minLong;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tminLong = store.long\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(maxLat >= store.lat){\r\n\t\t\t\t\t\t\tmaxLat = maxLat;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tmaxLat = store.lat\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(maxLong >= store.long){\r\n\t\t\t\t\t\t\tmaxLong = maxLong;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tmaxLong = store.long\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// END\r\n\r\n\t\t\t\t\t\t// START: Make info window for each marker and add to map\r\n\t\t\t\t\t\tlet infoWindow = new naver.maps.InfoWindow({\r\n\t\t\t\t\t\t\tcontent: marker.title\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tmarkers.push(marker);\r\n\t\t\t\t\t\tinfoWindows.push(infoWindow);\r\n\t\t\t\t\t\t// END\r\n\r\n\t\t\t\t\t\tnaver.maps.Event.addListener(map, \"click\", function(e) {\r\n\t\t\t\t\t\t\tinfoWindow.close();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tif(points.length === 1){\r\n\t\t\t\t\t\tmap.setCenter(points[0]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// bound = new naver.maps.LatLngBounds(new naver.maps.LatLng(minLat, minLong), new naver.maps.LatLng(maxLat, maxLong));\r\n\t\t\t\t\t\tmap.fitBounds(points);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// map.setCenter(bound.getCenter());\r\n\r\n\r\n\t\t\t\t\t// START: Info window handlers\r\n\t\t\t\t\tnaver.maps.Event.addListener(map, 'idle', function() {\r\n\t\t\t\t\t\tupdateMarkers(map, markers);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tfunction updateMarkers(map, markers) {\r\n\r\n\t\t\t\t\t\tlet mapBounds = map.getBounds();\r\n\t\t\t\t\t\tlet marker, position;\r\n\r\n\t\t\t\t\t\tfor (let i = 0; i < markers.length; i++) {\r\n\r\n\t\t\t\t\t\t\tmarker = markers[i]\r\n\t\t\t\t\t\t\tposition = marker.getPosition();\r\n\r\n\t\t\t\t\t\t\tif (mapBounds.hasLatLng(position)) {\r\n\t\t\t\t\t\t\t\tshowMarker(map, marker);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\thideMarker(map, marker);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfunction showMarker(map, marker) {\r\n\r\n\t\t\t\t\t\tif (marker.setMap()) return;\r\n\t\t\t\t\t\tmarker.setMap(map);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfunction hideMarker(map, marker) {\r\n\r\n\t\t\t\t\t\tif (!marker.setMap()) return;\r\n\t\t\t\t\t\tmarker.setMap(null);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfunction getClickHandler(seq) {\r\n\t\t\t\t\t\treturn function(e) {\r\n\t\t\t\t\t\t\tlet marker = markers[seq],\r\n\t\t\t\t\t\t\t\tinfoWindow = infoWindows[seq];\r\n\r\n\t\t\t\t\t\t\tif (infoWindow.getMap()) {\r\n\t\t\t\t\t\t\t\tinfoWindow.close();\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tinfoWindow.open(map, marker);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (let i=0, ii=markers.length; i<ii; i++) {\r\n\t\t\t\t\t\tnaver.maps.Event.addListener(markers[i], 'click', getClickHandler(i));\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// END\r\n\r\n\r\n\t\t\t\t\t// START: Show on map button handler\r\n\t\t\t\t\t$(document).on('click','.btn-map-show',function(e){\r\n\t\t\t\t\t\te.preventDefault();\r\n\r\n\t\t\t\t\t\tlet $target = $('.reseller-map');\r\n\r\n\t\t\t\t\t\t $('html, body').stop(true, true).animate({\r\n\t\t\t\t\t\t\tscrollTop: $target.offset().top - 100\r\n\t\t\t\t\t\t}, 500);\r\n\r\n\t\t\t\t\t\tlet $this = $(this),\r\n\t\t\t\t\t\t\tlat = $this.data('lat'),\r\n\t\t\t\t\t\t\tlong = $this.data('long');\r\n\r\n\t\t\t\t\t\tlet showMarker = (data) => {\r\n\t\t\t\t\t\t\tlet position = new naver.maps.LatLng(lat, long);\r\n\r\n\t\t\t\t\t\t\tmap.setZoom(10);\r\n\t\t\t\t\t\t\tmap.panTo(position);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tshowMarker();\r\n\t\t\t\t\t});\r\n\t\t\t\t\t// END\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif(!$('.switch-view').hasClass('hide')){\r\n\t\t\t\t\t\t$('.switch-view').addClass('hide');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(!$('#resellerMap').hasClass('hide')){\r\n\t\t\t\t\t\t$('#resellerMap').addClass('hide');\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// if (navigator.geolocation) {\r\n\t\t\t\t //        navigator.geolocation.getCurrentPosition(onSuccessGeolocation, onErrorGeolocation);\r\n\t\t\t\t //    } else {\r\n\t\t\t\t //        return;\r\n\t\t\t\t //    }\r\n\r\n\t\t\t\t\t// function onSuccessGeolocation(position) {\r\n\t\t\t\t\t//     let location = new naver.maps.LatLng(position.coords.latitude,\r\n\t\t\t\t\t//                                          position.coords.longitude);\r\n\r\n\t\t\t\t\t//     let marker = new naver.maps.Marker({\r\n\t\t\t\t\t//     \tmap: map,\r\n\t\t\t\t\t//     \tposition: location\r\n\t\t\t\t\t//     });\r\n\r\n\t\t\t\t\t//     map.setCenter(location); // 얻은 좌표를 지도의 중심으로 설정합니다.\r\n\t\t\t\t\t//     map.setZoom(10); // 지도의 줌 레벨을 변경합니다.\r\n\t\t\t\t\t// }\r\n\r\n\t\t\t\t\t// function onErrorGeolocation() {\r\n\t\t\t\t\t//     let center = map.getCenter();\r\n\r\n\t\t\t\t\t//     infowindow.setContent('<div style=\"padding:20px;\">' +\r\n\t\t\t\t\t//         '<h5 style=\"margin-bottom:5px;color:#f00;\">Geolocation failed!</h5>'+ \"latitude: \"+ center.lat() +\"<br />longitude: \"+ center.lng() +'</div>');\r\n\r\n\t\t\t\t\t//     infowindow.open(map, center);\r\n\t\t\t\t\t// }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction renderResults(data) {\r\n\t\t\tlet resellerTemplate = $('#reseller-template').html();\r\n\t\t\tlet resellerListTemplate = $('#resellerlist-template').html();\r\n\t\t\tlet resellerContent = '',\r\n\t\t\t\tresellerListContent = '';\r\n\r\n\t\t\tresellerContent = doT.template(resellerTemplate)(data);\r\n\t\t\tresellerListContent = doT.template(resellerListTemplate)(data);\r\n\r\n\t\t\t$('.reseller-partners--content').html(resellerContent);\r\n\t\t\t$('.reseller-partners--list').html(resellerListContent);\r\n\t\t\t$('.resellers-count').html(String(data.length));\r\n\r\n\t\t\tlet $first = $('.partner-item').first();\r\n\t\t\tlet textWidth = $('.partner-item__detail .label', $first).first().width();\r\n\r\n\t\t\t$('.partner-item').map((i, ele) => {\r\n\t\t\t\t$('.partner-item__detail .label', $(ele)).map((j, label) => {\r\n\t\t\t\t\tif (textWidth < $(label).width()) {\r\n\t\t\t\t\t\ttextWidth = $(label).width();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttextWidth = textWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tlet padding = textWidth + 10;\r\n\t\t\t$('.padded').css('padding-left', padding + 'px');\r\n\r\n\t\t\t$('.partner-item').map((i, ele) => {\r\n\t\t\t\tif ($(ele).find('.contact').length) {\r\n\t\t\t\t\tlet faxTextWidth = $('.partner-item__detail.fax .label', $(ele)).width();\r\n\t\t\t\t\tfaxTextWidth += 10;\r\n\t\t\t\t\t$('.padded-fax', $(ele)).css('padding-left', faxTextWidth + 'px');\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t$('.padded-fax', $(ele)).css('padding-left', padding + 'px');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t$('.reseller-map').removeClass('hide');\r\n\r\n\t\t\t// Show/hide legend\r\n\t\t\tif ($('.medal').length) {\r\n\t\t\t\tif (!$('.reseller-partners--legend').hasClass('visible')) {\r\n\t\t\t\t\t$('.reseller-partners--legend').show();\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif ($('.reseller-partners--legend').hasClass('visible')) {\r\n\t\t\t\t\t$('.reseller-partners--legend').hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Hide show on map button if map doesn't exist\r\n\t\t\tif (!$('#resellerMap').length) {\r\n\t\t\t\t$('.btn-map-show').hide();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t$('.btn-map-show').show();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tsetPaddings(){\r\n\t\tlet $first = $('.partner-item').first();\r\n\t\tlet textWidth = $('.partner-item__detail .label', $first).first().width();\r\n\r\n\t\t$('.partner-item').map((i, ele) => {\r\n\t\t\t$('.partner-item__detail .label', $(ele)).map((j, label) => {\r\n\t\t\t\tif (textWidth < $(label).width()) {\r\n\t\t\t\t\ttextWidth = $(label).width();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttextWidth = textWidth;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tlet padding = textWidth + 10;\r\n\t\t$('.padded').css('padding-left', padding + 'px');\r\n\r\n\t\t$('.partner-item').map((i, ele) => {\r\n\t\t\tif ($(ele).find('.contact').length) {\r\n\t\t\t\tlet faxTextWidth = $('.partner-item__detail.fax .label', $(ele)).width();\r\n\t\t\t\tfaxTextWidth += 10;\r\n\t\t\t\t$('.padded-fax', $(ele)).css('padding-left', faxTextWidth + 'px');\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t$('.padded-fax', $(ele)).css('padding-left', padding + 'px');\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tupdateOptions(data, $filter, label, template) {\r\n\t\tlet evalStr = template({data: data});\r\n\r\n\t\t$filter\r\n\t\t    .html(evalStr)\r\n\t\t    .prepend($('<option value=\"\" selected>' + label + '</option>'))\r\n\t\t    .parents('.input-group-select');\r\n\r\n\t\t$filter.prev().find('button').text(label);\r\n\t}\r\n\r\n\tgetResults(url, data, cb, type) {\r\n\t\t$.ajax({\r\n\t\t    url,\r\n\t\t    data,\r\n\t\t    dataType: 'json',\r\n\t\t    cache: false,\r\n\t\t    success: function(data) {\r\n\t\t    \tcb(data, type);\r\n\t\t    }\r\n\t\t});\r\n\t}\r\n}\r\n\r\n// naver api: https://openapi.map.naver.com/openapi/v3/maps.js?clientId=\r\n// naver api: https://openapi.map.naver.com/openapi/v3/maps.js?clientId=YwbCpVG1dKxBUanw9Q8M&submodules=geocoder\r\n\r\n// baidu api: http://api.map.baidu.com/api?v=2.0&ak=GoR7N5kE8U0TVvsai7e6MO6d7iElyhQR\r\n\r\n// google api: https://maps.googleapis.com//maps/api/js?libraries=geometry&key=AIzaSyC3RU1ehPFevI1uGes49wIpZKhR7KHwrcI\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\n\r\nexport default class TabCarousel {\r\n\tconstructor() {\r\n\t\tlet $tabsCarousel = $('.tab-carousel');\r\n\r\n\t\t$tabsCarousel.map((i,ele) => {\r\n\t\t\tlet $tabs = $('.tab-carousel__tabs ul li', $(ele));\r\n\r\n\t\t\tif($tabs.length){\r\n\t\t\t\tswitch($tabs.length) {\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t$tabs.css('width', '100%');\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t$tabs.css('width', '50%');\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t$tabs.css('width', '33.333333%');\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t$tabs.css('width', '25%');\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\n\r\nexport default class Tabs {\r\n\tconstructor() {\r\n\t\tlet $tabsWrapper = $('.tab-wrapper'),\r\n\t\t\t$content = $('.tab-wrapper__contents', $tabsWrapper);\r\n\r\n\t\t$('> *:not(.active)', $content).fadeOut();\r\n\t\t$('.active', $content).fadeIn();\r\n\r\n\t\t$tabsWrapper.map((i,ele) => {\r\n\t\t\tlet $this = $(ele),\r\n\t\t\t\t$tabs = $('.tab-wrapper__tabs', $this),\r\n\t\t\t\t$content = $('.tab-wrapper__contents', $this);\r\n\r\n\t\t\t$('a.tab-controller', $tabs).map((i,ele) => {\r\n\t\t\t\tlet $thisTab = $(ele);\r\n\r\n\t\t\t\t$thisTab.on('click', (e) => {\r\n\t\t\t\t\te.preventDefault();\r\n\r\n\t\t\t\t\tlet target = $thisTab.attr('href');\r\n\r\n\t\t\t\t\tthis.switchTabs($thisTab, target, $content, $tabs);\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tswitchTabs($object, target, $content, $scope) {\r\n\t\tif(!$object.parent().hasClass('active')){\r\n\t\t\t//button handler\r\n\t\t\t$('.active', $scope).removeClass('active');\r\n\t\t\t$object.parent().addClass('active');\r\n\r\n\t\t\t// fade in fade out content\r\n\t\t\t$('.active', $content).fadeOut(300, function(){\r\n\t\t\t\t$('.active', $content).removeClass('active');\r\n\t\t\t\t$(target).fadeIn();\r\n\t\t\t\t$(target).addClass('active');\r\n\t\t\t\tif ($(target).find('.tabbed-carousel').length){\r\n\t\t\t\t\t$('.tabbed-carousel__items', $(target)).slick('setPosition');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\n\r\nexport default class TableResponsive {\r\n\tconstructor() {\r\n\r\n\t\tlet $table = $('table');\r\n\r\n\t\t// window.emitter.on('openAccordion', () => {\r\n\t\t// \t$table.map((i, ele) => {\r\n\t\t// \t\tlet $this = $(ele);\r\n\r\n\t\t// \t\tif (!$this.closest('.table-responsive').length) {\r\n\t\t// \t\t\tif ($this.width() > $this.parent().width()) {\r\n\t\t// \t\t\t\t$this.wrap('<div class=\"table-responsive\"></div>');\r\n\t\t// \t\t\t}\r\n\t\t// \t\t}\r\n\t\t// \t});\r\n\t\t// });\r\n\r\n\t\t$(window).on('resize.tableResponsive', () => {\r\n\t\t\t$table.map((i, ele) => {\r\n\t\t\t\tlet $this = $(ele);\r\n\r\n\t\t\t\tif (!$this.closest('.table-responsive').length) {\r\n\t\t\t\t\tif ($this.width() > $this.parent().width()) {\r\n\t\t\t\t\t\t$this.wrap('<div class=\"table-responsive\"></div>');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}).trigger('resize.tableResponsive');\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\nimport 'jquery-match-height';\r\n\r\nexport default class ViewController {\r\n\tconstructor() {\r\n\t\tlet $viewController = $('.filter-item--view');\r\n\r\n\t\t$('> button', $viewController).map((i, ele) => {\r\n\t\t\tlet $this = $(ele);\r\n\r\n\t\t\t$this.on('click', () => {\r\n\t\t\t\tlet viewType = $this.data('view');\r\n\r\n\t\t\t\tif($this.hasClass('active')){\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t$this.parent().find('.active').removeClass('active');\r\n\t\t\t\t\t$this.addClass('active');\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (viewType === 'list') {\r\n\t\t\t\t\t$('.content-holder').addClass('list');\r\n\r\n\t\t\t\t\t$('.card-tiles').each(function() {\r\n\t\t\t\t\t\tlet $this = $(this);\r\n\r\n\t\t\t\t\t\tif(!$('.card-tiles__image', $this).length){\r\n\t\t\t\t\t\t\tif(!$('.card-tiles__text', $this).hasClass('full')){\r\n\t\t\t\t\t\t\t\t$('.card-tiles__text', $this).addClass('full');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t$('.content-holder').removeClass('list');\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$('.match-height').matchHeight._update();\r\n\r\n\t\t\t});\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nimport $ from 'jquery';\r\n\r\nexport default class WffmAddRemoveFields {\r\n\tconstructor() {\r\n\t\tlet\tcollapsibleFormLabels = JSON.parse($('#collapsibleFormLabels').html());\r\n\t\tlet $addRemoveFieldsForm = $('fieldset.CollapsibleFieldSet'),\r\n\t\t\t$form = $addRemoveFieldsForm.parent();\r\n\t\t\t// _moreSectionButton = `<span class=\"add-more-sections\" style=\"cursor: pointer; color: #d92231; display: none;\"> + ${collapsibleFormLabels.addSection}</span>`,\r\n\t\t\t// _lessSectionButton = `<span class=\"remove-one-section\" style=\"cursor: pointer; color: #d92231; padding-left: 15px; display: none;\"> - ${collapsibleFormLabels.removeSection}</span>`,\r\n\t\t\t// sectionCount = 1;\r\n\r\n\r\n\t\t// Append button if more than one field present\r\n\t\t// if($addRemoveFieldsForm.length > 1){\r\n\t\t\t// $('.form-submit-border').before(_moreSectionButton);\r\n\t\t\t// $('.form-submit-border').before(_lessSectionButton);\r\n\t\t\t// $('.add-more-sections', $form).show();\r\n\t\t\t// $('.remove-one-field', $this).hide();\r\n\t\t// }\r\n\r\n\t\t$addRemoveFieldsForm.map(function(i, ele) {\r\n\t\t\tlet $this = $(ele);\r\n\t\t\t$this.data('reset', 'true');\r\n\r\n\t\t\t// Hide all sections except first field\r\n\t\t\t// if(i != 0){\r\n\t\t\t// \t$this.hide();\r\n\t\t\t// }\r\n\r\n\t\t\t// For the fields\r\n\t\t\tlet $fields = $('.form-group', $this),\r\n\t\t\t\t_moreButton = `<span class=\"add-more-fields ${i}\" style=\"cursor: pointer; color: #d92231; display: none;\"> + ${collapsibleFormLabels.addField}</span>`,\r\n\t\t\t\t_deleteButton = `<span class=\"remove-one-field\" style=\"cursor: pointer; color: #d92231; padding-left: 15px; display: none;\"> - ${collapsibleFormLabels.removeField}</span>`,\r\n\t\t\t\tfieldsCount = 1;\r\n\r\n\t\t\t// Append button if more than one field present\r\n\t\t\tif($fields.length > 1){\r\n\t\t\t\t$this.append(_moreButton);\r\n\t\t\t\t$this.append(_deleteButton);\r\n\t\t\t\t$('.add-more-fields', $this).show();\r\n\t\t\t\t// $('.remove-one-field', $this).hide();\r\n\t\t\t}\r\n\r\n\t\t\t// Hide all fields except first field\r\n\t\t\t$fields.map(function(i, ele) {\r\n\t\t\t\tlet $thisField = $(ele);\r\n\r\n\t\t\t\tif(i != 0){\r\n\t\t\t\t\t$thisField.hide();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// Add one more field\r\n\t\t\t$('.add-more-fields', $this).on('click', function(){\r\n\t\t\t\tif($this.data('reset') === 'true'){\r\n\t\t\t\t\tfieldsCount = 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(fieldsCount < $fields.length){\r\n\t\t\t\t\t$fields.eq(fieldsCount).show();\r\n\t\t\t\t\tfieldsCount++;\r\n\t\t\t\t\t$this.data('reset', 'false');\r\n\r\n\t\t\t\t\tif(fieldsCount == $fields.length){\r\n\t\t\t\t\t\t$('.add-more-fields', $this).hide();\r\n\t\t\t\t\t\t$('.remove-one-field', $this).css('padding-left', '0');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(fieldsCount >= 2){\r\n\t\t\t\t\t\t$('.remove-one-field', $this).show();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// Remove one field\r\n\t\t\t$('.remove-one-field', $this).on('click', function(){\r\n\t\t\t\tif(fieldsCount > 1){\r\n\t\t\t\t\tfieldsCount--;\r\n\t\t\t\t\t$fields.eq(fieldsCount).hide();\r\n\t\t\t\t\t$fields.eq(fieldsCount).find('input').val('');\r\n\r\n\t\t\t\t\tif(fieldsCount < $fields.length){\r\n\t\t\t\t\t\t$('.add-more-fields', $this).show();\r\n\t\t\t\t\t\t$('.remove-one-field', $this).css('padding-left', '15px');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(fieldsCount < 2){\r\n\t\t\t\t\t\t$('.remove-one-field', $this).hide();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t// // Add one more section\r\n\t\t// $('.add-more-sections', $form).on('click', function(){\r\n\t\t// \tif(sectionCount < $addRemoveFieldsForm.length){\r\n\t\t// \t\t$addRemoveFieldsForm.eq(sectionCount).show();\r\n\t\t// \t\tsectionCount++;\r\n\r\n\t\t// \t\tif(sectionCount == $addRemoveFieldsForm.length){\r\n\t\t// \t\t\t$('.add-more-sections', $form).hide();\r\n\t\t// \t\t\t$('.remove-one-section', $form).css('padding-left', '0');\r\n\t\t// \t\t}\r\n\t\t// \t\tif(sectionCount >= 2){\r\n\t\t// \t\t\t$('.remove-one-section', $form).show();\r\n\t\t// \t\t}\r\n\t\t// \t}\r\n\t\t// });\r\n\r\n\t\t// // Remove one section\r\n\t\t// $('.remove-one-section', $form).on('click', function(){\r\n\t\t// \tif(sectionCount > 1){\r\n\t\t// \t\tsectionCount--;\r\n\t\t// \t\t$addRemoveFieldsForm.eq(sectionCount).hide();\r\n\t\t// \t\t$addRemoveFieldsForm.eq(sectionCount).find('input').val('');\r\n\r\n\t\t// \t\t// Hide all fields except first field in removed section\r\n\t\t// \t\t$addRemoveFieldsForm.eq(sectionCount).find('.form-group').map(function(i, ele) {\r\n\t\t// \t\t\tlet $clearThese = $(ele);\r\n\r\n\t\t// \t\t\t$addRemoveFieldsForm.eq(sectionCount).data('reset', 'true');\r\n\t\t// \t\t\t$('.remove-one-field', $addRemoveFieldsForm.eq(sectionCount)).hide();\r\n\r\n\t\t// \t\t\tif(i != 0){\r\n\t\t// \t\t\t\t$clearThese.hide();\r\n\t\t// \t\t\t}\r\n\t\t// \t\t});\r\n\r\n\t\t// \t\tif(sectionCount < $addRemoveFieldsForm.length){\r\n\t\t// \t\t\t$('.add-more-sections', $form).show();\r\n\t\t// \t\t\t$('.remove-one-section', $form).css('padding-left', '15px');\r\n\t\t// \t\t}\r\n\t\t// \t\tif(sectionCount < 2){\r\n\t\t// \t\t\t$('.remove-one-section', $form).hide();\r\n\t\t// \t\t}\r\n\t\t// \t}\r\n\t\t// });\r\n\t}\r\n}\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}