@using Sitecore.Forms.Mvc
@using Sitecore.Forms.Mvc.Html
@using Sitecore.Globalization
@using Sitecore.Diagnostics
@model Sitecore.Forms.Mvc.ViewModels.FormViewModel

@{
    var attributes = new RouteValueDictionary()
    {
        { "enctype", "multipart/form-data" },
        { "class", @Model.CssClass },
        { "id", Model.ClientId },
        { "role", "form" },
        { Constants.Wffm, Model.Item.ID }
    };


 
    string[] test = Request.QueryString.AllKeys;

    RouteValueDictionary queryString2 = new RouteValueDictionary();


    foreach (string item in test)
    {
       
        if (item != null)
        {
            queryString2.Add(item, Request.QueryString[item]);
        }
    }

    var queryString = new RouteValueDictionary(queryString2);

    string routeName;

    if (Model.IsAjaxForm)
    {
        attributes.Add("data-wffm-ajax", true);

        if (!IsPost)
        {
            queryString.Add("wffm." + Constants.FormItemId, Model.Item.ID.ToGuid());
            queryString.Add("wffm." + Constants.Id, Model.UniqueId);
        }

        routeName = Constants.Routes.Form;
    }
    else
    {
        routeName = Sitecore.Mvc.Configuration.MvcSettings.SitecoreRouteName;
    }

    using (Html.BeginRouteForm(routeName, queryString, FormMethod.Post, attributes))
    {
        var uniqueId = Model.UniqueId.ToString();
        Html.EnableClientValidation(true);
        Html.EnableUnobtrusiveJavaScript(true);
    @Html.AntiForgeryToken()
    @Html.Hidden(Constants.Id, uniqueId)
    @Html.Hidden(Constants.FormItemId, Model.Item.ID)

    if (Model.ShowTitle)
    {
      var headerText = Html.BootstrapText("Title");
      @Html.BootstrapHeader(headerText.ToString(), Model.TitleTag)
    }

    if (Model.SuccessSubmit)
    {
	  @(!string.IsNullOrEmpty(Model.SuccessMessage) ? Model.SuccessMessage : Translate.Text("Default success message."))
      return;
    }

    if (Model.Errors.Any())
    {
      @Html.BootstrapWarningsList(Model.Errors)
    }

    if (Model.ShowInformation)
    {
      @Html.BootstrapText("Information")
    }

    <div class="has-error has-feedback">
      @Html.BootstrapValidationSammary(false)
    </div>

    @Html.EditorFor(x => Model.Sections)

    if (Model.ShowFooter)
    {
      @Html.BootstrapText("Footer")
    }

    @Html.BootstrapSubmit()
  }
}
